using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.XPath;
using System.Xml.Xsl;
using System.Xml;
using System.IO;
using MEYPAK.PRL.EFatura;
using static MEYPAK.PRL.EFatura.TemelFaturaXML;
using MEYPAK.BLL.Assets;
using MEYPAK.Entity.PocoModels.FATURA;
using MEYPAK.Entity.PocoModels.CARI;
using System.Security.Cryptography;
using DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters;
using DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem;
using System.Xml.Serialization;
using DevExpress.XtraVerticalGrid.ViewInfo;
using System.Xml.Serialization.Extensions;
using Syncfusion.XlsIO.Implementation.XmlSerialization;
using DevExpress.XtraRichEdit;
using System.Diagnostics;

namespace MEYPAK.PRL
{
    public partial class FFaturaDesign : Form
    {
        public FFaturaDesign()
        {
            InitializeComponent();
            _faturaServis = new GenericWebServis<PocoFATURA>();
            _cariServis = new GenericWebServis<PocoCARIKART>();
            _faturaDetayServis = new GenericWebServis<PocoFATURADETAY>();
        }
        
        GenericWebServis<PocoFATURA> _faturaServis;
        GenericWebServis<PocoCARIKART> _cariServis;
        GenericWebServis<PocoFATURADETAY> _faturaDetayServis;

        void FaturaBasim(int faturaid)
        {
            _faturaServis.Data(ServisList.FaturaListeServis);
            _cariServis.Data(ServisList.CariListeServis);
            _faturaDetayServis.Data(ServisList.FaturaDetayListeServis);
            var fatura = _faturaServis.obje.Where(x => x.id == faturaid).FirstOrDefault();
            var cari = _cariServis.obje.Where(x => x.id == fatura.cariid).FirstOrDefault();
            var faturadetay = _faturaDetayServis.obje.Where(x => x.faturaid == fatura.id);
            DataSet ds;
            XmlDataDocument xmlDoc;
            XslCompiledTransform xslTran;
            XmlElement root;
            XPathNavigator nav;
            XmlTextWriter writer;
            try
            {
                var rsa = RSA.Create();
                var t1 = new AccountingCustomerParty()
                {
                    Party = new AccountingCustomerPartyParty()
                    {
                        Contact = new AccountingCustomerPartyPartyContact()
                        {
                            ElectronicMail = cari.eposta,
                            Telefax = cari.fax.ToString(),
                            Telephone = cari.telefon.ToString()
                        },
                        PartyIdentification = new AccountingCustomerPartyPartyPartyIdentification()
                        {
                            ID = new ID()
                            {
                                schemeID = "VKN",
                                Value = cari.vergino.ToString()
                            }
                        },
                        PartyName = new AccountingCustomerPartyPartyPartyName()
                        {
                            Name = cari.unvan.ToString(),
                        },
                        PartyTaxScheme = new AccountingCustomerPartyPartyPartyTaxScheme()
                        {
                            TaxScheme = new AccountingCustomerPartyPartyPartyTaxSchemeTaxScheme()
                            {
                                Name = cari.vergidairesi.ToString()
                            }
                        },
                        PostalAddress = new AccountingCustomerPartyPartyPostalAddress()
                        {

                            BuildingName = "",
                            BuildingNumber = cari.apt,
                            CityName = cari.il.ToString(),
                            CitySubdivisionName = cari.ilce.ToString(),
                            Country = new AccountingCustomerPartyPartyPostalAddressCountry() { Name = cari.ulke },
                            PostalZone = "0",
                            Region = cari.mahalle.ToString(),
                            Room = cari.daire,
                            StreetName = cari.sokak.ToString(),

                        }
                    }
                };
                var t2 = new AccountingSupplierParty()
                {
                    Party = new AccountingSupplierPartyParty()
                    {
                        Contact = new AccountingSupplierPartyPartyContact()
                        {
                            ElectronicMail = "gunduzmeypak@gmail.com",
                            Telefax = "000000000",
                            Telephone = "000",

                        },

                        PartyName = new AccountingSupplierPartyPartyPartyName()
                        {
                            Name = "Gündüz Meypak A.Ş."
                        },
                        PartyTaxScheme = new AccountingSupplierPartyPartyPartyTaxScheme()
                        {
                            TaxScheme = new AccountingSupplierPartyPartyPartyTaxSchemeTaxScheme()
                            {
                                Name = "Başkent"
                            }
                        },
                        PostalAddress = new AccountingSupplierPartyPartyPostalAddress()
                        {
                            BuildingName = "",
                            BuildingNumber = "0",
                            CityName = "Ankara",
                            CitySubdivisionName = "Çankaya",
                            Country = new AccountingSupplierPartyPartyPostalAddressCountry() { Name = "Türkiye" },
                            PostalZone = "0",
                            Region = "Kızılırmak",
                            Room = "0",
                            StreetName = "DumluPınar"


                        }

                    }
                };
                List<InvoiceLine> fatSatir = new List<InvoiceLine>();
                foreach (var item in faturadetay)
                {
                    fatSatir.Add(new InvoiceLine()
                    {

                        ID = new ID()
                        {
                            schemeID = "",
                            Value = item.stokid.ToString()
                        },
                        InvoicedQuantity = new InvoicedQuantity()
                        {
                            unitCode = "NIU",
                            Value = item.safi
                        },
                        Item = new InvoiceLineItem()
                        {
                            Name = item.stokadi

                        },
                        LineExtensionAmount = new LineExtensionAmount()
                        {
                            currencyID = "TRL",
                            Value = item.nettoplam
                        },
                        Price = new InvoiceLinePrice()
                        {
                            PriceAmount = new PriceAmount()
                            {
                                currencyID = "TRL",
                                Value = Convert.ToByte(item.birimfiyat)


                            }
                        },
                        TaxTotal = new InvoiceLineTaxTotal()
                        {
                            TaxAmount = new TaxAmount()
                            {
                                currencyID = "TRL",
                                Value = item.kdvtutari
                            },
                            TaxSubtotal = new InvoiceLineTaxTotalTaxSubtotal()
                            {
                                TaxAmount = new TaxAmount()
                                {
                                    currencyID = "TRL",
                                    Value = item.kdvtutari
                                },
                                Percent = item.kdv,
                                TaxableAmount = new TaxableAmount() { currencyID = "TRL", Value = item.nettoplam },
                                TaxCategory = new InvoiceLineTaxTotalTaxSubtotalTaxCategory()
                                {
                                    TaxScheme = new InvoiceLineTaxTotalTaxSubtotalTaxCategoryTaxScheme()
                                    {
                                        TaxTypeCode = "0015",
                                        Name = "KDV"
                                    }
                                }
                            }
                        }
                    });
                }


                var t3 = new AdditionalDocumentReference()
                {
                    Attachment = new AdditionalDocumentReferenceAttachment()
                    {
                        EmbeddedDocumentBinaryObject = new EmbeddedDocumentBinaryObject()
                        {
                            mimeCode = "application/xml",
                            encodingCode = "Base64",
                            characterSetCode = "UTF-8",
                            filename = "MEY2022000000766.xslt",
                            //                            Value = "77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjx4c2w6c3R5bGVzaGVldCB2ZXJzaW9uPSIyLjAiIHhtbG5zOnhzbD0iaHR0cDovL3d3dy53My5vcmcvMTk5OS9YU0wvVHJhbnNmb3JtIg0KICAgIHhtbG5zOmNhYz0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6Q29tbW9uQWdncmVnYXRlQ29tcG9uZW50cy0yIg0KICAgIHhtbG5zOmNiYz0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6Q29tbW9uQmFzaWNDb21wb25lbnRzLTIiDQogICAgeG1sbnM6Y2N0cz0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmRvY3VtZW50YXRpb246MiINCiAgICB4bWxuczpjbG01NDIxNz0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmNvZGVsaXN0OnNwZWNpZmljYXRpb246NTQyMTc6MjAwMSINCiAgICB4bWxuczpjbG01NjM5PSJ1cm46dW46dW5lY2U6dW5jZWZhY3Q6Y29kZWxpc3Q6c3BlY2lmaWNhdGlvbjo1NjM5OjE5ODgiDQogICAgeG1sbnM6Y2xtNjY0MTE9InVybjp1bjp1bmVjZTp1bmNlZmFjdDpjb2RlbGlzdDpzcGVjaWZpY2F0aW9uOjY2NDExOjIwMDEiDQogICAgeG1sbnM6Y2xtSUFOQU1JTUVNZWRpYVR5cGU9InVybjp1bjp1bmVjZTp1bmNlZmFjdDpjb2RlbGlzdDpzcGVjaWZpY2F0aW9uOklBTkFNSU1FTWVkaWFUeXBlOjIwMDMiDQogICAgeG1sbnM6Zm49Imh0dHA6Ly93d3cudzMub3JnLzIwMDUveHBhdGgtZnVuY3Rpb25zIiB4bWxuczpsaW5rPSJodHRwOi8vd3d3Lnhicmwub3JnLzIwMDMvbGlua2Jhc2UiDQogICAgeG1sbnM6bjE9InVybjpvYXNpczpuYW1lczpzcGVjaWZpY2F0aW9uOnVibDpzY2hlbWE6eHNkOkludm9pY2UtMiINCiAgICB4bWxuczpxZHQ9InVybjpvYXNpczpuYW1lczpzcGVjaWZpY2F0aW9uOnVibDpzY2hlbWE6eHNkOlF1YWxpZmllZERhdGF0eXBlcy0yIg0KICAgIHhtbG5zOnVkdD0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmRhdGE6c3BlY2lmaWNhdGlvbjpVbnF1YWxpZmllZERhdGFUeXBlc1NjaGVtYU1vZHVsZToyIg0KICAgIHhtbG5zOnhicmxkaT0iaHR0cDovL3hicmwub3JnLzIwMDYveGJybGRpIiB4bWxuczp4YnJsaT0iaHR0cDovL3d3dy54YnJsLm9yZy8yMDAzL2luc3RhbmNlIg0KICAgIHhtbG5zOnhkdD0iaHR0cDovL3d3dy53My5vcmcvMjAwNS94cGF0aC1kYXRhdHlwZXMiIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIg0KICAgIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSINCiAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIg0KICAgIHhtbG5zOmV4dD0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6Q29tbW9uRXh0ZW5zaW9uQ29tcG9uZW50cy0yIg0KICAgIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIg0KICAgIHhtbG5zOm5zOD0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6QXBwbGljYXRpb25SZXNwb25zZS0yIg0KICAgIHhtbG5zOnhhZGVzPSJodHRwOi8vdXJpLmV0c2kub3JnLzAxOTAzL3YxLjMuMiMiDQogICAgZXhjbHVkZS1yZXN1bHQtcHJlZml4ZXM9ImNhYyBjYmMgY2N0cyBjbG01NDIxNyBjbG01NjM5IGNsbTY2NDExIGNsbUlBTkFNSU1FTWVkaWFUeXBlIGZuIGxpbmsgbjEgcWR0IHVkdCB4YnJsZGkgeGJybGkgeGR0IHhsaW5rIHhzIHhzZCB4c2kgZXh0IGRzIG5zOCB4YWRlcyI+DQogIDx4c2w6ZGVjaW1hbC1mb3JtYXQgbmFtZT0iZXVyb3BlYW4iIGRlY2ltYWwtc2VwYXJhdG9yPSIsIiBncm91cGluZy1zZXBhcmF0b3I9Ii4iIE5hTj0iIi8+DQogIDx4c2w6b3V0cHV0IHZlcnNpb249IjQuMCIgbWV0aG9kPSJodG1sIiBpbmRlbnQ9Im5vIiBlbmNvZGluZz0iVVRGLTgiDQogICAgICAgIGRvY3R5cGUtcHVibGljPSItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiINCiAgICAgICAgZG9jdHlwZS1zeXN0ZW09Imh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCIvPg0KICA8eHNsOnBhcmFtIG5hbWU9IlNWX091dHB1dEZvcm1hdCIgc2VsZWN0PSInSFRNTCciLz4NCiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJYTUwiIHNlbGVjdD0iLyIvPg0KICA8eHNsOnRlbXBsYXRlIG1hdGNoPSIvIj4NCg0KDQogICAgPCEtLSBYU0xUX0RFRjplZjUxZGE0MzkwOWRhMWYzOWI5ZDAzM2E2NmU3NjEyNiAtLT4NCiAgICA8IS0tREVHSVNLRU5MRVItLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InVibHZlcnNpeW9uIiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYmM6VUJMVmVyc2lvbklEIj48L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InVibHZlcnNpeW9uX3N0ciIgc2VsZWN0PSJjb25jYXQoLy9uMTpJbnZvaWNlL2NiYzpDdXN0b21pemF0aW9uSUQsJyAvIFVCTCAnLC8vbjE6SW52b2ljZS9jYmM6VUJMVmVyc2lvbklEKSI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ1YmwyMSIgPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWJsdmVyc2l5b24gPSAnMi4xJyI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IicxJyIvPg0KICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iMCIvPg0KICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJteV9ubDIiPg0KICAgICAgPHhzbDp0ZXh0PiYjeGE7PC94c2w6dGV4dD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im15X2JyIj4NCiAgICAgIDx4c2w6dGV4dCBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIj4mbHQ7YnIvJmd0OzwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJtdXN0ZXJpX2FkaSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlOYW1lL2NiYzpOYW1lIj48L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX2FkaSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlOYW1lL2NiYzpOYW1lIj48L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX2FkcmVzaSIgc2VsZWN0PSJjb25jYXQoJycsLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOlN0cmVldE5hbWUsJyYjMTYwOycsLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOkJ1aWxkaW5nTmFtZSwnJiMxNjA7JywvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6UG9zdGFsQWRkcmVzcy9jYmM6QnVpbGRpbmdOdW1iZXIsJyYjMTYwOycsLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOlBvc3RhbFpvbmUsJyYjMTYwOycsJG15X2JyLC8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpDaXR5U3ViZGl2aXNpb25OYW1lLCcgLyAnLC8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpDaXR5TmFtZSkiPjwveHNsOnZhcmlhYmxlPg0KDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYXR1cmFfbm8iIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpJRCI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYXR1cmFfaWQiIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpVVUlEIj48L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZhdHVyYV90YXJpaGkiIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUiPjwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmF0dXJhX3phbWFuaSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOklzc3VlVGltZSI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYXR1cmFfdGlwaSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOkludm9pY2VUeXBlQ29kZSI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYXR1cmFfcHJvZmlsaSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYXR1cmFfZG92aXpfa29kdSIgc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOkRvY3VtZW50Q3VycmVuY3lDb2RlIj48L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZhdHVyYV9kb3ZpemkiID4NCiAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGZhdHVyYV9kb3Zpel9rb2R1ID0gJ1RSTCcgb3IgJGZhdHVyYV9kb3Zpel9rb2R1ID0gJ1RSWSciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSInVEwnIi8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOkRvY3VtZW50Q3VycmVuY3lDb2RlIi8+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfYWRpMiI+DQogICAgICA8eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+PC94c2w6dGV4dD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX2FkcmVzaTIiPg0KICAgICAgPHhzbDp0ZXh0IGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiPjwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV92a25vX2FsdDEiPg0KICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRCI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iQHNjaGVtZUlEID0gJ1RDS04nIGFuZCBwb3NpdGlvbigpID0gMSI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4iIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOmlmPg0KICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV92a25vX2FsdDIiPg0KICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRCI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iQHNjaGVtZUlEID0gJ1ZLTicgYW5kIHBvc2l0aW9uKCkgPSAxIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLiIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3Zrbm8iPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfdmtub19hbHQxIGFuZCAkZmlybWFfdmtub19hbHQxIT0nJyI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV92a25vX2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdmtub19hbHQyIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV92a25vMiI+DQogICAgICA8eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+PC94c2w6dGV4dD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3ZkYWlyZV9hbHQxIj4NCiAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlUYXhTY2hlbWUvY2FjOlRheFNjaGVtZS9jYmM6TmFtZSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3ZkYWlyZV9hbHQyIj4NCiAgICAgIDx4c2w6dGV4dCBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIj48L3hzbDp0ZXh0Pg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfdmRhaXJlIj4NCiAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGZpcm1hX3ZkYWlyZV9hbHQxIGFuZCAkZmlybWFfdmRhaXJlX2FsdDEhPScnIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX3ZkYWlyZV9hbHQxIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX3ZkYWlyZV9hbHQyIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV90ZWxfYWx0MSI+DQogICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOlRlbGVwaG9uZSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3RlbF9hbHQyIj4NCiAgICAgIDx4c2w6dGV4dCBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIj4wMzMyIDMyMSA5MCA5OTwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV90ZWwiPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfdGVsX2FsdDEgYW5kICRmaXJtYV90ZWxfYWx0MSE9JyciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdGVsX2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdGVsX2FsdDIiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX2ZheF9hbHQxIj4NCiAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6Q29udGFjdC9jYmM6VGVsZWZheCIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX2ZheF9hbHQyIj4NCiAgICAgIDx4c2w6dGV4dCBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIj4wMzMyIDMyMSA5MCA5OTwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV9mYXgiPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfZmF4X2FsdDEgYW5kICRmaXJtYV9mYXhfYWx0MSE9JyciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfZmF4X2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfZmF4X2FsdDIiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX21lcnNpc19hbHQxIj4NCiAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbi9jYmM6SURbQHNjaGVtZUlEID0gJ01FUlNJU05PJ10iIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV9tZXJzaXNfYWx0MiI+DQogICAgICA8eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+MDEwMyAwNTc4IDI2MjAgMDAwMTwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV9tZXJzaXMiPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfbWVyc2lzX2FsdDEgYW5kICRmaXJtYV9tZXJzaXNfYWx0MSE9JyciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfbWVyc2lzX2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfbWVyc2lzX2FsdDIiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfZW1haWxfYWx0MSI+DQogICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOkVsZWN0cm9uaWNNYWlsIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfZW1haWxfYWx0MiI+DQogICAgICA8eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+aW5mb0BhdG1sYWRkZXIuY29tPC94c2w6dGV4dD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfZW1haWwiPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfZW1haWxfYWx0MSBhbmQgJGZpcm1hX2VtYWlsX2FsdDEhPScnIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX2VtYWlsX2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfZW1haWxfYWx0MiIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfd2ViX2FsdDEiPg0KICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NiYzpXZWJzaXRlVVJJIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfd2ViX2FsdDIiPg0KICAgICAgPHhzbDp0ZXh0IGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiPnd3dy5hdGVzbWVyZGl2ZW4uY29tPC94c2w6dGV4dD4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3dlYiI+DQogICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRmaXJtYV93ZWJfYWx0MSBhbmQgJGZpcm1hX3dlYl9hbHQxIT0nJyI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV93ZWJfYWx0MSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV93ZWJfYWx0MiIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlybWFfdGljYXJldG5vX2FsdDEiPg0KICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQgPSAnVElDQVJFVFNJQ0lMTk8nXSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZpcm1hX3RpY2FyZXRub19hbHQyIj4NCiAgICAgIDx4c2w6dGV4dCBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIj41MTU2MjwveHNsOnRleHQ+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJtYV90aWNhcmV0bm8iPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfdGljYXJldG5vX2FsdDEgYW5kICRmaXJtYV90aWNhcmV0bm9fYWx0MSE9JyciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdGljYXJldG5vX2FsdDEiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdGljYXJldG5vX2FsdDIiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InNhdGlyX3NheWlzaSIgc2VsZWN0PSJjb3VudCgvL24xOkludm9pY2UvY2FjOkludm9pY2VMaW5lKSIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImJvc19zYXRpciIgc2VsZWN0PSIyMCAtIGNvdW50KC8vbjE6SW52b2ljZS9jYWM6SW52b2ljZUxpbmUpIiAvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYm9zX3NhdGlyX29sc3VuIiBzZWxlY3Q9IjEiIC8+DQogICAgPGh0bWw+DQogICAgICA8dGl0bGU+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkbXVzdGVyaV9hZGkiLz4gRmF0dXJhIE5vOjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmF0dXJhX25vIi8+DQogICAgICA8L3RpdGxlPg0KICAgICAgPGhlYWQ+DQogICAgICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgICAgICAgKnsNCiAgICAgICAgICBmb250LWZhbWlseTogIkhlbHZldGljYSI7DQogICAgICAgICAgZm9udC1zaXplOjExcHg7DQogICAgICAgICAgY29sb3I6IzMzMzMzMzsNCiAgICAgICAgICB9DQogICAgICAgICAgYm9keXsgbWFyZ2luOjBweDsgcGFkZGluZzowcHg7IHBhZGRpbmctbGVmdDo0cHg7fQ0KICAgICAgICAgIC5wYWdlX2NvbnRhaW5lcnsgd2lkdGg6ODUwcHg7ICB9DQogICAgICAgICAgLnB3eyB3aWR0aDo4NTBweDsgfQ0KICAgICAgICAgIC5mYXR1cmFfaGVhZF90YWJsZXsgfQ0KICAgICAgICAgIGltZy5sb2dveyBib3JkZXI6MHB4OyB9DQogICAgICAgICAgLmZpcm1hX2FkaXsgZGlzcGxheTpibG9jazsgY29sb3I6Izk5MDEwMDsgZm9udC1zaXplOjEuMmVtOyBmb250LXdlaWdodDpib2xkOyBtYXJnaW4tdG9wOjEwcHg7fQ0KICAgICAgICAgIC5maXJtYV9hZHJlc2l7IGRpc3BsYXk6YmxvY2s7IH0NCiAgICAgICAgICAuY2VyY2V2ZV91c3R7IHBvc2l0aW9uOiByZWxhdGl2ZTsgd2lkdGg6NDAwcHg7IGhlaWdodDoxNXB4OyBtYXJnaW4tdG9wOjVweDsgIH0NCiAgICAgICAgICAuY2VyY2V2ZV9hbHR7IHBvc2l0aW9uOiByZWxhdGl2ZTsgd2lkdGg6NDAwcHg7IGhlaWdodDoxNXB4OyBtYXJnaW4tYm90dG9tOjVweDsgfQ0KICAgICAgICAgIHNwYW4uY2VyY2V2ZV9ib3h7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgd2lkdGg6MTVweDsgaGVpZ2h0OjE1cHg7ICBib3JkZXItcmFkaXVzOjRweDt9DQogICAgICAgICAgLmNvcm5lcl90bHsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6MHB4O2xlZnQ6MHB4OyBib3JkZXI6MHB4IG5vbmU7IGJvcmRlci10b3A6MnB4IHNvbGlkICMzMzMzMzM7IGJvcmRlci1sZWZ0OjJweCBzb2xpZCAjMzMzMzMzOyB9DQogICAgICAgICAgLmNvcm5lcl90cnsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6MHB4O3JpZ2h0OjBweDsgYm9yZGVyOjBweCBub25lOyBib3JkZXItdG9wOjJweCBzb2xpZCAjMzMzMzMzOyBib3JkZXItcmlnaHQ6MnB4IHNvbGlkICMzMzMzMzM7IH0NCiAgICAgICAgICAuY29ybmVyX2JseyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDowcHg7bGVmdDowcHg7IGJvcmRlcjowcHggbm9uZTsgYm9yZGVyLWJvdHRvbToycHggc29saWQgIzMzMzMzMzsgYm9yZGVyLWxlZnQ6MnB4IHNvbGlkICMzMzMzMzM7IH0NCiAgICAgICAgICAuY29ybmVyX2JyeyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDowcHg7cmlnaHQ6MHB4OyBib3JkZXI6MHB4IG5vbmU7IGJvcmRlci1ib3R0b206MnB4IHNvbGlkICMzMzMzMzM7IGJvcmRlci1yaWdodDoycHggc29saWQgIzMzMzMzMzsgfQ0KICAgICAgICAgIC5jZXJjZXZlX29ydGF7IHBhZGRpbmctcmlnaHQ6MTBweDsgcGFkZGluZy1sZWZ0OjEwcHg7IHBhZGRpbmctdG9wOjBweDsgcGFkZGluZy1ib3R0b206MHB4OyB9DQogICAgICAgICAgLmVmYXR1cmFfY2FwX2RpdnsgYm9yZGVyLXJhZGl1czo2cHg7IHdpZHRoOiA5NSU7IHBhZGRpbmc6IDhweDsgYmFja2dyb3VuZDojMTU5ZWFlOyBjb2xvcjojZmZmZmZmIH0NCiAgICAgICAgICAuZmlybWFfdmR7IH0NCiAgICAgICAgICAucGFpcl9rZXl7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgd2lkdGg6MTAwcHg7IGZvbnQtd2VpZ2h0OiBib2xkOyB9DQogICAgICAgICAgLnBhaXJfc2VwZXJhdG9yeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOiAxMHB4OyB0ZXh0LWFsaWduOiBsZWZ0OyB9DQogICAgICAgICAgLnBhaXJfdmFsdWV7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgfQ0KICAgICAgICAgIC5jZXJjZXZleyBib3JkZXItcmFkaXVzOjZweDsgYm9yZGVyOjFweCBzb2xpZCAjMzMzMzMzOyBtYXJnaW4tdG9wOjVweDttYXJnaW4tYm90dG9tOjVweDsgd2lkdGg6MTAwJTsgfQ0KICAgICAgICAgIC5wYWQ2cHgsLnBhZDZ4eyBwYWRkaW5nOjZweDsgfQ0KICAgICAgICAgIC5wYWQxMHB4LC5wYWQxMHh7IHBhZGRpbmc6MTBweDsgfQ0KICAgICAgICAgIC50YWJsb19zYXRpcnsgd2lkdGg6ODUwcHg7IGJvcmRlci1zcGFjaW5nOjFweDsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7fQ0KICAgICAgICAgIHRkeyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9DQogICAgICAgICAgLmFsdF90b3BsYW1fdGFibG9zdXsgd2lkdGg6ODUwcHg7IH0NCiAgICAgICAgICAuYWx0X3RvcGxhbV9rZXl7DQogICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgICAgICAgIHdpZHRoOjI1MHB4Ow0KICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgIH0NCiAgICAgICAgICAuYWx0X3RvcGxhbV9zZXB7IGRpc3BsYXk6IGlubGluZS1ibG9jazt9DQogICAgICAgICAgLmFsdF90b3BsYW1fdmFseyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOjEyMHB4OyBtYXJnaW4tbGVmdDozcHg7ICB9DQogICAgICAgICAgLnRvcGxhbV9zYXRpcml7IHBhZGRpbmc6M3B4OyB9DQogICAgICAgICAgLnJvd19iYW5rYXsgZm9udC13ZWlnaHQ6IGJvbGQ7IGNvbG9yOiM5OTAxMDA7IH0NCiAgICAgICAgICBheyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGNvbG9yOiMzMzMzMzM7IH0NCiAgICAgICAgICBhOmhvdmVyeyBmb250LXdlaWdodDpib2xkOyBjb2xvcjojOTkwMTAwOyB9DQogICAgICAgICAgLmFsdF90b3BsYW1fa2V5eyBjb2xvcjojMTU5ZWFlOyB9DQogICAgICAgICAgLmFsdF90b3BsYW1fdmFseyAgY29sb3I6IzMzMzMzMzsgfQ0KICAgICAgICAgIC5mYXR1cmFfbm90X2NvbnRhaW5lcnsgY29sb3I6Izk5MDEwMDsgfQ0KICAgICAgICAgIC5zYXRpcl9taWt0YXIgc3Bhbnsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfQ0KICAgICAgICAgIHNwYW4uc3Bhbl9zYXRpcl9taWt0YXJ7IHdoaXRlLXNwYWNlOiBub3dyYXAgIWltcG9ydGFudDsgZGlzcGxheTppbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfQ0KICAgICAgICAgIHNwYW4uc3Bhbl9zYXRpcl9taWt0YXIgc3BhbnsgZGlzcGxheTppbmxpbmUgIWltcG9ydGFudDsgfQ0KICAgICAgICAgIC5zcGFuX3NhdGlyX2JmaXlhdCwNCiAgICAgICAgICAuc3Bhbl9zYXRpcl9rZHZfdHV0YXIsLnNwYW5fc2F0aXJfdG9wbGFtLHNwYW4uc3Bhbl9zYXRpcl9taWt0YXJ7d2hpdGUtc3BhY2U6IG5vd3JhcCAhaW1wb3J0YW50OyBkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7ICAgIH0NCiAgICAgICAgIC5zcGFuX3NhdGlyX2lza29udG9fb3JhbiBkaXYsLnNwYW5fc2F0aXJfaXNrb250b190dXRhciBkaXZ7IHBhZGRpbmctcmlnaHQ6NHB4OyB3aGl0ZS1zcGFjZTogbm93cmFwICFpbXBvcnRhbnQ7IGRpc3BsYXk6YmxvY2sgIWltcG9ydGFudDsgICAgIH0NCiAgICAgICAgICAuZmF0dXJhX2JpbGdpeyBtaW4td2lkdGg6IDIxMHB4ICFpbXBvcnRhbnQ7IH0NCiAgICAgICAgICAucm93X2JhbmthX2NhcHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB3aWR0aDoxMzBweDsgICB9DQogICAgICAgICAgLnJvd19iYW5rYV9jYXAyeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOjE2MHB4OyAgIH0NCiAgICAgICAgICAucm93X2JhbmthX2NhcDN7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgd2lkdGg6MjIwcHg7ICAgfQ0KICAgICAgICAgIC5yb3dfYmFua2FfY2FwNHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB3aWR0aDozNTBweDsgICB9DQogICAgICAgICAgLnJvd19iYW5rYXsgbWFyZ2luLWJvdHRvbTo1cHg7ICAgfQ0KICAgICAgICAgIC5yb3dfYmFua2Ffc2VweyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOjEwcHg7IH0NCiAgICAgICAgICAuZmF0dXJhX25vdF9jb250YWluZXJfd19ib3h7DQogICAgICAgICAgYm9yZGVyOjFweCBzb2xpZCAjMzMzMzMzOyBwYWRkaW5nOjhweDsgYm9yZGVyLXJhZGl1czo2cHg7IG1hcmdpbi10b3A6NHB4Ow0KICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlOw0KICAgICAgICAgIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgIG1heC13aWR0aDogODUwcHg7DQogICAgICAgICAgfQ0KICAgICAgICAgIC5mYXR1cmFfbm90X2NvbnRhaW5lcl93X2JveF9ib2xkew0KICAgICAgICAgIGJvcmRlcjoxcHggc29saWQgIzMzMzMzMzsgDQogICAgICAgICAgcGFkZGluZzo4cHg7IA0KICAgICAgICAgIGJvcmRlci1yYWRpdXM6NnB4OyANCiAgICAgICAgICBtYXJnaW4tdG9wOjRweDsNCiAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTsNCiAgICAgICAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICBtYXgtd2lkdGg6IDg1MHB4Ow0KICAgICAgICAgIGZvbnQtc2l6ZToxNXB4Ow0KICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7DQogICAgICAgICAgfQ0KICAgICAgICAgIC5lZmF0dXJhX3RleHR7IHRleHQtYWxpZ246IGNlbnRlcjsgY29sb3I6I2JiYmJiYjsgZm9udC1zaXplOjEycHg7IH0NCiAgICAgICAgICBkaXYuaXJzYWxpeWVfaXRlbV9jb250YWluZXJ7IG1hcmdpbi10b3A6MTRweDsgbWFyZ2luLWJvdHRvbToxMHB4OyBkaXNwbGF5OiBibG9jazsgdmlzaWJpbGl0eTogdmlzaWJsZTsgfQ0KICAgICAgICAgIHNwYW4uYWx0X2lyc2FsaXllX2l0ZW17IHBhZGRpbmc6NHB4OyBtYXJnaW4tcmlnaHQ6M3B4OyBib3JkZXI6MXB4IHNvbGlkICNkZGRkZGQ7IGJhY2tncm91bmQ6I2VlZWVlZTsgIG1hcmdpbi10b3A6MTBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9DQogICAgICAgICAgLmdpYl9sb2dvX2NvbnRhaW5lcnsgdGV4dC1hbGlnbjogY2VudGVyOyB9DQogICAgICAgICAgDQogICAgICAgICAgLmZhdHVyYV9ub3RfY29udGFpbmVyX3dfYm94X2NhcHsNCiAgICAgICAgICBiYWNrZ3JvdW5kOiNlZWVlZWU7DQogICAgICAgICAgY29sb3I6IzFlMWUxZTsNCiAgICAgICAgICBmb250LXNpemU6MTRweDsNCiAgICAgICAgICBmb250LXdlaWdodDpib2xkOw0KICAgICAgICAgIHBhZGRpbmc6NHB4Ow0KICAgICAgICAgIGJvcmRlci1yYWRpdXM6NnB4Ow0KICAgICAgICAgIGJvcmRlcjoxcHggc29saWQgI2NjY2NjYzsNCiAgICAgICAgICB9DQogICAgICAgICAgLmZhdHVyYV9ub3RfY29udGFpbmVyX3dfYm94X2NhcDJ7DQogICAgICAgICAgZm9udC1zaXplOjEycHg7DQogICAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZDsNCiAgICAgICAgICBwYWRkaW5nOjRweDsNCiAgICAgICAgICB9DQogICAgICAgICAgLmVhcnNpdl9pYWRlX3BhaXJ7IGZvbnQtd2VpZ2h0OmJvbGQ7IH0NCiAgICAgICAgICAuZWFyc2l2X2lhZGVfcGFpcl9ib3NsdWt7IGhlaWdodDozMHB4OyB9DQogICAgICAgICAgLmVhcnNpdl9pYWRlX3RhYmxvc3V7IGJvcmRlcjoycHggc29saWQgI2NjY2NjYzsgfQ0KICAgICAgICAgIC5mYXR1cmFfbm90X2NvbnRhaW5lcl93X2JveF9jYXBoZWFkYWVyeyBwYWRkaW5nOjZweDsgY29sb3I6I2ZmZmZmZjsgYmFja2dyb3VuZDojNjY2NjY2OyB9DQogICAgICAgICAgdHIuZWFyc2l2X2lhZGVfb2RkLHRyLmVhcnNpdl9pYWRlX2V2ZW57IGhlaWdodDoyMHB4OyB9DQogICAgICAgICAgdHIuZWFyc2l2X2lhZGVfb2RkeyBiYWNrZ3JvdW5kOiNlZWVlZWU7IH0NCiAgICAgICAgICAubXl0ZXh0X2JvbGR7IGZvbnQtd2VpZ2h0OmJvbGQ7IH0NCiAgICAgICAgICAuYm9zX3NhdGlyeyBtaW4td2lkdGg6MzBweDsgbWluLWhlaWdodDoxNnB4OyBkaXNwbGF5OmJsb2NrOyB9I3RhYmxvX3NhdGlyew0KICAgICAgICAgIGJvcmRlcjoxcHggc29saWQgI2IwYjBiMDsNCiAgICAgICAgICB9DQogICAgICAgICAgLmtvbG9uX2Jhc2xpa3sNCiAgICAgICAgICBib3JkZXItYm90dG9tIDogMXB4IHNvbGlkICBibGFjazsNCiAgICAgICAgICBib3JkZXItcmlnaHQ6MXB4IHNvbGlkICBibGFjazsNCiAgICAgICAgICBiYWNrZ3JvdW5kOiAjMTU5ZWFlOw0KICAgICAgICAgIGNvbG9yOiNmZmZmZmY7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgdHIudHJfYmFzbGlrIHRkOmxhc3QtY2hpbGQsIHRyLnNhdGlyIHRkOmxhc3QtY2hpbGQgeyAgICBib3JkZXItcmlnaHQ6MHB4IG5vbmU7IH0NCiAgICAgICAgICAua29sb25fYmFzbGlrIHNwYW57DQogICAgICAgICAgZGlzcGxheTpibG9jazsgdGV4dC1hbGlnbjpjZW50ZXI7DQogICAgICAgICAgY29sb3I6I2ZmZmZmZjsNCiAgICAgICAgICBmb250LXdlaWdodDpib2xkOw0KICAgICAgICAgIHBhZGRpbmc6M3B4Ow0KICAgICAgICAgIH0NCiAgICAgICAgICB0ci5zYXRpciB0ZHsNCiAgICAgICAgICBib3JkZXItYm90dG9tIDogMXB4IHNvbGlkICBibGFjazsNCiAgICAgICAgICBib3JkZXItcmlnaHQ6MXB4IHNvbGlkICBibGFjazsNCiAgICAgICAgICB9DQogICAgICAgICAgdGQua29sb25fZGVnZXIgc3BhbiB7IGRpc3BsYXk6YmxvY2s7IHBhZGRpbmc6MnB4OyB9DQogICAgICAgICAgLnRhYmxvX3NhdGlyIHRyOmxhc3QtY2hpbGQgdGR7ICBib3JkZXItYm90dG9tOjBweCBub25lOyAgfQ0KDQogICAgICAgICAgLm15ZnJhbWV7DQogICAgICAgICAgbWFyZ2luLXRvcDo1cHg7DQogICAgICAgICAgbWFyZ2luLWJvdHRvbTo1cHg7DQogICAgICAgICAgYm9yZGVyIDogMXB4IHNvbGlkICBibGFjazsgcGFkZGluZzo2cHg7IGJvcmRlci1yYWRpdXM6NnB4Ow0KICAgICAgICAgIH0NCiAgICAgICAgICAuZnJtYmFua2F7DQogICAgICAgICAgbWFyZ2luLXRvcDo1cHg7DQogICAgICAgICAgbWFyZ2luLWJvdHRvbTo1cHg7DQogICAgICAgICAgYm9yZGVyIDogMXB4IHNvbGlkICBibGFjazsgcGFkZGluZzo2cHg7IGJvcmRlci1yYWRpdXM6NnB4Ow0KICAgICAgICAgIH0NCiAgICAgICAgICAuZWZhdHVyYV90ZXNsaW1lZGVuDQogICAgICAgICAge2Zsb2F0OmxlZnQ7d2lkdGg6MzAlO30NCiAgICAgICAgICAuZWZhdHVyYV90ZXNsaW1lZGVuIHNwYW4NCiAgICAgICAgICB7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4Ow0KICAgICAgICAgIGZsb2F0OmxlZnQ7d2lkdGg6MTAwJTttYXJnaW4tdG9wOjE1cHg7bWFyZ2luLWxlZnQ6NDBweDsgfQ0KICAgICAgICAgIC5lZmF0dXJhX3Rlc2xpbWVkZW4gLnZhbHt0ZXh0LWRlY29yYXRpb246bm9uZTt9DQogICAgICAgIDwvc3R5bGU+DQogICAgICA8L2hlYWQ+DQogICAgICA8Ym9keT4NCiAgICAgICAgPGRpdiBjbGFzcz0icGFnZV9jb250YWluZXIiID4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9InB3IGZhdHVyYV9oZWFkX3RhYmxlIiB3aWR0aD0iODAwIiBjZWxscGFkZGluZz0iMHB4Ij4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6NDAwcHg7Ij4NCiAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQVN3QUFBQnpDQUlBQUFDdHNLaTBBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUVsTlNVUkJWSGphN0wxM25GMVhkUy8rL2E2OXo3bDNadFNzWWx1eVpNbXlMZmVLS2FZYk1CaGlrcEJRUWlnQjI4VFVoTHkwbDd5OHZOLzc1TDI4bC9ZSW1ONE1nUVNDQXduRmRFS29wcGdZTjBsV2w5VjdHYzNNdmZmc3ZiNi9QODRkZFd0bVpNbGdjNWZ2UjUreE5QZmVjL1krYTYvMlhkOUZTZWhKVDNyeXN4UHJMVUZQZXRKVHdwNzBwS2VFUGVsSlQzcEsySk9lOUpTd0p6M3BTVThKZTlLVG5oS2VWQkY2dFpDZTlPUW9Fays2N2trQ1RNem1CalB3d1gzNzd0aThQVEtBQURQVXM4WTkrWVVSZ1NTRVJCOEk0YnA1WndSamZBUysxT1F5ajE1ckhmNzZKNHZmZGUvS0VFbUljTEduaEQzNVJSRTZSQm1zNC9tc3FWUHVmOW5zUGdzblhRbU5BcEFCTXhqd3ZVM2JQckh5d1ZuOWhTeVl1OVBZMjVtZS9LSllRUmpnRU1Ic1BxMG9RVDRDN3FnRUIwTVVBQmZ0N2Zjc2F5ZjJsOHJNUVVWZzh0N205T1FYeEF3Q0lBVlJjRGdnUGlJeElhbVE2U2JTN0F1cjEzL3p3WTFsQWZPaVlIWkxBTWllTGV6Skw0elU0UmRKSEVoVW5sd2xGQ0FoUURDTzVQeU9lMWVNZ1AwMENRSUJDdWdsVFh2eUMyUU1TVWlBczA2RlNEalpKUXAybldBRCtFL0wxdDZ4ZGN1a1dFQVUxVFhPdlczcHlTOVNWSGhJb1k2cUZlQ2taeWFkTW5KcnEvV2h4YXVJNEQzRDE1T2VIQ3FQUUhsQUFENyt3SnE3ZCt4b2h0RHpQbnZTazBkYUNZMjJibkQ0UGZjLzBJd2w2RDNjVEU5NmN0S1ZVS09PcjBianpuY3VmbUREdnJhWjZBbzlIZXhKVDA2dUVnb1NJS2tPL3NpN3QrKzhiZG02TXNCa29ubXZJTkdUbnB4Y0phUkFFQ1JWVjBMZWVlL3lUU09kMGlMbHB1RHNtY0tlOU9Sa0txRkF3Z0dJVHVEYkc3ZCtkdldEazJLUW9vY2t1dlYwc0NjOU9hbEtXQmZnblNJQ1hPKzhlOW1nQTVTeFlpNW91VmNhN0VsUFRySTdDb2hXNTJNK3MzYkROelp1SFRBalhhQVltRzFjMlZIV3pZZnExVE42OG9zZ0p4aTI1Z0FrWXhoTytSMzNMSEhQTWNaUlZjbytEcHdvSVpjQUIrZ01sSHFtc3llUEdWSDlpSXRTaGxpcnhrbHhSd0g4NDdJMVA5bTJ2WWdUVlhJNXM4Q0FSdkFZdktlQlBYbnNDT3RnekdXMWs4ZVRZd2tCcDlubTRaSDNMVjRPbEVHY1lEcVVWQkhncnNvRFVJTk1lNXJZazhlS0doSU9RalQ0YUJmRENWZEN3Z0I4ZE5tS0IzYnU3UytLWkc3T2lieWRrSExJeW1aZXRuS25icnZxN1Y1UEhsTk9xVktXUm5KM0JzV0piMlY2Y08vUUIrNWZHV01rYXNUTUJKVFFJWm5IYklsQjNybDgxcFRwamRKN090aVR4MHBFcUc1Z3lBeWYzZGNYVGtobmZRWkNWOUhrU0liaW5mYytzR2xmMWRjSWNnUk5qRUtHUUhDQzNzblY1VE9uL2N2em5qRzVNTytOck9uSlkwY05DWFo3K1NKUkJqc0JTaGhxV3ljSU1CWjNidHYrejZ2V2hXaEJMbElNRTBUSUtCc3phRWkvZituRnAvYVZ2VzNyeVdOZVRrQjIxQ0ZIcnFzUEg3aHZ4WTdoMURRQTVxWUpCWVMxTFJUVWFlZm5uem4zK1F0bTlhTEJudlNVY0R6bUZZVFgrWmh2Yk54NjI2b056VWF0bUlFeWNzSTBUcDR4dGRGNDgyVVhsQmFsSGd0VVQzcEtPSTRvRG5DQ0tmczc3bDVjeVVVNWdwak1rU2YrZ2UxYy9mbzVjNTV5Mmd5TU9ybzk2VWxQQ1k5cENZbk1BT0t6cTlkL2E5UFdKa09aSTBHMzJraU85ZmtVcFAybHk4cjlqRW45djNmcGVRQnlEWlk1TXFhVW9EcGplbUxzcE9yL3hwbiswYzgvbU03ckVwUk93dFhXNjdUL3M4ZTNBWTc2WFNjbHdTYWdmaGdPMExjNFhCQjBrb3BidnYrTEgrWjFuemkyTlNIU2hsTjY1K0xGN3NFaWM2MDdidU9xVFVoa0VBRmtaTFZkTjE5NDlsbFRwcmhFT0Qwb0hJNTBFN0lZb0M0RzdyMzNML25TeW0yeFNUaGdOUGZ4RjBYYTJTK2VNZkNYVDN5Y3M0c2hHaHRYUjM1cjA3WjMzN1dzSFhLQVJaZi8zRUFKSkpuWm4xeDE0UlV6cGtPVkl3YnkzZmN0L3RMYXJmMVdwcEFzRjJDZTBQUGpsTW15WmE5NDAwVm5YYjlnbmdza01tUWFCd3BSZ3VEbVJDQUU4UCs3ODU0N3QrN3NDMUVPbUhNaVNBeEJJZ0ppQzUyWlJmbm5WMTI4WU1vVStmNEdPbVVROGtCek9TQ0tKN1pmUUJCRUVOV24vckx6NEYxbWsyZ1Q4UFlvUUM0WUFLWU96bGpVZVBuLzRJbGc0Q2FBank1ZCtjTnQreVpibEJJUUp2TG1JTGlKRGcyN0xqOWw2ZzBYbmx2dnZzRjB4Q1k3QUppNmRROCtzR2Z3Ly94aytjYVI0U0lRSGdrQWFmd0xuNlh2YkxRbm56N24rZ1Z6SUsvM2VNeTNiOTQzOG9XTkc5eUJ3SmgvanVvbkxrV0xOMTkwSGdDaENBNFk3dDQ1K0lWVjIvdWFBQ3BEeEVTdWw2aTdRdDJrUWNlSThyUG16dW1QUVNMbzNYL21zUjBsVVRXZ3Z3S0xPN1pzZTk5OWE3YTNPNlVsOHpDYVZoLy9RMHlTYmF1VU9ic3grWGN2VDdYZEMwU1d2ckJweDVxaFlXTTZzMy9LQzA2ZlZaQTQ0UjNrRW1tdCs3NWVmZVc5NkxTekJVMGs2eUhVU0puQzBiRk9OWERWdGJSd0Fpd2hpWFZEUXg5YXNycHdJR1p3WWxGY2JZS29CQlJnZXZQbDU1MVNGcEtzdS8ySGI3RUI3Z0JkSmlLODg2NEh0cmFIVDJtVTVxQ3BNbEhGaEU2L29WeTk4LzZWenp6anRFa3hPSElZeDlrWmpYMkJCaHBETHZIejA2WHNRbUVLZEFCT0oybGd3MkpmWDU0VUVYSmZOcDlvSzVrelV3VVFHdXo4WU5PT2I2N2Y5a3NMVHFmcUlUN2orU2c2M1dRd0EvQ1BENnpiMng2WlVacXI2VVcyaWM0Q0VrUnZzSkdSK3dvTE1rQXdDUGJlbFd2WERiWG05aldEOWQrM2QzRERVT2VONTg3eEU0K05OcldIL0lzZlJwV3RPWkFwS2t6by9hQUl4VllLVnp6Ym52cktFeE1UQXZpSHBhc1g3eG9zQ2poOVFtYXdQdHVjRHNTUnF2M2MyYWY5MmxselIvL2FBQU9QY09zRlk3MnI0VnViTjkrMmRsM1RvbktzQXAwaEtCZ0YrdmhmazBKeHgvcU5uMTZ6RmdRVk5MNEhTeGFkekhSRG50RFhuZVJYZHFyMmRnejFNUVpSSVVXcXpFUW1KL1NCb2tkSGtNQk1CUWZldlhpSlhES0p0ZnMrMWdsVWh5WVVFQmJ2SFB6MDZqVjlqU0xSM0pKMVd3b21jb1BtOVdjbWd5d0xBQmdRZnJoanorNmN6cDQwc0h4NFpHL1ZhcVdxbmRPUHR1ODU0WDE2QktvZmZhNjYvMXRzRk1sbzlTTTY3aGVSVFhJQ1pTTTg5dzBvRzhlcGhJZjVEeXYyN1B2dzBwWDlJUkNrekNhY0sySGhJVUhOcHIzNXNrWE5FQ0NRUHBxcjRXSEhyU2hSQlVJbit5MzNyQmhxVnlVRFFzdmN4U3k0RkNBYi8wdUFtYjN6M21XN1d0bk14Nk9EQnNWYy8yYUEyNFMrN21TL3pGa3JCdXVwQjRBSnN1eDBtUmZ1RS9vMEtqaVpTVGlEdkJuc0IxdjJmbm45QnNKcWgySE0xSXdJRzkzQ0R5eFp2cmVkb3RNVVRjWjZDU2Q0ZzRTWkZPdkRlZlFJZUhCbzVFbFRwdlhGTU5pdU5vMVVjL3I3cnpqMWxMdjNESjhZQi9TZ05JejI3V2g5NlFQUllqWkdqNEtqZG5ySDk2TFI2ZDV1eGN1ZVUxNys3T1BPamtyS1dZQTdsQUc4KzU3bG00ZUdFUkJ6ZE1xWkozeTJVQ01wLzlxQytkZk1QUTJvZDhhc3Z1eWo2NFFBZkdudDVxODh1TEV2QmhGVVFSaGtnRTA4YThVeTJIMDc5bno0Z1JWQWQwU1VTM1VTOE9qUEdGbG5oZ3haUDIrOFZTVGtkZmloMFFWMjB0UU5xU2Fld3pPQ0pESUR5ZUdxK3NqUzFlNGlJR0VjYVJWSklybGs1NTdQcjlsUUJEcnIwSjdITVJKUGdPZ3dPT3RPaE82M2x5SHNkSWZ5YWYxeGQ2ZTZhTXJVbEtxK0dCNytjam9FdWJ4YnNPNTgvVmF0VzhFb2gxRmVVeW1OL3lVQTJZdm1wUGlDTitpQWdrOVlDV2tNcEp3QXc1MWJkdDYyZG0wUlk1SHBkSU5OdE8xSThKYnI5UDd5clplZUIyQWMvWU1rTUpUU08rNWJBdG5EejMwNTNSSDZBeit3K0lHMVE4T2pLOE42a3B3ZWJiUlVKL3R5SndYN3h2cHQzOW15RFRBUVkzTG5HVkFQWGZpSEZROXVHaG9xTFp5TXEzcmNLVlB1MnJGOVo5dXZQWDMyNzV3ei8ydWJ0LzM3NWwzUFBIWGFpVmhRUWdSVEFQS21sZW5mUDhuU095RVdDc255Uk5lYlRrL3Q0b2t2Q21kZlJSMUlHMDM4TkJJb0dDSDQzOSszZE1kdzZ2ZVlDM1ZDaG1PaStTaktVdkxYbkwvd3dsT21ZaHo0R0FKZytOZ0RhKzdjdkwwWlRzQ09Cb0gwQnNxMWc2MTMzYjJ5TG9IWUFad3RlbkpvVm9vamp2ZmZ0N3grcHNaeENnckVtcjM3UHJWc2JaOUZPd2xUbWQzenZQN2kxOCtZdTdYZHVYdjM3dS92M0NYbkMrZk9uTnZYbE5MRFA5UXk0QXdDMHUzdnJ2YXNVZEVvY3dpcVFKZ1hFNzFXbXpxenVPNTF0Zm5abjRDWWNIYVVRSllIaHErdDMvekZCemYzUnpxWlBaZXlJS3RzWXNhajdXblI5RWszWDNJT0JKZFo3V1FmVTdZTXQ5NTkvN0lRQTVuZGppTUtQY3dTSWdBVjFRemxaMWF0ZWNXaU9aZk5uQ0ZVVkJSb0o3clE5R2dYWmpSQy9vOE4yNzYzZWV0VFRqOTF6UFNqUkJJZlg3cDZVMnRvSUFhY0JCZ2lZWkllTjJQS3ZFbmxxcjNETXAwM2VmTDBzb1E3K1hDUGFTTWNIaER5MHU5Mjd2eTNXRTZSQjBlR1NXTG14QTRWVHlQbE0yNjIyV2QzSXdWbE1CeGZZZ2JCckoxMXl6MFB0S3RNUTBhT0NuQW0wMFJSRVNuamR5KzU0TFJHWDVjMGVCeFAvTHZ1WDdGODkyQmdJQm55dzFVUmsyVTRvQ1o4dzhqUUxZdVhReUNpSURlb3g1SjZ4SG9GY0ZlNytvY0hWby9uNlNINTRMN1dKMWF2SzhtNk5uL2lMYUVCY3NsUGJaUlBtalg5NmhuVHB4ZWxrSng4K0Y5SElUQ2dhcmUrOUY0ZjJXdUtZQ1dUcXdRUU1SRkxXN1hDNmVjVXozeWxBMUErT0tDZXNCS1NBUGo1VlJ1L3RXbHpmekRLNm55Y3VqaTFzYlJDRkNpNXhLR3EvWXc1MDMvOTdEa1FBRGNUamdqVzZ4eUowRlh2eGR2M2ZXTFp5bVlNbE9zb2RVUUlYdCtkaVNZbXo1MmNScE40UjhNeFNZWkFJUnNHWXVOekt6ZDhaOU8yT3IwZkh2SkF5WkRMYlBUZmRZeVhBRXB1Z3VnY1QzK3lUUFdNOFRvYTBiRS8vN0NYVTg1UW02RHhETUFTU2FRdVVhVzVtRUd2RTFROFd0ckpxYWpRVjlnWDFtejZ6KzA3UnNQUVhLY1o2cE8wdmhBcDFkOS8yNHJWcS9jTUI0dVU0U2hvWXM4bTBXcmFGWXB1U1hEUlhlUHlRd0pJTTVLUVlaUkppUXJrT0ZDVEQybkF2UXZSbzJjZy9maDJ2K2M3YkV4eHF3Q2p6S1JBMDVpZkwyVUtnTU9UVXVPYTE0WVpaNWhRbDNEMzEvT09vMWpQd2FyNmYvZmVaMjRXNjRvRkR3UnNZejlpYmc2bjVONFg3YzJYbmorcEtDVmtXdEJSUHNVRXdVVVlEY0M3Rmk5ZE56UThOUTdJS3NtTmg4KzJDREpudDBNL3lSZE1tbFFHck56ZGlTRWx5R1E4c283VnpjVEFnSDBwL2IvN2xqeHQ5Z3pTNEtBZHBYQllaYll5RXR4TUlmbXhVNDQ1WkhNaUk0cUZCVVFlRzdQaUpLWEVES2xTQjFVWS8wSHBVaU1iTXdIWi91RjNZeGFjR0RLRTRKYUM1MndSbVNtS1NiUWoxSmhPU1JhMHF6MXk2NUsxVno1dGhuZnJxL1hXMVNlbWlUUTNHTGFQdEQrNmJIV1RLT1RKR0E0OTJlcUZMNXl1TEhNcFZKNmJ1VWdRa1dHVWo2OXdpd1BZZ2E3ZUh1Lzg1enFYUzlxb0t4MDRzbWY0eSs4QkVsQ3FXL2VwTWM4WTgrSUlDeG13aEZ6RkJaZUZaNzRFKzUrMWd3Nlk0MEhNZkd6cDJudDI3cDFzUmNYRSt0U2VRSUxJM1N3cTdQSHFwUXZudmVETU15UjUzVkRmemFzZmNtUDVBSHFOMzk2OC9WOVdycDFtZllMb3lJRkhwbE9kZ0RKUlZMa3pxMng4OEZsUG5oejAvQy8reDk2UlVESjcwTEVwRlB0QytlMTFXLzUxOWZvWExUd1RwcU1HcVBNbU4zNWw0V21TQmJDYktEN21xVU5CbGpQOWh4dDI3ZWxVWXp3ZXpBQXMyNnhHMzVXbnpRNW00d2QyU1FCOVJuOEVKRUlhTzAwVzZrSVhnT1NUaXVhY1V3YnUzVG5ZREVod28vRUlZZ1RXN2gvUURNWG4xbXg2dzhWN0xqeGxxZ3VrZDF0ZVNNcmhsb2tBL1BPS3RTdjJERStLMW5WR1JzdVlvNnJUclFTUmtvSXJuVGw1MHBhaE5rQ0R5VWZwM0IvQjdQSkJLOWI5cWZxUGoyck5ZalZERUdBWkU0SElpRmxrQnFPSHhyVy96ZWJrbzJlN0pucVo2L2NPdnYvK0ZTU0VUTVdKWm1tTk1TdTFuS2MwaS85eTZRVVloUWl6MXJlalpDK1Z4UUFDdU9XbnkvWlduVW1OVWxJUW90UEVmT2daa0ptS1hIandWc0t2WG5EbVZUT25Bdml0OCtiLzVWM0xKc2RpVEJMK0V0Z0xmOGM5cTU0Nzk3U0JzbkVrUTQ3RHJ6NTk1dFdubnpiUnlBV3dwLy9yMTdhMzJ1VXhrN3JtU01GUzVSZlBtUFRSWjE4ZGp1TkFsMXdrUVkxdFJweWdraXhtTDZjMzR4OWRkZkdOWC8rQkp5aWF1WTZNcVNna0F4RkxhUHZ3NEVlWHJ2MnJxeStsU1hCekV3a3gwNE04a0h0YW5VOHNYUmRaWlRaTjBlQTY5SkFWQ0hpV3pHdzQrUlhUcC8zeVdRdisrcTcvSkdNbVJVZ0tqM3htVEYyYlR0SzNyS20rK2hGR1FxV1FnVENocTNIU0hPd01oNHVmSHAvNHdvY2lYSnF3MC95QlpROHUzN3VuYWN3QmRFMzBxSEk1RURxcGMrTzVDeStkTmExMklBSFY1K3VSTlFHQmRjSGdNNnNmL09hR2pYMUZBMEp3T2l5YjVTTXc3RUdVV1pXcmVaT2FOMTl5VHYyWHIxMTAvcUlwMDFMbFk4S3NrdVVCSysvY3Z2MFR5OWJoYUgxVUJrSUdaVWp1MmNjVHA3a2tRcDdHa2F3TENNR2RZTVg5NURvVENndlQ2SEV1MkRnZUdMa3htQlNWaHp5L2NON3NhK2VkTnV4VjlEb2lPdktDTGNpaDdNWkd3TCt1V3Z2QW5yMEVxWkRyUVVDUXEyNkw0YitzWG52M3JsMUZqRVVkNytYRER3VUJZQ1FsUjVCdXVtamh3c2xsU3lHRHdSVXp3aU9OaGRnUHN1djZuZTJ2ZkFBN05xZ29yRjdQQ2Rhc1RKREFSck44M3VzVnk0ZXlXRGFPYzZIR2tHVUFLM2NQZlh6SnFtYUlwSmtIMmRoa2F2V2dOTzYvUmFBdFAydnF0RGRjc3FqN3I2d0x1dDJ0TzhyQ0dQWjJxcmZkdDdRakZURHpJSnJCa0dWSHZrWEJsVnJ1djNYK1dlZE1udVRLZ3A4NXBlL1ZGOHhydThjY3VzWlFOWlRvY0YrU1lIQ0QvTjBQTE44eTBxcHZUcU01aDFHZG9CZ0FXamU4UHZiTGEvQS9XRHRZWTZYUVdDTks4a0hSS01mL0VxTFlmVmpHRXliUXVxRmpDcGxPZ3I5enlRWDlJVGdzMjFFNkJFVFdXR3dIWW15czJ6ZjA4V1ZyOXh1MTJ1ZU1GR203TzUzM1A3QWFocWhDN2d3T096ekdKTVVFQTFvNVhUSno2aXZQWFREb3pveEFjOUx0a1ordFhqZlNRRWlBVlN2dlRqLzRGNVVOcVJCaHdqaE1qZ1JrQ2lKa29xc3pYRjcrSEx2MEdnaDhpRXE0amNzNmV6ZFA5Zlo3Rm04ZWFRV3p1a2VGNE5qcG1OcXNkOU5tY2tJNXZlSGlSYk1IK3VyZVhCNGNVZk9vVHJyOTQ3SzFkMjNlMWJSQ3lIWFpRS2pKTTQ1STN3VWt6NHVtVGI3cC9FV29SOUdBQUY1N3pzS0xaMDBiOWlvRjd4S3dkaWVaSGdZUVp4WFNRQ2lXNzloOTYrSlZCK3hRRnd2dGRjalBybXFNeDQrdzBkUGNSaE5CeHo0NzY0UFlvT1BweERtd21CaFhoWk4xSmdWR0VlNGoyWjkwMnZSZlh6aC9YNjZNM2ZEdnNBVjJFTFUrQ1gyeC9QVHlWUnYyRHJPN3pOUm9HODBYVjI5ZXNtMTNYekJCTWtQWHRUM01GTklMZDBEazZ5ODhOMWhvZFZ4d3lwMzhXZFJvNmFoN3lhTjdsYjU0QzRjR2FXWG94ckxqZWRwQnB1QjBTdFptVmRuazZlSDViNmw5aFB3UTZqWjJqbFhxYXNJUE4yKy9iZldHUnJDSlBoYVM2blFUcUhieXEwNmQ4WnZuenEwZHBqR0ROQU0yRFhYZXQzaUZtY0hHZ1dxVGR6SnVQUC9jMHdkS3diMzJkWVNaL2MzWFhYQzJBTXVlQ1RBSkx0a1JBSEhVNmNzaU5EKzhlTlhLd2IxMXJvaGRqWDJzVmU0RndLamFYd2FTWndBM1hMUmdaaU8yUEFjZjA1QmkzYjdXUjVldjZYNVVQV2FCckR4L2NPbXFjZVRMQ2RkUVZWMTkyb3hmV1ZnL0VrNXlQelpiajNDM1p0ZldPUUhkOVkxMDE1ZFZOaWVtdzZURGtwR29vQ0tsamozaCt1S3N5MVRmMmtNc2lJMnRRd2FqUzNyM1Bjc0hXNTFvRTFaQ013TmNjSmRpd0ZzdnV2Q1VSaVBKeDlkZ3F2ZmZ2K3lCUFh2N3pTRGxzY0txVnRMbE02YTljdEdDV3FVTUlpMFRRbjdsT1FzdW0zVktLOU1VaVdBNGluZEJnUXJPSEFJM2pBeS85OTRWOVRFeXlwWHcySVBQV0oyQjZMb0VKSUFubkRyclJXZlBxOUxZZUpBQVdnaWZYUG5nK24yRG9ZNlpCQUQvdG1ianZWdDN4R2hqUG1CeU5tTjh3OFhuVEM1aTdhRTZjYUFBOThqR2hLSWdHYzNUeU1qdHQyUVlKNFl5RitnbVJybXB5TzdobERuTjU3KyttekU4MGgwZnR5WHNOc1I4OWNHdC83WitVN014Y1lRTktia2pHOW51NU9mTW5ma3I1OHdSUEFpeXNiVnc4ZTdoVzVldjZMUG9Kb3JSeHlpVWdmbDFGNTAxdlZGMjc1ZlpuWllsUjM4UjNuengrWW1Kb2p1RkExV2ZnOTB6aUlGR3BUTG9uMWV1LzlIV0hTUno3Ym41WTVkM1NvZW8zQnN2V2pTcnY1Rjl6SjRZTmdPVzc5NXoyNW9OWFcvTzJNcnBRdytzSGxacWpMMWFhdWQwOVp4Wkwxb3dyMmJXODdvd3lQMlY1MGRVQ2VzR0hnR2RiMzdDVjkxVlJFNFlvaTFrSm9xWkxGcDd5MnRlYmFlZUphRnVRbjhvdkxzZEpZK0MvZkVTUUpBYVNYcjd2VXM4VmNjQndDVUVnOUZ5OXNuTnhoOWNmaW5xNldrMDdKOE5kY1FGN1BlVjNuSFBzaDM3UmtxakZKeDEzL0JoRDA4WFdFS283ZmxKTTJlK2ZORkMxZVEvcEZDZnExMHN6Z3ZuejNuTzdEbDdOUngwOVB5OUNGSEtKSXdoN2hwcHYvdStwVFZXTmh0cGp6VkV0MVIzL0lHRXU2cVVBVGwwL3JRcHJ6NzM3RmIyVWR6UDBiMEFKK0JzQnZ2NDRqVzdXKzBhQXZLTjlkdCtzR0ZyZjFFa0hzNnpNS3BVMmgvcEZDSDgza1VYY2ZRQnJYS3E4MkF1QVhiU3ZkRkRVd0wxQWFBZDY5UFgzd2NXVW5FY2lod1FuZlMwRi9NdWk4OTRSUVpVZDUzcUlVc0pkbVJ5cDA2R3VrYlQ3N0IvWGZuZzl6WnRheFRoT0U0bWdYQzZOSlQwRzR2bVB1SFU2UmlGUlJuQ2tmNkdvTkVHTG41M3c1YlByVnhUeElZZmtuSTQxTmZOSXVBbVp6Ymc1a3ZQYVFUTE5SQlZJbWlvMnlrQnFLK3czNzc0bkg0V0ZTdktISDdFS1dEc1F2QVlaWTFZZkhiMXhtOXYzQXJnWkhRQS9NeWxtOEJsOStETjh2MkZtVmRmc0dEQnBNa2p5cFRMeERxWmRlaHltVndNQmJsc3orQW5WcXl0Ly9KRFM1YW5tbnpwQ09qdEtLck5JY0kwVktYckZzeStadDRNalA2cUEwRnlDaFJsUE9uWVhibHE3TEI4TkFUdGZPTUR2bWtWeWtLY0dCdEkvY3pSa2FtUVVWN3o4bkRLYVFHd2JoN2RPTTdFREVjL2l1d0NHUGUycTF2dVc2S1FnMEthT0ptdnFHd3UxNW1UKzk5eTRmbGp4eWdRUWFOMWN2NzcrNWJ0VFZWODZIcFhuVE1LV1U2TVZQYXNPYk5mZU1aY1FFYldKVWNlbnNUWDlmTm5QK3VNdWUwY0NDZnQyS3RzVk1yNm0zdVdKYStOOW1NdUp1U2hxMFNPanNiU3VWTW12ZXI4TTVWQUdEeklVajNyNExEMXo4dzBVdllQeXg4Y1NkVzNOMno3N3FidFpSUjF0RlNXMWZYSGFFREthV3BmZk9NRjV3VFE0V0RkaTJ4T2dDVDVDSXhxRnAwMDBMc2dOQktyNzA3Zi9yVEZTY0VGVHN3U0V6UW42TlpPY2VHVjlzemZIRzljZnFSWGE2eWhoNTdwQUQ2OGRNVTlPNFpLUmdQaXhOY2tpT1pzVjdyNW9uUFBtanBwek45M3NONlAyOWR1K3ZxRFd3WkNjZXl6SndVbEE3Sk5hWVEzWGJhd1VZWWE5RlQza3g2aE5nVDRKMWVjTjZYc29pQ1A3VjhTYXNiaSsrdDNmbnJWNmhyZjlWaU1DVWRwTzFsbjU1MmpzY2hyeno5NzRaVCt0bUJVc3RxNVA5UVNna1UyU3MwWTd0dTI2NTlXYlB6b2lwV0RLUVdMTmJqa01BZE1xa24wbEVMdUpMdCszbWxQblhPcUsxUGRsdnZSTWthWEMvWmtIM3FFbWROaDZqWWlhT1FyNzhwN3RubHBnS2c0d1F0UUp0MHp6ZVB6WHgvSy9uRStMdkZJYlhhUmtPZ0JZZTNndmx1WHJvNEdzeUo3T2c1VDRGQW5wOHRPbS9YS1JXZU82M0VRU0E1MTB0dnVYWjZvQm84VkhCTm1HVzZKN3FlRVNmKzVkZTlkVy9ZU3FLTkh5KzZCaDg3RFlJUzFMTTNxNjk4d09CaVIvWmpKWG5WWE5yLzd2aFhYblhubTFETGlzYWlFRkVoektYa0dHazZ2ZVFwUDYydmVjT21pUC92K1Q4b2Nvd1hua2U1QXlKYUlvRkExd2IrNjg1N0IzSjRTek90OG5uU1lDeSthWllvcFo1L2NWN3psa292Mmh3Qk9JMURscW02ZXFNTkpsNS9VM0l6RGpRUXBXQVowenpmeWo3OGF5Z0c0cFZDWlI5TUVTUmtoVldwYytyUjQxZk1URUhsY1N0aHRIM0dLZ2VDSGxpeGJ1bWR3V2hIbERnb0tFL0lRYXF3SlliOXowVm1uOXZWSmZ1eWM3LzZvNytQTDE5eTFkV3N6TklSaisrVjFYaVo2eU5zN1EvL3JKL2QxZjErQ2diNi9HK2pnckE4TmFFYlFndGNvNTJPN2E4eDlNZng0eTY2UExGdjl1eGVmK3hoTmpYWVpUK282SVFVb0p6S0Nyejc3ekg5ZXV2YStIYnY3Q0hicnFBZnZyNU9nVTI2azdlaTBDQWFVUkFzd1dSUVA4ZWtJejVRWWhqdjUxZWZQdjNUbTFLN0Y2ekpDSWJ0b2hGTjAwRTYyNDJFeXIzSGtNS1RPeU8yM0tDY3I2Mzd1Q0NTTXAwQi9pTituWEJaOHdldGhwY0hIQngwOHdoMTFndTR3R2JoazUrREhIbGczcVNpN3RCSUs0M0hIZ2dDNjB5a0dzSlBTTmJObnYzVFJYSFVwV3c3MVQrRHlHaENRYW1nY2lTMURJKys0ZjFsQnhuRTBBamk3K1ZlQWZSYWFzV2pHMkY4VWZWWTBZOUdNb1Juai9sZGZqUDFGNkF1UmRRSm1MT2FqbXF1UE9SZkJQcko0K2ZyQm9mMHBOZS95dWovYVI5YklheUlua1hSWVJBMGlOSXMwUWRNYmpkZGRzTERyVlpyeHFKV05MaVVYQTBOZ2NEcFIxTGpUdzZJcUFtVE1TV2RNYXQ1MC9zTDZXQXpzV3I3Nks4enJaaHFEdzA2eVB5cUNZcFlCeU4rOUxTLy9NWXBHblV5dlNiMlBmVVNMY2tLcXlSY3pvTndlS2E1NmZuSEIwelVSOWJVanpnWlJYV0RXMis5YnZHbWtIVWJENi9HRXlZSXFFMlJCbGtKcW9Xb1U4ZmV2T0orSXpLRHpzRytzajFIV2JMN3FkcHU5Njc1VkszWVBGb0ZWR0NkbVFuWFZyMXVyRUE2MDIvS295UndkVW8wNlp0bUhjREEyUTF5eVorK0hIMWk1LzlFMTFia2FlMHhZd2RvRk9iRFlvOGc4QW5ycHVXZGVPV3ZhaUxJZnhTc1p6YXZXZ1Z5M0ZVMEhGNWtPL2JLUXpkdGV2ZlNjQlJkTm53WjNFZ2Mvcmw3M05VR1BERmFtenZnR1FuczJ0ci95Z1JvUGpBUG1hNngyUWRGY3NtakttZVpPbTN4SzQ5cWJ1cmZTcFI2ZnVCSVNVQ0NBNzIzZTl2bVZHL3JpeEVvbEJoTzhKb29KV2Fsakx6MTc3bFBueklDVWo5NmVWN3N6bWRiRlF0K3pZOWMvcmxqYmI0VVlnOXgrcGduSkFFQk1RUTRmWUhucjB0WEw5dXhEVFpSbG1EQ28vdWMwUDlvTkFsdzZzam92WUZLTWI3N3MvQ0N2cTBFUDg5dXFxak4vNnBTYkwxd0lLQjl4Z2xVNTE1RUVEVHo1Nnh2a01CZVEvdjFqMWNZbFZneE1NS05GZzdIdVYzYUU5dDd3MUpkZzRSVUNyTzZGSkk5SENUTkpTUEszMy8zQXp1VGxSQWZ0MWpCK1pFZnFJSjQ2VVB6dUplZU4yaVR4YUtkanR4RmFYamVHdnUvZVZSdUc5OFFnSm5ienBEODdjVEFIaHF3Z1JkT1c0Zlk3N2w3YWJYTVIvYkdBb05IK3lVMHVaRDhTeDBjQXZ6eC83dE5teng3TzFjUGVEbFhDcTg2ZFAzL3laSmVDanNabWd2MklaWno4RWdWQXl4dVhqZnpISjJNTUU5OU9TOHlBVE9aZWFlWVo1WE51QkdBTytWR0NyM0c3bzFCZEh2amF4aTM5TVdxQ01RK3BYSS9rSnFzcXZmYkNoWXRPbVNwbEoweW1vNnhxN2M3VVhTdjI3WTNiYjF1MWFuSXNTS2JTandxcGVZVHRSSERCUE5NSWE0Ync2YlhyN3RpOERYWCtHUFpvTHh6cUFFRTJIaUpBRnFEUzdJMFhuaE9pUGN4Y1pjcDUwZFNCR3k4OEd3YzgyQ01kbzlITzM1UHZrZGFwZ1h6N3U3aHJDME01MFVRUWtXdnZqMExPcWJqbXQyeldtYXg3bDd0TklPT0tWcXdtR0hCMXlZWUpEcVY4eS8xTFd5bVhEdE1FU2VNa0U0VFFxblRoakdtdk8rK2NBeUdHRVR5Y0JOcjNHMGtHRjk1NXorSkJGeEhvRnZ3QSs4dGhzWFEzb0picllhdW82TkFvUWJVZUlvSUVRU2FpTUE0UHAzZmN0enhKOVlTVFI3c2h0TkdNZUUxTGM1UitSeUxMSVZ3Ny8vUnI1ODRlcVRwMVgweTNwai9tR1UxbjdWNkNKRnRWdXZuaUMwN3RhM2pkb2NralhROFlSR01YVDM3aVErNzk3T28xS0I5NXlYYzdQL3FjbFVWV21TZXNoQ0taWkVqN3lqTVd4V2Y4Qm12bXNHNm1hYndYYndRZFhsTm5aeERBcDFlcys4SEdiWk10Vk1FblNocVhUWVFSU2VSYkxsbDQra0JmblcwekhCcUE0K0FFUU5mNS84enF0Vi9mdUhYQWl0Rk15MUdZMGlrNEpjdFVxaU16ZHFzVXgva0tUamU1dVpCNE5ENFhFWlJSTmNNK1l4bSt1bmJEbDlldUh6WDhqL2FBRU4wYWpnVDM1SDQwajYwR3VmQk5seXdhS0l2a2lSVGczV0xnV0tiV3FRd0lhYWhxUCs3MFUxKzJjRzVka09EUnlIYmFLWGR6Y1hYb2NxS2pFZFdEbk9oUzNXUGpyZHYvSHUwa0t4U3pUWFEzVlJOd1NMSjQ3ZXZDMU5PN0dqVnVHemhxQ2V0K1EyYUlnZHpkN3R4eTMzS3hERWJXaG1KQ0o2dUNRMFBabjNiYWpGY3NXamltcWFEcVJrcmIxK25jY3ZmeXpsaUZsVlFmR2hCVXdvS1ExVTJJSHVjcm0wSEo2M1lleitObzNzR0k4MTMzcnVwNE1qN3E4ekt1MFRvQzZUZzhKcXdyTWRiRk1PbWEyYWRkTjI5T08zc21yWWJtanRYWFpqblVDcFhOSSt5MUY1dzF2VmtqZ1dYT0kwTW0xV1dqR2pUT0V3OFRGSlRyWEx3VFFQcnV2NmJGUDBScEJvWGtlWUp0ZWs0U3BqUnNDeDlYUE9YWGovdXFJcFFGTTlSVmVONjZaTlg5dS9iMEZaWWRBTzBoU1NjZXl2dUFqREhhNzE5NVFTQ1AwY2g0VUVSSUF2L3d3SnFmYk4welVBU05vUU1Xc2dQV0FvZmF3M0ErVEVWSVpKbmxacE5qZzlHcE1VaWxLZXVQK1k3Tk96NjVZdTJyRjUxZHMzUSsybFhSTURySGg0Zmo0ekU2MHJBK3B0NTA2ZGxmZVhCVFd3QkU4d3dlT3l5V1pZTUp1ZE1KVjUwMjdUY1h6YSt0YTJZT0NqcGlEck4wd05jOWlOUGdCRnArTjNWNWd2TGU3YTJ2dmNkeTVjV2tHaThkZkdKQU9ZTHdsR0pvWHZjR0ZrMkgyM0U5RExGT3A5WlI1S3E5Z3g5YXNpcENFZTRNTmxyOG1jQkpZeGpzdEYreGFNRno1cHdPT1RUR1ZkVTluQnVHaGo2MFpJVUZKc3ZobUZFb2xWTkFyakJyc3YyUDh5NU5YUkRQd3duTkhTZzZxZlB4VldzMkRlWTRGc0lobTRLUXFIZmZzL3o2K2ZPbU44cEhlV1pHKzd1THhLTUJsc1ZSR21JSWVQeXNtYit4Y041N2x5NHJ5NzVNeFl4ajR4M2NrS0hDQmVrTmw1emJOSU5nOVhlWk93NGZFRk1URHJGKzUwbXdoRkE5dHNvQjgyOStnbXZ1OHI1VHJPWnlOcG43aEFxL2dxTWFhbHh4ZmZINDZ4dzQ3c3VOeHBDN2JJUDg0UDByVncwT0RSUkJidDBkTVIvckthY2dHL1Vpa3VmVEJpYjk3a1VYZ2k3cG9hZUdhelRlTWdBZnVIL2Q0ajJEVTJJeEpqdVJhSFR2ZVBYbUN5LzZuYnI0Y1lLazJRaC9mc2Q5d1l5SFVGOGZ2cklCV1NpYVFmZnUybmZyQXl0Ly85SUx1c1NaM1dubWo3Wk9DNEtzaS9SU0Z6dDZ0TTBpVkFOS3lSc3VYdmo1OWVzM3Q2dUJISzJlajNjTUcrczBjU2luYStiTnVYN2VHUUJxUGltVGlUTDVZVHc5VlpXNjh4RFk5WlpQc010UHlBbUwyclN5K3ZkYmN6RzVwdE0ycGd6VytOV3hQcUdtbEF6ZFhzekdsUGo4RzBRelQ2cUxtOGZoaWRUWVRnTDM3OWo5OFJVcm16R09adDdyMEhoTU8xTlhKSE9XQ0kxVTZSWG56TC8wMUtuUTBVanQwUzBCdVFEbE91dXpkTWVlV3g5WU9wbEZzckZoRWxRZXlicGd4aWt2UCtkTW5JZ3NkdDNPRGVDM0ZwMXovdlJKN1p6cGRjVGdHcDMxZDFnUVJkS1JJKzBqUzFhdEdkekhyZ1oyNFhlUHNzVE1nYkh4YmtKMUJFOC9SOFVRNmhMeUpUTk9lZEZaQ3p4TGxzZk0yOG1VZ0RLV04xOXdkbjhNZFVCaFhmNXBIZ2tremdESk9pcWdUa2I2bVRVSmUrZXJIODY3MTRkUTFCVUZJUnpKem41MDB5RWY3U2x3YncrR3gvMVNQTytwaElQSEg1V1k2bkcxNE4vZHYyelhTQ29tcU1rR3A5TVZJdGhLK2J6cFU5NTQ4ZG4xZXBKSGdkNnBUdmVRUXFoMzhQL2R0MnhMZXlTWVJ4K2J1ZDBoSXIvcG9uTm05ZldweS96MThNSWgxY2t5bjk0b2Z2dmljK1FCMW1XOGd3dU1SNFpQTG9oc2hHcjVudUgzMzc5cU5MS3RoM3MvYWxNMTNOOVBPTlpUQ0x6cGtuUG05WlVkSDlmRWxaYjdjK2VjZXYyQ003cDBCMk9kQ2wzekRKNk1BbERYKzE3MlEzMzNVMTcyT2ZKRWw4bGhVTWhXS2J0Tk96Mis0Q1lBQ1hMeXVQTVRSZ0xrOXpadStlS3FkYVUxSm01SnVwNmJTNDU0MDBYejUwNGFjT1V1aFBESVRkSUI4Q2JKNzI3WS9QblY2NXNoWm9ZYXhEZkdqbVpjT1hQNmI1NDdyMDVPblFpWXZYeDBBTnBMenBwLzVXblQ5aVkzQk5UZ0FoMUpRVzFPRDI1Z0hDamlQenl3OXQ3ZHV3ZzYzZHdlaFNVTEg2M0lkWlBPNDNpT3RXRHl3Q3ZQWDlpdWt2bFl2VjF1L2VadnZPeThjWG90NmhLVmROSHg0MnRDbU5CUlF3T0diNytsNmd4RlJHSmlxRXdLWUs3blZxcHFsMC82OVdMZUpUWGdWWFVxK2JnZVNLUGtycisvWjhsZ2xWbjRoQjBxR1pSbEdsWjExYWxUYmpyLy9Ib1ljcWFCRHpWWnJBWmZxcFBUMis5N1lHK25VekRVQXpiR0hFVm13TzljZkg0WmlucmNVWDc0RDMyM2p4d1FwalhLTjE1MFZyL1JIVFhud1pGSzVVQ1FaNG9lWU5YMnpzZ3RQMTBGeUNRWkgzV1dVQWRCVnh4SVk5b3FxUjYrOFZ2bm4zM3U5UDRSSDJNMjJONWNYWC8yR1UrZlBST0N5Y1k4Wkd2c2FGM3Ixa2s0MGh5b2Z2UjUzZmM5TmtvQnhNU21pTktTa3hSalJaNDZ1M2plamZVQkZvUkFyK2VLSFY5MjJtNWJ2ZTVMNjdhVURKNXlraWZYaEY0VmxSS2FDbjl3MlRuTllKVmdOWW10Qno4U1VVR05taS83ek9vTnQ2L2QxSWpCTXpyTW5qMWxIdU9MOW5iU004NDQ5Ym9GcDJPMCt6bzhiSVN2eERwNHpSQ2dYei83ckNlZU5tc2tWVW1aaWUwalZxTlNUcGtWcXJaYzJmcUF6NnhhLy9YMTI4Z2crTEhCaDltVmZEekw2OGs5bjZCQ2RaWXE5M1RnZGRqdGpINmpWR1dsN0dNK0x4WWtwVE1uOWIvbTNMUGQwekZ1cEpWOFJxTjgwNFhuQTB6MUNUdVdWbFU1SjFmbFhoMzlnZys2a2VPS3dHMW9kL3JTdTVEYk5VWmtvdUdNWlBSQWVlVWp4WE4rRzlQblFxb24za2tBMHZFOWpwUzBjV2hvYnp2VmJFaWFZS2ExcG9jM29ReGh6cVQrOGtDNVV3ZXhkQi9xL3doMTdtZjE0TDZkSTUxUTQ3OTRXUC9uVVNSSlovUTM1d3owSGZ3Rko4TDJIT2pFQWJCeHVMVjFlTWhaczBrZjNxekVic09PMXd6eWdLZWN6NWcwYWZaQVgvZVNqc0RaMWU2ZUU4dDM3UmxLK2RodHpRYTVYTURVUmpsLzh1VDRzTy91d2NHaEhhMlIra3NKK09FcCtPNlpLTUhJTTZkTW5uWk05b0FEcUU2eWxmS3lYYnNUSDNKR2lndVRnczZiZm9wcU5NQTQ3bVgxNEw0OTdRNFA4MDRQV1g5M1F2SSt4dmxUSmc4VVlRdzdMNWxRRTF6Q0xIM3hBNjFQL1RlV1U4anNDamJCQ2x4M3BFRjdiemp6a3NZZi9sT2NQT3VRWlRuZXNpYmxmcUxTd0YzWCtKaWZwb08xL09mUWQ5TnhKY1ZIYVRtTzZyNGRJUDdqY1h6c3cxd2xuWlNGZnVqN1Blb3gzWjN6YzhLcHNzYXhXZklNa3JCTVlNZUd6bCsrcU5xMUlWaGZDaDVrRTk1dE9TQlByYjVYL1kwOTY1VldiKzdEbG9Qb3hvNHZxdFNCTnhKak44cDJCd1oxcWM4eWZzNlMraUljcnZHeWcrK25pQVFPS2l3ZWxna1lYUnFoQmxHT3Nad0hxRDc5QkRYVUNRL1pjOVVkZERQdXJkZWhQdFE0TXkxSHZIZGkzM1JVWlJEazQ0R3Vrb0E3WlVENjhnZGEyeCswMEkrUWdvYzZJekpCbXhVOHRlSzVWNGVudlpRNFlieGZjZjhua2NleFZJZWNiT002ZFhWUTlhZnJtRTBVdW40U0RXaVhWZUFnOTJLTXl6dVlDL1dvNTZKM2gxK1B6Z0llODM2N205dE44dkJoM3hDNkxyVzZsU0VkNVl6b1VtNk8vWVU4eU1QR0VUOGZmYlBJN3ZqYitsdklDYXJlMGVpRDZ5U1l4bXhVNk02SU16Q3Z2SGZrams4V2NRQklIWVhDY3JlVmNrS216Qk5pVVY1M3N4V2xrRFhCY1lVUHJZUTRZUldaY1YzUTZMWkxCMzc4dWJLRWg5N0pHS1pJNGhoM2J0MG5lMVJEeDdTRVBMaC9peWRrVTBZRFhoM2xkdFRkQ1k3dkZGVlhtY2U3NlJPY1hYM0F0dkNZV21vVE9JK05sb0hxUysvaTNwMW85bWRqb2NqY2tVWFJKN1RDT2JVYlYxeG5WejZ2Njg2ZElJTVE5N1BkZDRPNlJ5cE9HLzgrUHBMQ0NSNHNCeS9Yc1I4MWN2d1A3VW01TVQ0VUpKQVR4U3p6dUM5NUhOcDRndGVuUnZqclA3L1krZWxYaTNKU1JnZ3VJY01LamN2WmR5aUF5S2Jnc0xLL3ZPNW1HeDJ4Uk9TYUF1WGhLcUdEMVUrK2lBMkxHUnVPTUhGLzc3RkhoOHRETWw3anVzR1RaTkpQTEdya1JGM2tjVjhWVCtpM2ozMDdOWDF3VEd6LytIYWtkbW8wZUtCWDBUa2VwWmFFQ2doQkdhMU8rWXlYODd3bmpqNGRnazRNdFVJMHdMLzdtZXE3bjBUL0ZEN3FDZng2MHBQRElzTFF0a3F4R1J0OVZKbzRPMTVCZWdVVVZjYlVXZUc1TjR3NmpJU2ZNS3E5S0lCbHllYUFOL3U0djVXckp6MTU5RXVkQkRRV1ZKRE1FU2RhR0JTenl5S0FYTVZudkRUT3V3aEtRZ1JZajRzNU1URWh1NTBxTUFFSXdPSForZEZmR0oyUzJSM1Z3ZEVzK2hIT3dTajJsalR0eitCM2lTMUg2K0lFYU4zM3FrdGR1WDhjYmczZDN6K1dZUDliZVlEZTVJQmJvZ04xZG8zK2RNRHRPZktYZWVqdGNmU2lpQU41aTRNLzVPREwwRVA0UmtmOTgrQnJQaUpmaDRPdTlqRFB2bnNseHdqS0Ryck9nOWJzMEl2U29WNjFEcXprMk00Y2orNlpIL1luRGxyUEE1ZHgxTHpNNkFYem9EcnhJWjh6dWd1SC9IQ0lLajNFQmZQQW9tbi9EL3NYVXlEQmtFc3hPeXRET0o1YXJWVldDVFBuRjg5K2pRTmdySkhQQWs3VVJHOXpBTWhDRW96SzdNNUtQL0NxR1NlWVJiY2FydUNJckhHVlhXcEZHeVhWcVBHaWRZYWQzcDJxUzhCcW1oYXYzOGFhU004RXN0MWlwOVdkaENWQ0pBeWR0a2IyVWZYdldyY0x0RDRsWUFTRldET3dleGY4Yi9VbmVIZDB1b3ZXL1h4UWlLb0hJNkNtWnRwUE9NV3VYeSt6dW9jTkVFMml3VkIvL1g1cUtvZEc5akVuMGc1ZUhNQ280QWlVWVhSa0RFRXhxZ3Nxck0rMzd2M1dYN04vSGp0bFFIQVFvTXRRTHdPY01LcTdzSWU5dk9iS0p0VTl4VXdZSlVHcitXQW9weG1NTXJGK1M0MTBweEJxMWlXUlVuZDlEcjBkbWt3SXp2cHEzZXRKY1lSbzhxU1JmZktPekxydHQ2b3BMZ1FaNjEwKzdPR3A1OVloMUp1b2J2T2lFMGJxb0YxQVVIM0I5ZktZZDJtM0JJUjZDNXgwSG43Qkd2MGJwMW1Yc0F0ZWIxdzNoK3FWZVRhTVFvVHJSOElKSWlmdDIwdkorWkNubmhDQ1cvWldlTzVOT09VTUU2amtkSWc2Y2FQeW9uWFBEeE9QU3QzdEJOVWVDczk4ZWVQeHY1YjJicW4rOGMvUmJtZWw4cHpIeHhlOFFVSVE5cGQ4U1ljaXpUQzBzL1hoM3k5ZitQdGNlQWxTR3d4d2RCYzVtdlpzYjMzMGp5R1ZUL28xWFA0czlBMEVOOUZyRGpPdmh2T3FuNmJ2M0lhUlFVYUFiaXBjSUpLYlVURGxaQlp6ZHBNamtNNVJyanhIc1BxcUxVbnM4bVJMbE1sZzhycUZLb2NhZytSQVNLWWdCMHJCSVpmQnNsWEJ6UXRZQlVYM2lqUG1OWjc1aXM2UFBvczFpMUdVQjY5T3FNZlBrRFUxcmdlR0xLY0hTcDRJcTh3TENSNUFCa0R3VEJqZ0NzWlVkNWZYV0Q1SzlDRExBTEoxUjBZZE52MkJJRHk0ZFFxUERwQTVrM1d1WFRCemdoa213TFBSd1NqUzNFV1R1d0ZDekV4aGY4MVFSOUJ6eUMyYnd6eG1DNVJrN3NoV2lUUFBMSi81bS9sSHQxZnI3NlkxQlpFNW82Z0g4RGpndEhEbzh5T0M5Q1FTSG9FT0dCa05WYUtpNm9OWDVvVkM4bHhyUnMzOWk1RGRhVTRMRHJjc0JpREU3SDdZaEJrNWFjb3VpODVNMWVNZmFyTmNtSkpvUVM0RXFHWU84UG9zOEU3THpqeS9mUFpyMjUvK0t4dmVLV3VvYmg4NDFNRVVYSjFXbUg5NTQ2a3ZybzA2RWV2c1pUaHhZZHNZclNoVVNLa1ZacHhaUFA4dDRmU0ZBYkExUHgzKzh2dk1talo5WHJqc09kYk40MEtqeWRxdW43RnZwMEE3OTNIeHdxZjRRVlhxN3IvdTJ1eFZ1M250amVVci91SXdFSnZxc3NrVGZzWFB1bVRrL1g4a2dZZ1oyVkt5R0dyb1l6WVpjczV0UXlPWXFycER4VnZNSGNhbW84L1FCaUIzcnlvd1c0M1RMa1EweFpRUWtkcXg4aHdFc1hCVWtjRVNZTXB0aHJJZEdkMm9tS3NXTEpzSEc1Z2VudkRDc096TzdQY0E1VUhydyt4dFM1NUlnd01NbGFtSVFaVzd1YWN5VzJUT2RGcWdsZTZWcXN3d0FIT0VoQ3o0U0lWR0RLSHJOZnB3WWc2Y3pGRzZaQjFXOVBJS3VWT3FTZ2lnd1dJTXpQVDZsSkYzbEZzQmpXUkZVQ2FLN01NaDAyTXpNMUNKeWkycGRNdjFNSlJEZ2F5a0txT2xaTW1kYmFSZzhrUVFSdTlnMnZUNCtCZmtGVC9WZzNlQjJYTUtrbWt2RVZNUUxSYmdZUk9oalZLTzBTcFhUTXlzaG1GOVlNUFlkaS9JeEtyamNPWjJWbUdTQ1ZXWllGSEtsaXJRWEo1QzBRQTlWazRjVmhLdzJvZ1p6VjFCOEt3a2VvNVVteDB2QXRHZ1drcXRJSGRHS0tmZ1JXNGtWZkdVMmVXVGZ5MTk0ZSsxTnloYXRsVFVCdVVnQ1RJWjQvTnV3c0FwUXViSjRST0tZL3ZFWG9XcmY3VTRmV0hOUldEUCtDMzc4UmV3YzJ1MStrZjVRMitoQjZRYzVpMksxNzlGT3plUGZPYXZwUW8wcGc2cXRwQUY2TXNmR0ZsNmh4Y0ZESmFSQW90MlZRTHhpYjlNc1AyTkQrditPMlNHSUpkWnJqajNndkpYM3hvdWV4N091ald0L21sQjJyUlpObk4rWG5VM2E3OHhKVFQ2NDBWWDU3VS9UYTNCd0NKVXdpbW5ZZTZsbmVYZks5cFZEbFJXWTlhQ2ZQcFpJVVJaNWtncnJWdmhlOVlqTkZGNE9lOXlUWnRWc3NqSXBKV2Q0YlQ4UjJhQmM2L2txcnRaRFNJMHN3M0hzeTdOclNIZnNEcnMzSmkrOXY2OGJiWGlJVzNQOUl3NTV4WXpGbHJvVWg0UTFsbDVwKzNkNFFQVEdnc3VVR09nVUhZdjBwYWwyTFJLczg3a1dSZGgxYjNhdGg0d3NWbGMrR1J2N2ZHVjl5cEdSNDduWGwyMjlxWU5TNDFOZFVkbkhnUWQ4QXJUVGkvbW5adUxSdUZSdWVQcjcrUDJyU2diWUNkMjJwZzFuN1BPOUpYM2hFN2JvOFZxeE9aZm9KUnMzV0tWQStiTy9tbHgzZ1ZhZXorcmZVN2kwTkZITHNZcWhhbG44S3lMYVVSdWs5WmdoQlhwZ1IvWTFyWHBheC9JMjFiUVlnalJGbDZhcDU1dXJnS3lmYnZ5bXFYSmh3N0wyZGZQVENib3NJSEpQUDF4V25kUDduaHdPaXNyQm5EUk0xa1VUQzBIZ2pVUnpEY3R0VTBQNHF6SDI3VHBvc05wZzl2eTJ2dFJaUzhhNGRDRVJiZEpsNUJsVnVTTXVUWjNrVVc2V0diNXVzVythMTJZdFNpY2VSRnpLeVIzSzBLVVZRbkxmNkJOcTl1ZmUxY2FhU0ZDVmhXeXpIellQR1pWUTdqZ2ljVVRmMlYveGVOa0ZOTGpXUG1sSEdhZUdaNzdXZ0R0ei85dHZPeTVjY0dsNVJOZm5MLzA5czYyRGJaK2hUR3JJN3Y0cWJqK0xhazFXSDNyWXpGYmppbmt4djd1K2JSdFRWcDlUeWlDU0Zja3ZkTVpRdG5YTFBvQStJUDNWc3QvektKSnBDRFA3cjV4QmVaZldFdytQWVRDNFVvV3o3cTgrYVlQRHIvenQ5T1B2bVROUHM4anpWLytMK1ZUWDdidkw2L252bjFldUtYS1h2d0h6YXQvd3o3MEIrMXZmZEpqZzduRnEzK3Q4Y0xYaHgxYmtCTmlzMnlXN2R2K3B2UE5mN1JHZi9uTGIrVUZUOWFPOVEzQVkrRTdOMWZ2ZVZOb0RwUnYvWERuanMvbWYvcHp5eTU0K2NJLzFzWVZJeC83Z3p6dHZNYXpidlJ0bTlLNnBUaG9icWs4TjUvK2l2ak0zOUxXdFdJQ0E0anFnLzhsNzl3ODZSWC9UUmMvQi90MkFXTHNRM055NjM4K0w3VUdCMTd3VmhUbDhOKzhMRzllMGY5cmZ4cGYrS2IyMjI1eXAzS09weTdvLzkyUCtMNXQ2WC8vaW9aMmV3aDJNTHd4Si9STmJ0N3d0L0hNUy9MSUxucTJ2cWw1Y092STIyNzBYUS9TR2dEN1gvSm40YXJuRDcvM3plbU96eUNXWG8wMG52NGFQdjU1cmZlK09kLzdUVEdFMllzR2J2aXI5dCsvTG0rOFQ3SC9zR2pJa0QyM09HZEI0MlYvWWhZeDZSU0oyTGZUKy9xcXQ5K2c0V0ZjYzBPeFkzTjc1VTk0L1p1YUwvbi90SHNqWVJtcE1mMk16bWR2YVgzMi82QXg3WkRueHhRVUUxQ2tJYzUvVXVNTjcydjk3eGZaaHArcW1JTFVWditVdmhmOUYrdWJ4TVlVN3gvUTdzM3NtNGJQdjhNM2ZiVHhpaiszMDgvQjRFNEhySCtLYjE4ei9NRzNjc05LRkkzRDBsVFpZSm4wS2srZDBYL1RYNGZaRjlqd1lHVUlmVk8wZC92SS8vb2xuSE5sOGVJL1Fob0prMDlWMWM3dDRUQzR1M3IvRzN6cTZjM3IzK3pmLzVjOHRFdG84TWlxbjJjV2plYnozMnl4ZEZRbjFBT2RrQksyaC91ZStUSk9uWjFXM3RuKzVQL2l6dTN4dFplR2EyL3MvT0RUY2U5dTY1dldzY3pZOGVZQWdFQmozeFRKalZZRkx3YUg0V1pBOGZML0hsL3lYN3RFY3hTTEl0LzNuYjEvOXpMZnVOem1YOUwzbXJjMVhqWUliOE9qekVteTFkYldGU05mZWxkYThlTmcvY3BEOWJERTVzditiR2oxajdCcGZYbmxkZkc1cjhWSUp5SWs1TkJKZnU3akd2TXV6MHUvSDU1L2s5MTVPOU9Ja0lNMXVXdmI4UHZmd3NIZFhzYkdkVGYzdmZpUHRQUU8zN21lZldWZWZFZjdvMy9BTW9KTnVkdmdsanpwd2h4aTQ1cFh4R2IvOEsyL1p5TnRGSVhIT3Boc29ObFBLdzVEblJCU01WQnRXZFo2MTV2TDF0NGNCeERFM1Z0UjlQbkN4L3UvLzFQbm03ZXkwY1NVV1hiQkV6MER1emExUHY2bmpkLzdlUE9sLzczNjhWZktYM25yeUcxL1VTMzlEb3RtYUEvR2EyLzBIV3NZeXNaVFgxVjk5bStzZndBMTZuTlU0OFBBRkpzeHAvUDV0NmVmM2g2c2tVK1pIYysrM0RyN3dBS3RsbDM4Vko1OWFiNzNXNDNyYnNCUHZwUWNBdHhRVHBveDhLYjNEcjN2VGZqK3Y1RUoxaThXVmJDR3V4L2VWeFZWTnYzQit6cnZmS05hdThxYjM0ZmN5Ui8razlSbjNMQ0c4ODRyK3Z1SEN6T1ZOdXVzTkxqVi8vNkdLZ0t0a2Y0Ly9KVG1uRld6akdJL1NBNlVsS2dnVDJSaFFLT2ZkSW5tOG1EYXQzUGsvYitMYXFSODNzM2g2bDl0dmZQMUZMUm5ZelhRMzJoTVNYZDlvZnJjK3hUaFUyZE91dW1XeG92K3VQUGVOOEJkQjAxb3E4a2JESlpkb1RFbHpMbW84OG4vbVpmL1dKRTJmWUhOVzRUUWwrNzV1dGI4Qk0zcHpaditMaSsvczdyOUhaMGlZc3VtNHRRRktCdHVrSUxUSVJNT0hVQlV0Y0lUWGhndWZiWWN4dERsQjM4RWxMRE92cnFKSWpzZHpEMlhUL2tOQXpyTGZ4b3VmbkllMm9aOXUyekc3UGlzVitpMnQrVUlxNWVFdVl2d29ibnFpZGZNbzBlTFd2dlFicU1iOSthcWJLSzFMMXF6dXUwdlJjWUZsNkp2RW1pdUt1VHNCQVlHN0lLbjlzMWEwRnEzT08zY0JCaGlxUTBQc0g5YTgwVi9tdjc1TDhvWC8wbGEvUDF5N2dVdVpHWXg5RC9yTlhuOUE1MS8rck9Cdi9oM2U4cEwwbGZmcDJBeXQ1R1J2R0U1aHJhaFF2dUw3NHVYUGp1Y2MyWCszbW9rNTltWE5YN3pmeXBYMWUzdjlBZVhFRERMUmFyYS8vR0o0cHBYOW9VdzhvRzNLZzExQTE0NmFKSTdEazBOS0RPMWJlYjg4aVYvVkRqOUd4L0o5MzRqTi9zRGdjSGQ4YXJyTUdkQmlGRWVxbzJMdmJYYnlzblZBM2ZZUi81cjgzVi9HNS8wcTlWWDNwKysraEdMaFZKYjh5K0tWenl2ZmN0dmhmT2VZdGU4U25mOGsrM2E0WWYweTlGVGhWU1ZUMzhwejN1U0JSaENYdkp0ZGpvT1J4bjdyNzJwK3ZFWDB0YyszdmZmL3hWUGVqNi8vV21BTElxMDRzZStiOWVrTjN4NEdQRGRXeDBKcUdLMnloQlRUdEZJTXlXUjlHZ01IQm5PKzVaNGEyZGplTmpVYm0yOEZ6SEtReURwQklJc09VUFIydGRldnpSRmhNVGh2M3VaajR5d3Y1K1NlMklJTGhHQkRGQTJkYW1XelRzMU01Z0lJa3FWYjFuR2ZidTFhd3RUMW9OTEhFa1FwczAyVnpXNFBhMi9YNlZoOVVqclcvL1k5L1JYZEthZWloMmJ4VWpQQ0VFSWJoNmQyVklBbGQxYmc4VnpickNycmlNQmhMemtlMnFQdURyYXZka216L0wya0FhM1YrdnZ0M0pBS1FsMWMzMEFhVXJNbGdzenlXbEFpZ21wZjByOHBUY2RxTzN3Wk0xcGprZEE1UkRaSFhaTFYzemF5OFAwTXpKUVhIZFQ0N3FiTkhvYTlGMzlzbjNmL1RTMnJiT2lkTEZPbUdSVHJrZE11bG1kaXBZQ2tHNzd2OVdQdmhqS0l0RUljOERTQ0VKaDE3eWFBMU5HUHZhbmVjT1NFUHZxNG9zOGNkcnM0dWEzRmFlZmc0VlgyT1lIVTBGRFREczM1OC8rditaTmJ3L3pMdE91ZGZqNlIvVDZXMERHanV5c2MrTVRyMjk5OTdadzRUTjlaS1I4Mmt2OGprOWhjRWRkZjZRWkZJZ01lZzRoQjB1bUJBdkR1OUxtRlpiY08yMGlpOHdVWWlOOS9mMWFkVTl4ODl1YWpTWUdwbGxhWlprVjFTZndDTExoVEhnTXNkM21sdFU1ZWU3c1VXQlVvT2Yydi81dGZNSXZXUWhweEczU3BPWnpiOEtTTy9MOTM0N0ZwUFlQYjR1WFgyUG5QcVgxK1hjRUMxVWdPeXFmK0t2c242TDVqMFBaaktjdWFGejV3cEd2dnRlS3hnRkxHQXJmdTZWeis5dkR4ZGNpT0lZenA1N2FlTUh2REQxd1oxajI0M0RlRSszSzUrSWIveERQdnNJNzdlS1pONllmZlNVUDdXeUdrcnUycC9lOE1mekJ4NXB2dWpYOXg4ZVJPZ2tNSHVMa0tkNC9MZXpaR05xcHNpamtBc2lVQndZR0wvcFQyUzQ2WkN3UitvbDlGZG1nQmZjRU41aUpEaFNaVGc4RE0wSm5jNVZOL2MwNGRTYjI3VTFEKzBBUG9pTm1hNWtvRklJcHNSanhUbjlsekxRR09LQXdvcUlnNEdWa0pwR2pzb0tpS3lsSms0TjNBQ0V5SThZWXdvd3p2R3BwM3k0SzBaVVJLRTlGZ1Qzci9kUC9OMTU2amRFOGVaaDVlbmplVGRXUzc0YjFpeFg3Rkp1RzRGWlliQ29NdUhhcFc1VEt6bmFZZEFiNisrT3U3VXJEVWphUG5UVFllTnB2TkJkYzVnZktseWNMVzMza3pIcGtHbDB1dHpubk5wL3hjZ2Q4OVgvQzRSVHJpYnB6Rm9aWjgvak0zL0JQL3BVVkFPQ1JBaXlaTWNOUjkva25RNllIZ1AzVE5HMTJib1M2M2xjZ0tMZlRuaVh4Z3FmWU9ZL2p4cFcyWnhmaHN1QWhXOHJzbjFJVWZaU0gxTWtoQlVSbko1WUQrU2RmYTUvM3o0MW52V3JvMXJlZ25CU0xSbEJxcWRYLzdCdVZVbkhXNVR6dnF1eXRPUCtTY01YenE2L2ZDaE9Md3FiTWxCWHNLNXZQdXNsa1duTnZINHNpRkhuRHN1b0x0MWpaajFpRzZYUFQzdTF3T01saTBzaTNiMFh3NXF2L1NtVXpMZm1oTEJSd0VINDRWeTJDR0JDeGUwUDdxKzhMN1RiS3ZqaGpnWS9zcm1KZjM3eHowcmMvb2MxclFHTFc3RER2U2d4TVRsQWt5WWJ2MmM2aGJaWThNOUE5bkRxdmVQb3JOYmk5L3ptdmRqbjJiTmR6WHhWLytGa2ZHY1Irc2dLdjRveTU0ZlJ6cXMvK3BkcGlib1g1RitQbWR6SUVWNmY1M0ZkNlo2UTg3d2wrNGVOVnRjUFpWelF1ZW5iN3V4OEZnQmcxdUczNHZXL3V1K2x2eW10ZnE1SGRSUnBwbTA5NjBSL2EwMS9lL3NCYjgzYy9GUnI5SXBNcE9OeVV6U3l6U0tWYkFveXMzQzBxUTA0RVU1U3lpakxPbk9zUjN1b1VONzBOeS8rei9ZN1hOSi82NXVaci8ycms2eC9TUi8rVWZYM1pMS1NRclV3Y2JucmJTSnN5TmM4OEZZMW9LbnhrU05Vd0FJZUxNa1NaZTBhUXVZVEc5RHh6Zml3YWVkcEYvVTk3ZVZwOXIrM2FnSE11Yi83dXgzejFUenZ2ZnIwNit6SUxVYWFJUEZTY01sZG5uRC84aFhlR3dhSEVFVnQ0ZWZNVi95ZVcvZG1wd0lqc2xvRk9QZmttK243d0IwTlM0NlYvRnAvMHdwRmJidEJQdm9wR1A3eGwwK2Mycm4ydER1U1hEdXNlT1psS0dPQkpFZXpFcWxXKzRHWU1UTThQZkwvMXRsZFo1Wm1Sek40WmFsenoydkNhLzl0L3pRM0QzL3RYYkZpSDBYRSt1V2x5cThrT0V5TGdKWUlCNWN2K3BIakpmM1VpS0VCUW9PL2FtSDd2eXRZUC9ubmduTWYxUGUrMzhkeWJFbEpVcURsZjZyeTViMS9YV1hNMzQwRDJ5a0tKU0MrWWI3K2x0ZVM3YWRWZDVjWFBNNkR5VkN5NFBGN3gzTlp0Lzd2OW8zK0xzUi95K09xL0xIL2xkOUlQUDg4cTg5UUYvVzk1djFmVTFHbGhZTWJJcC8vQzE5eXJnWmt4SmJ2aTJyNC8veHdSRWFNUDd2SVAvcjZsVk0rbUtZcG01enVmWXFjcTMvaHVEd1dVSGRGSkEveFE1SDAydUkrRU15OGUrTU5QMVdhWENKMWIzNHIxeTRycjNsZytML3Z1YlU2TFpSTlRwMnY3QmpDUUhhSnlpekJMNXJBT3E2cDQvaHN3dExmOXRwZWo2bFRlS2VkZTBYekxlL25VRjNlKytCNDArZzhrWnFiTWlzOTVuVDNoVjBQVnlYVDJUME9ycFYxYjRnVlB3NlhQNjN6NHJXbkpqeEJLV21yYytJN3d5NjhQUC80OFlUSjRzNG5CWGUzM3ZZbXZlM2U0OUpwT0tJSm5OYWVDRm1Lek1zRXNaSk1sd2x6WkVHQ0VTUmttVkNiUUNnV1Nic0hWd2U2TlBIVkIzeC8vaXlPWnlOTVd0Tzc2S3IyTnNnQVFpdjRvNnhoTTlGQzdvNUJNRnNvYi84NnJqaUZiMGRmNjhCOTJsbjQvdWdVVVlDQ1NaRUhCelpIYTRjbS9Pbm5SbFlvTm0zR0c3OXpjK3Z6ZnFqVWNpaW1oZnpLYi9hTEJ5V0RtMlpEZHpTZFA2My9oNzhRblhvL2hkbWtWSjgxa2N1M1o1akhBYzRMMTBWTGRQTUVjdkVzd1E4b2g5RThHellxQmRtQlVRS2NxbnZJU25yR29uaHJVSGQ5OTRsbjU5eGU2cEpIM3ZDRjk3MTgwTU5WVTF6WFI5azdmekxPS0cvK2FNK1oxUHZySHJYdStHbU8vZ1preVQyeE1EcTkvWnpIdnd1b3I3Mmw5K1lNRnFYTWYzM2ZqMjdSbHhjaTczZ3kxb2FoUWNTZzNYdjgzOGZ5bmVLZGpqRUFYUGlzTDJyMTE1SzlmQWpJKzU0YnlDYjlzQXdNNWdWVUxaaXdiekRudjJ0VCs0bnV4K051S0E2WVdaNTdOMmZPcXBUOWd1eTNQRmd0T093MFhYSVU3djRFWjgzbm11ZmsvdjhyT2lFUEl5YzQ4bjJjL3p1NzZkei9sMUxEd0NnVkJoVVoyWS9WUDA1YTFvREVFdStCSnhZejVibDN1WTZSMit1a1hsUkV2ZjQ3Zi9lOXBlRmRrVUNmWkpVOUd1NU5XL2RnbXpXcGNlSFZuMVQzYXZoNGhIcFFkOWJEd0Vzdzl6NnlzK1ZRcHR1LzV1bTNkcEhNdWp2TXZabk1LQ0xXRzg5YTErWUh2MFkzSWtPR3NDMjNLYWZuZTc5QXJEN0c0NUJrK3RETXQvcjdGd3VVV2krS2laMldELy9TYkRBZG9ld3pRMlpmWnZJdmhUbnB3Uyt2dVN5dnVqSE12OWZubjQ0NVB1eWVxZ0NmTVd4UVdYWjEvK0drc3VKUVdjTjkzY3FOcDdZcVRwdGlGVC9FbFA4RFFkcDc5K0hqR3VaMmwzOHRiMTV1VnNPeVU1U0FxQ0s0T0xucTZpYnIvam14dWNFNmFGYzUvUWw2OWhGdVdZdW9jditEeGpZR1pHV1pTSHQ3bFM3N25lN2VGMDg4dHozdHllOE05dnVKdWkxRUtic25jekhPZVBpZGM5RlFMQlMxQVdhSFVYVjlPT3plYU84NjhCSE1XNmM3UEVTNFBMR0k4LyttYU1ZTXN6SlB2Mkp4WDNPbkRlMm5rcEZQaUpjLzBQZHVycFhmVVJ0dXBLTGtUMGNMQ0syMzJlUmdZVUFKYmU5UDZaYjdxUDgwRVoyckVlUDR6dUdlN3I3bWJwTHppakRQQ0JVK3Zmbko3SEJuVW9zZUYyUmVtZTcvbXU3WkF0Qm1uOS8yM3o5dlVtVFU0czZadE1VNW9FUDNEVU1MdUdIbUh5bjcwOTZIcWNIaWZpMFk2OGlnR3phMHN2Vyt5SmM4ak84M2hNYkp2TXQxOWFMQkxjbEZqVS9vYUtKck1raG5rbzhCSGw0UERlOHc5ZDFyV2JLSTVMY3ljaHd1ZmxJZjI2S2ZmWUs0MHVDUERXRFFNY0hySVNWa3FTdFl4S1RNeVBGY2hOaVgzM0lxaElRUVBUaGx5VnE2c2lFa0lWUklnUXhCa1FTSEFRSm1xam5tVmdvMk9IWWZGcGtDdmhxM29jNnZSYW82cVJaWWVBeVZXYlMvS3cyaWFDSHBPVmxWdVhYZ21rYjNvQ3pSUFNkVlE4ZUkvS2s4OWUraUR2NmZVRHVVQWpTNlJodFNXTzR1Q3NFUVduVTRtTFpiZGlYOENVdVhtRmhxSDdqcVZPdklNeWxSN0RXUnNTSWxWaGFLcEx0T2s1SldTaDdLaFZEazloTDVNTjBHZWxiUEZCZ2pQYlNhaGpNWllVOC9USWJqUkpDZWhxaEtGMEJmb1hyTWRwalpqVXpRcEsxY2hlNklIUk1BUlM0UkNPYUZxbzRnS3BYV0psbXA3STNwV3F2WVBuWlNDbDJWTmU4dlVSbmFVL1VBV1FwQjdsZFRsSTVRc01CZ1puR1k1S3lVUktBdUtKbmdOVUdPbTRKMFJOK3QvelY5YmE5L0lSLzViYUpZNU5raENCbFZXSlpsNWJCamNTWGhpcDYxR1B4VGtJNWF6aWtpRTNCbHV2dXAveCtmY0ZBNEh6cDRjd3A2amx5aHF2RlJuQkNQN1FNakM2S1FGMjQvYTlYWUxyV0VuYVZFRVU4YnU3U0xadFJKMVZkTXh2QSsrVnp3RVVkMk5ia04wQzlhY2xGM2F2WUhuUGI3L3hYL3FXMWNQL2NjL3dpSmlJNHkreTBSWmlSckUxUjFyV2FkbGd3RFF6QVp5aldXc0s2MGhNQVRWU050RzVHRXRhUFVWRktWUWhpTjYxS3pzQjdwQVBJQW8ra1paSDZpeWVmUVpvaUVvSEV4endGQWorR0lrKytsSlZjZUtoa0tRdXBNUUlDR1VOYlJXUUJCeVVZN2l0a2VoemtWcFI0WDF4MkkvWlMwUElGMGl5cG9rb1l0L3BwVXNJUUN4ckxrdHVpQTRpN1R1cGx0b0lod0FYbmNabWVzY1JBMmdMOHE2OWE2ZWRrSUdGUDJqWkNpQk1TanVCN0N3TzlmTVF1MC8yK2lGakJaMUtPdGU1UDV2dFAzL0V4b0k5VS9HbW1pK1BNcHRtZ0FMTE1QQktQajZDdXNNcG9XbVJVUFZycnp5dmo1YVpIZjJ0TURDUjVkSW9BbGlSS051WU1pMEVvR2dlNnRUbkhWVjhlU1hFcEJuV2ppSWE0R1BVSGIwWUFnVDRrUC9xNFZEQUVRa1luSDBYN05qdGg3THpUd1ZEWTNzdzVwN3RIa1ZRM0cwdCtqWS84dUhhbVE1dmhhWWg5OUFNNXJQeko5OVQ0ZWV5LzZpbnVqa0VVY2IrZmd6Nmg3VHlmdW9uMDJ2ZHpCbHRELytQOFhNV0J3NklFSkhYdDUrcnFvNjVXSmlJb3RyYjdEK0tWSUd3eU56MVJFL1U2bnh5QVdqTC92eDNyOTZLU0N6Z01lUXBMSWtjbE01S1VSbGpHY2VRMCtPTzdnQ1pZbEdxbW4wUEw2MTdoTHNTR29QRjVjK0xUN3hoUmtJOExvTmlJK01FcXJUMHNoZW1VbVA5R1F2MFNRRlpBZVIzY3pGNHJIMFdCZ29wQTVKSVJ1WWoyNEplM0pDSkVPa3NoREZWUHU3NCtDUnFVTlhlbVp6SUQ3dmpZeWxBUWt4YXJSVjdoRlF3bmp1NDVuYWFnd1Flb1Q3NnV2aE1IVnNYY0Q5SkNGa2Y0YW1IZzVRTXFNN1J3UGJucHdjY1NBNmtsSE1oY3hFalk5WlZCSlNGZWVkWDF6eVRFQ1VBdTBSbzVuZ28yK21Yazk2OHRnUzZ5MUJUM3JTVThLZTlLU25oRDNwU1U5NlN0aVRudlNVc0NjOTZVbFBDWHZTazU0UzlxUW5QZWtwWVU5NjBsUENudlNrSnowbDdFbFBmcUhrL3g4QVUvVC93RkNuR1Q0QUFBQUFTVVZPUks1Q1lJST0iICBjbGFzcz0ibG9nbyIgIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6MzcwcHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlybWFfYWRpIiA+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGZpcm1hX2FkaSBhbmQgJGZpcm1hX2FkaSE9JyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX2FkaSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV9hZGkyIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpcm1hX2FkcmVzaSIgPg0KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRmaXJtYV9hZHJlc2kgYW5kICRmaXJtYV9hZHJlc2khPScnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV9hZHJlc2kiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfYWRyZXNpMiIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZXJjZXZlX3VzdCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhZDZweCI+DQogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNlcmNldmVfYm94IGNvcm5lcl90bCI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjZXJjZXZlX2JveCBjb3JuZXJfdHIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNlcmNldmVfb3J0YSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c3RlcmlfYWRpIiA+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50TXVzdGVyaUFkaSI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im11c3RlcmlfYWRyZXMiID4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCBhbmQgLy9uMTpJbnZvaWNlL2NiYzpQcm9maWxlSUQgIT0gJ0lIUkFDQVQnIj4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOlN0cmVldE5hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+PHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpCdWlsZGluZ05hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+PHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+PHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UG9zdGFsQWRkcmVzcy9jYmM6QnVpbGRpbmdOdW1iZXIiID4NCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpCdWlsZGluZ051bWJlciIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj48eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+Jmx0O2JyLyZndDs8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UG9zdGFsQWRkcmVzcy9jYmM6Q2l0eVN1YmRpdmlzaW9uTmFtZSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz48eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4vPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpDaXR5TmFtZSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz48eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZmlybWFfYWRyZXNfZXh0cmEiPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkJ1eWVyQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOlN0cmVldE5hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+PHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QnV5ZXJDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UG9zdGFsQWRkcmVzcy9jYmM6QnVpbGRpbmdOYW1lIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPjx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0Pjx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpCdXllckN1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpCdWlsZGluZ051bWJlciIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgTm8gOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpCdXllckN1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQb3N0YWxBZGRyZXNzL2NiYzpCdWlsZGluZ051bWJlciIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj48eHNsOnRleHQgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyI+Jmx0O2JyLyZndDs8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkJ1eWVyQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOkNpdHlTdWJkaXZpc2lvbk5hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+PHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+Lzx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkJ1eWVyQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2JjOkNpdHlOYW1lIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPjx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJmaXJtYV9hZHJlc19leHRyYSI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXVzdGVyaV92ZCIgPg0KICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpQcm9maWxlSUQgYW5kIC8vbjE6SW52b2ljZS9jYmM6UHJvZmlsZUlEICE9ICdJSFJBQ0FUJyI+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlUYXhTY2hlbWUvY2FjOlRheFNjaGVtZS9jYmM6TmFtZSAhPSAnJyBhbmQgLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5VGF4U2NoZW1lL2NhYzpUYXhTY2hlbWUvY2JjOk5hbWUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPlZlcmdpIERhaXJlc2k8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlUYXhTY2hlbWUvY2FjOlRheFNjaGVtZS9jYmM6TmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eVRheFNjaGVtZS9jYWM6VGF4U2NoZW1lL2NiYzpOYW1lICE9ICcnIGFuZCAvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlUYXhTY2hlbWUvY2FjOlRheFNjaGVtZS9jYmM6TmFtZSAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+VmVyZ2kgRGFpcmVzaTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50TXVzdGVyaVZlcmdpTm8iPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZXJjZXZlX2FsdCI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjZXJjZXZlX2JveCBjb3JuZXJfYmwiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNlcmNldmVfYm94IGNvcm5lcl9iciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnaWJfbG9nb19jb250YWluZXIiID4NCiAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iZGF0YTppbWFnZS9wbmc7YmFzZTY0LC85ai80UUFZUlhocFpnQUFTVWtxQUFnQUFBQUFBQUFBQUFBQUFQL3NBQkZFZFdOcmVRQUJBQVFBQUFCa0FBRC80UU1aYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3THdBOFAzaHdZV05yWlhRZ1ltVm5hVzQ5SXUrN3Z5SWdhV1E5SWxjMVRUQk5jRU5sYUdsSWVuSmxVM3BPVkdONmEyTTVaQ0kvUGlBOGVEcDRiWEJ0WlhSaElIaHRiRzV6T25nOUltRmtiMkpsT201ek9tMWxkR0V2SWlCNE9uaHRjSFJyUFNKQlpHOWlaU0JZVFZBZ1EyOXlaU0ExTGpZdFl6RXpNaUEzT1M0eE5Ua3lPRFFzSURJd01UWXZNRFF2TVRrdE1UTTZNVE02TkRBZ0lDQWdJQ0FnSUNJK0lEeHlaR1k2VWtSR0lIaHRiRzV6T25Ka1pqMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M4d01pOHlNaTF5WkdZdGMzbHVkR0Y0TFc1ekl5SStJRHh5WkdZNlJHVnpZM0pwY0hScGIyNGdjbVJtT21GaWIzVjBQU0lpSUhodGJHNXpPbmh0Y0UxTlBTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZiVzB2SWlCNGJXeHVjenB6ZEZKbFpqMGlhSFIwY0RvdkwyNXpMbUZrYjJKbExtTnZiUzk0WVhBdk1TNHdMM05VZVhCbEwxSmxjMjkxY21ObFVtVm1JeUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiWEJOVFRwRWIyTjFiV1Z1ZEVsRVBTSjRiWEF1Wkdsa09qWkROREpCTkVJMlFqVkNSREV4UlRoQ1FqTTBSRUl3UWtaR01FUXhPRFkwSWlCNGJYQk5UVHBKYm5OMFlXNWpaVWxFUFNKNGJYQXVhV2xrT2paRE5ESkJORUkxUWpWQ1JERXhSVGhDUWpNMFJFSXdRa1pHTUVReE9EWTBJaUI0YlhBNlEzSmxZWFJ2Y2xSdmIydzlJa0ZrYjJKbElGQm9iM1J2YzJodmNDQkRVelFnVjJsdVpHOTNjeUkrSUR4NGJYQk5UVHBFWlhKcGRtVmtSbkp2YlNCemRGSmxaanBwYm5OMFlXNWpaVWxFUFNJelJFVkVOa1UxTjBGRFJFVkRORUpCTnpreE5VTTJNME5DTjBSRU56TTBOeUlnYzNSU1pXWTZaRzlqZFcxbGJuUkpSRDBpTTBSRlJEWkZOVGRCUTBSRlF6UkNRVGM1TVRWRE5qTkRRamRFUkRjek5EY2lMejRnUEM5eVpHWTZSR1Z6WTNKcGNIUnBiMjQrSUR3dmNtUm1PbEpFUmo0Z1BDOTRPbmh0Y0cxbGRHRStJRHcvZUhCaFkydGxkQ0JsYm1ROUluSWlQejcvN2dBT1FXUnZZbVVBWk1BQUFBQUIvOXNBaEFBQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQWdJQ0FnSUNBZ0lDQWdJREF3TURBd01EQXdNREFRRUJBUUVCQVFJQkFRSUNBZ0VDQWdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3UC93QUFSQ0FCbUFHa0RBUkVBQWhFQkF4RUIvOFFBdHdBQUFnTUFBUVVCQUFBQUFBQUFBQUFBQ0FrQUJ3b0dBUUlFQlFzREFRQUJCQUlEQVFBQUFBQUFBQUFBQUFBR0FBUUZCd2dKQVFJRENoQUFBQVlCQXdNQ0F3VUhBd1FEQUFBQUFRSURCQVVHQndBUkNDRVNFeFFKTVNJVlFWRXlJeGJ3WVhHQm9SY0trYkhCMFZJekpFSTBKeEVBQWdFQ0JBSUhCQWNHQkFRSEFBQUFBUUlERVFRQUlSSUZNUVpCVVdFaU1oTUhjWUVVQ0pHaHNjRkNJeFh3MFZKaU13bHlVM01rNFlLaUZ0SkRnOU5VSlJmLzJnQU1Bd0VBQWhFREVRQS9BTi9HbGhZbWxoWW1saFlwck1uSUxEWEg2QkpZc3ZaRHJsS1pPRCtDTFp5YjBocHl3UFRiQWxHVnF1dGdYbkxGS0xHTUFFYnNtNjZ4aEg4TzNYVWp0dTFiaHUwL2tXTVpkcVZKcUFCN1NTQVBwejZNTmJpOHQ3WmRVelU5eCs0SEE0bzhrT1JHV2E5TFQrRGVQQ21PNnl5S2RSdGtMbDNLeW1JR1QxZ2tReXptYWo4YlJVSlpNZ3B4YURiODBEektVRVl3RkVERktVTy9VcCtrN1ZZMGl2cmxwTDZ0RERGSHFvYStFeWFxVjdBRDFZYkM0dTdnRm9VQ1JVeVlrZlRwcDl1QjRYdUhKRzE1WGlzTldmM0RNYzQ4djFoV1pOb2lBd2p4TmVTVlpkeUV0VDVISVViVm0rWE1xU0Y3b2J1NXZhQkVPSnBDTUk3YnlxMFVUMWhHZnB6RU9NMllOdEcxbmNZdG5ZMjhkU3p0Y25YUU9JeTVpcnJDQ1JoSHIwYU5aMGF0V1dHekM0YWNRUGNqV2VIY3lyU3RLOEswRmFWclRPbE1BaHljem55SDQ3NVM1QjQ4Y2NzK1RGdW44WTR3cjl1eGlrd0RBTUFYTE4vZXY4VHRMTFRFNDVmQnNqRlZpTnJUSE04UEtLdWpMdVZQcHlMOVVVQ3BNanJHSzlpMlBaZDZzYk85K0dqaWludUNrcExGaERIU1VySjBGeXhna1VMUWQ3UU5STGdDUHVwSjdhU1NMV1daVXF1WGlQZHFPb1UxS2E1NVZOS0RCZVJPUU9WZGR0dEJ4N0VjOXEvS1pDdmRMaXJkQ1Zqa2R4Q1ZTbzh1dXZRM2VTSmVzUU9ac1hwNHFyTXBMUkZTaW5yOWZzTzRYUVp0VjFUb0dNZ3NrbU5HejJ0cldhOS9TeEpheFNGV1pMbzYwR3NScXpRaHRTZ3VWVUVycDFNQlUxRlgycTRqZFVFNUVqQ29CVEk1RWtCaUtFZ0FtbkdnN01jcnhCN2hYSkZ4VWF2ZE1yOFJaL0l0RnRHUHFYbEpua1BpZzdsNys2YVVUSVNFbTZwMDdONGp1VVBVcndVOHl3aUZYWHBJVmFlZHBJR0lmeEdUVVRPZHB1UEt1M1c3dmJ4M2F4N2trMGtSaFpTUUpJMkFkUE5xRjd0ZkVSUW51MXFEam0zM0c3S2g1SXkwQlVOcXFCM1RtRFFEOXVPR0I0TDVSWUY1S1JUcVN3M2ttdlc1ekZIOEZpckpGMUl1NzFGNlhZcWtkY0tSTHBNYlZWbjZSeDdSU2V0RURDUHczRHFJdHVXejdsdFRoTDJNeDFGUWFoZ2ZlQ1JYczQ4TXN4aVR0NzIzdUZEUk5VKy83d01YL3FOdzZ4TkxDeE5MQ3hOTEN4TkxDeDBIL1lQMjY2V0ZoZGVVK1dWdHlMa2xiamp4SGNWQmU3bG1WcW5lTTczaDBpT01jWFQ2VVU5bXBHcDFlSEZ5eWU1bnpKSFY1Z3ZJZnB5TVdJaXhhb0hXa1hUVk11eGpPeTVmZ3NiSDlZMzRQNVFYVWtLaGlaRnFGSmFSQ2ZLQVowOFlGU1F0UVRpSG52SkxpUVcxa1FHSnpiTExwOExEUGdlSHR3QVkzekd1UFdybTU0UHJlVXM4OG5KZVdqSmNuS25MVkxZWkR0bVVNVlFsMlBSTTJYSGpUQnNuRmtOQ1J1R2JPbzJhVDlkWTE2T2V4VVdxZVJUaVpZaUJCV0tmZ2J1OTBXMjd5UXdiTEdyQmJjUHA4aVZvL01oam5rS0pRVHFDMGJlWVVacUlYak9hczBNVUExUUJudVNSVjZlSlFhTXlyVStBbnZDbFFNd0c2VDZzK0ljb2MwT0g5SGNXeWZtc0Y4aDFLcmFXak8waFZMRFhvb1hWZ2pMQmptMUdzK0pKcVpaVERqSGVWcVk2VWVwd2MyWnJNUlpIak55ZEtQbG1KVTI0ckJ1Tmh5enpIS0lFUzcyYnpGcW10V2FpbFpGMFRCU29saWNCZk1qQlI5TEtDOFRuVkpORExlMlM2aVk3bWh6b1FNd1ZOVnI0V0dlazVpb09UREs0b2Joamh5RnpORDU1WUoyQ092N0NFcHNWTGhCeWdRa0JhSGxDcVR1a1ZpV25XclJ1TTI0Q09yVDBXMzA0SkVJaHlWQnNvNWF1Rm1yZFZPTWs1azNLWGJHMmx5aldaWnl1b2FtUVNPSFlLVDNSVmhYVnAxaXJCV0FaZ1hBc29WbUZ3S2lTZzRaQTBGQlhwNGRGYWNNc2hqenNtOEx1TitYcm4vY0srWStKTVhBejZ3U1NrMEU1WVc2eWo2ellsZllRa2x3Ym95Z00yLzhBK2RQek5raUlwcEpwT2swbmdGOVdrUmN2Rmp6TnZXM1d4czdTYlRiRlZYVHBVNUxNSndNeFgrcUFhbk1pcStFa1lVdGxiVE9KSkZxNEpOYW5pVktIL3BOUHI0NHErMSszZGhHWGtibllxaEszakc5c3QxVHlCV1VwK3ZTektSV3I3ekkySjRUREV4YVluOVJ4c3JJRnNEQ2xWeG1SaVk3b1VHaXlaanBwZ0N5eFZIdHZ6aHVrU1JRM0t4VDI4VWtiYVdCQVlSeXRNRWJTVkdrdXphcUNwQjQ1Q25rKzN3c1daQ3lPd0lxT2lxaGFpdGM2QVV3TTB6VGMxNGJ6Zlc4WjhkeVByRmszSUdVcnhrRzZQMzFmeVBDWU14bGcrSHd2SDRPd1V4dXM4b1JsV3JmQ1kxZ0dNYTlTclVXOTlmUFd0cXNkSUk5STd0OHptNGJuYk55MnQ3M2VTc2RqQmJwR2dEUm00bG5hWXp6bEZ6WkdrWXVESzY2WTRTQWRaQ0k3VmttaG5FVnVDWlhjazFCMEtvWFN0ZWcwRk82RFZtcWNoVWpqbEtqY1hjKzhoVDY3M0ZWeXdWbCtqUWtuSllvNWhZMGxIOU56Rkx0YXZZR2RUY3k5MVFqYVBDVStQYVd5VWNsa1dkVGN5OXlZTE1Dcm95S2NlL2FyTTB1OTR0MXlyWm9zVndrOWxNd0U5dlJkSTFLVzBKSVdhUmdvN3J2b2lHcWhRU0l3YytheHg3Zzdkd3BLdGRENTF5TktsYUJSWG9GV3k0NlNDQmRPTCtZMTd3amtOdngyNW95MVFtWFEydHBqdWljcnFBZG1qamk3Mjk3R3NabUlvT1phc3djUDFNQTVra1lXV1pyb01YNm9SVTBEa2gyQy9jWUVkUk45eS9EdU5vdTZiQ3JwcVRXMXVWYnVLQ1UxSkpJUjVvWmtid1ZvYXJ4QUdPOEY3TGF5QzF2YU5uUVBVWm1nTkNxaktsUng0OGNOSUFRTUFDQTdnUFVCRGZZUSt6K0lDSCt1Z3NtaE5lSXhOWTd0YzRXSnBZV09tL1hiU3AwNFdBYTVFWEc5WlZzVC9qbGgrMEtVR09hUnFjdnlMem8yY04ycXVJYUV1Z1o2RUJWSkIyUG9FY20yOWkyVUJGVllESlEwY0tqNVVPNEc1RGxtejI5dHRjVWU5WDYrWk14LzI4SXJXUWh0TE1TdGRPZzVxR1h2SGdPbkVWZE5MZE9iV0U2VUhqYnE2UmthVnIySExDKzVxM3dzdklZendYeFFNMXVIR1diWjNUR3VQWURqTzhNbGxXbFoyZ2tjZjNxSXo3bC9KdHRnVVQ0eWV3emh4S08wek95dkdjNUZlb2R1VFRha3N6aWt5cUcxZUtPYmM5K1VSYjJubHl5TmNnQ0tTQStaRVlJb295UE9MMFFNUlIxa29CNVhsdktXcGFwV0MxT3EzTlZHanhCc20xTXg4Tk02RGdSL0ZxQzRhL2dqai9ENG5oVlg4OFNBc09TckhaSCtSYnJZWW1JY3hkWUpsQ3oxMkpnc2hXakhGVms1S2NMamRyZjNVWWVSbFdrZXVtazlsSDd4MG9IZTVVRFFGdTI3eWJoS0ZpMXBaUm9JNDFKQmZ5bFl0R3NqZ0w1cGpCQ3F6Q3FvcXFNbEdKYTN0MWhXclVNaE9va2NOUkZDVkJKMDE0a0RpU1R4SndSSmpGSVV4ekNCU2xBUk1ZM1FBQU9vaUkvWUFCcUdIYmh5QVRrTXpqT2g3bmZ1UFBUT1pmQmVDN1E4ZzBJWng0N3prS0Rrbk1hK0k4YmdndjhBUnE5S01GVzdwc2Rzb0JpdVZTSCtJQ1FQdDJxRG5ublJyUS9wMjFPVmtVOTV4MGNNZ0dVZ2p0Qi80N1FQbEUrVTIyM2lLTG52MUV0eExhVExXQzJZNUZhbFRJenczSVlOL0k2WkR0OE9lV1o1ZjUyVGVMZ255Z3phQlV6bkQ4dkt0MkFvQUJoRDhKWnJwOE52dTFWTGM0NytoN3QyNFBzWC93QU9ObGRwOHNYbzBZVkw4dTIxU1A4QU5uNlAvWHhVMDd6cjVJS1BtMEpXdVEyZnBpWWZycHMyTFpybEs5ckx1WEs1d1RTU1NicHpZblVPWTVnQU9uMjZVUE5mTkZ5NnhRM1Q2aWFjRTZmYW93eDNiMEcrWHpseXlrM0hkdGl0VXRvbEpidjNiVXAvZ2tZL1FEaDl2dG1ZRzVWejlvcm1WT1JQSWJrUTlGSlJHVWhzZEk1WHVpMElRaXlDZ3BGdGlEdVZXSS9NSUtGSHdCOGhSRDV1N1Z6Y3BiWHZ3Vkx6ZDdsbVBFSVF2dDRvMzNZMVIvTWo2bCtrVXBuNWM5TTlpZ3Q0eFZHbldXNEpORC9sM051Q09CNFA3OGFNTWc0NnRhMkpjdXR1T2k5SHhEbS9JVURKdVluSWJpblJyaEJTOUxORkVtTmp0YWJKcWtyTlNaUEljaWIxMm0vRnFxY0Z6dDNaQ0diTFhIdDkvYi9IMnJieUpibmE0bkFhUFdRZkxCelZTZkNPd0ZhOEF5azZocjRuaVl4eWZDNlVtWUdocDA5Wi9ZK3c4TUpsd2Z4MHhiUzdka2VENVFNbldPOFF5dFVrOFpTT0xzMFJGWnRtY2MwdWNzelVKYjdWazNPZVRjWjNpd3NiZmpMR3VZU1M1YW5mSnF0d2J4bThsVnpLUzZTQlVrbHJNM2plTHU5dElXMmZUY1grc1NlWkVXVzNoRVN0R3NVRU1zU2xKWklkQmxoamxrVWhGcEhxQkt3VUZyR2pzTG1xdzBwUnMzWXNReFptVmpWUTFkTEZRY3puVGljZkhhLzVHNHI1ZmgrRXZJS3hTOTFwdG9aeUw3aDNuK3hMQ3ZLWE9zd2pjRjNtQzhveTZvcGxkWmxvMGNrWlptOUVwQXNFT1FGZHZWSU9BTUk3cGEyMjlXRGN3YmFBczhkUGlZeFdpRm0wcTRMRWF0ZkVoUWFmaXpxUzl0WGt0SmxzWmpWR3JvUFhRVkl5NnUwK3pEUGR0dmhvTno5Mkpib3hPdjM2V09LSHJ4VEdmc3NKWWF4aFBYQkpyOVVzYXdzNjVSSzhVZjhBMkxUa0N5dWs0YW0xdG9uc1l5aXNyT3UwU0QyZ0pnVDdqYkR0dHFUMmpiLzFLOVdCaUJBQVdjbmhwWE05SU9mREk5UFZodGR6L0R3bHg0emtQYlVEdHdvUE03ZksrTHB6RkdJNUNhdU9CNXE2Mm13TThuOGxzbk1vZklIQy9QcWVWNm4zV2VuNVJwRVJMQ1pqYTdGbEI5SDFTdXRaZDlUWkZ2Q2xWV1lUQysvMHgzWW0xRGJyNks1M01KRmRoRVZrdG9TMGQ3QTBUWlNReUZmNmF4QjVYS0pPb09sWGlXZ2tTSWxFMEhsMjRKaXFTQzdVTVRCaHdZQThTeENpcFE4U0dQaExKK0svRnRsZ2hDelhTek9XTS9tTEpLcXIyNXpMVnBWMTQ2ck1YMWhuN3FwakNpV0tKeC9RTE5NNHlybHh0OHM1aWpXQk43TUVTZGdrczVPbWlpUk1LMzdmVzNVeDJzQUtiYkFLSXRYcTVDcW5uU0swa2lySzZJZ2Z5OUtWV29VRWttVnRMUVcrcVJ6V2QrSnl5RlNkSUlWU1ZCSnBxcWMrT0M4ME80ZURDbXZkTTVrbndGamxQR05Ka1NvWk15S3ljSmVvUlVURmV1VmczZTNleXhpR0lZU09IUWdaRnVicHNmY3dEOHVnTG5ubVA5SHNQaHJjMHZKUlFkZ3lxYzFJNmVHTXp2azc5Q1Q2bzg1RG1EZUl3M0xHM1NLV0JQOEFVbHowcjNab3BBQVFEcUFaYTVFSE9tSzNMdVJWbmF5OE94Y25PVVZGRE8xeFAzS0xyS2ozSFVPY2R6SE9jd2lJaUk5UkhXTTEzY00wbEs1OVAxZG1Qb0U1VTJDR3l0ME9taUtvQ2lwTkFBT25VYThPbkFmMktaZGVWR01qRTEza3JJTEp0V3JSdWtaZHk1ZExuOGFhU1NhZTUxRkZEanNBQUh4MTRXMXUwOHFRSjRtTkIrMWNTSE5XL3dCcnNHM1NYbHkybTNqUWxqUW5JQ3ZRckhnT2dIR2xUMnNQYStqNmRIbHpyblZpMS9VeWNjYWNWQ1VLYjBOSmgwU2VyVjNLcitUOVM4Q2Zjb29JZmwvaEFRNjZ5QjVQNVNnMmlBWDE3L1hwVThlN3cvaGNnL1JqUmg4elh6SWJ4Nm5jeEhrN2xadi9BS3N5R05SUkQ1ckUwcCtiYXhPbWY4OU8zQmpXejNvY0g4ZWNwd05MaDhSdlpiRjR5aG9lVnY2TXMzYnZmR2dxTFVaaVBpenMxUFVSNVRtQTRnS3laaFQzRUFFZGdIdEo2bDJkcnVTMlNSYXJRdFF2cVlkbmg4c242OFNlMGZJSnpYdm5JRW5ORjVmK1R2d2gxcmJpR0Z3MWFNQVpoZktneVBIUmwxVnhvenBWdXI5NnJFSGJLdTlSa0lPd1JiS1dqSGFCZ09tdXlmb0VjTmxTbUQvdVRVRC9BRjFhME15VHhMTkhtakNvOWh4cnEzWGJydmFOeG0yeStHbTZna0tNS2cwWWNjMUpCOXhJN2NML0FPZVhFYWlaTWpaYlBCNnZXckxaYWJYSTF4YzZsZkxsTTByRnQvcTFGU3Q1NGR4bEtYZ0tuZGJXV29ZNmhzZzJWN0lSY0MzWXViYkh1bFlpUldjc0RnME1kY3BjeDNkaEl1MUNTU09DUnpvZU5GZVdONU5GZktEUEdtdVF4UktyeUZoQ3dFc1lXUWFzRGU0V1VjeW1lZ0xBQ29KSVZnSzAxVUJOQUdhb0ZOUU9scWpMRk5VbkZlVytZbkZTMFV6azFjLzBweXp0TUxTT1FHUG03QzFVZHdHQnJ4R00vTGppeVk5cEVCRlJGNG9NTlZieEZMeDhxMW5EU2pweTRJOWFxU1RyeUxvcFA3NjgyM1lOL1M0MkNQWHNVVWp3NnlyZ3kwSnFaSkNXUjIwc3JLWXdxNmFmbHFEbjRKRExlMlpTOUlGMHdEVXFPNzdBS0VDb0l6cWE5SndibkNia1ErNUw4ZjZ6ZWJURnAxcktjQklUdU44MlV2WUNMMHpMK1BwVnpXYnZDcklCOHlEVnhJc2ZYc0JIL3dBc2E4YnFodVU0YUZ1WTlxajJqZHBMZUE2clE2V1E5WUtnMDRrNUVrWm1wQUI2Y1BOdXV2aXJaV2JLUVpIM1pkUTQwd1dtb1BEN0N0T1ZPYTZySGNzOFIxbTNoS3ZhUng0cXNkbk93d3RlakZaNmZ0V1dzcTNhT3dGeHhva0xBcG1JYVNzVmp0bG5rRkkwbTVTZzViZ2M1a3lsOHBEblpkcm5rMktVUklQaUwyb1IyT2xVamdEU1RPeDZFQ0s1Yi9EbFU4SWE1blg0NVMzZ2g0Z2NTWkFBb0hhV0lBNDl0TUhLaGxTTXNHVms4UnhyQ01jeWtOVFkyOTMrTHNUdVRoN0pYSWl3cnFwVUNUZ1lWZXRQWUc3UjBqTndVbTBrSERXV1MralBHU1JURlZPc0FFRnpZdkZZZnFEbGhHMGhTTXFBVllxUHpBemFneUVLeUZRVU9zTWVGTTVQelEwdmtpbFF0VFhpSzhLQ2xEbURYUEttTG0xSFk5c2VoczloamFuWFpxelRLNVdzVkF4anlWa0hCOSsxRm95UU91dWNlMHBqZkttUVIrQTY4cHBZNEkybms4Q0FrK3pFaHRXMjNPNzdsQnRkbU5WMWNTcWlqSVZaalFaa2dEMmtnZFp4Z3o1dDhsWmpNMlVNZ1pVazNhaC9ya282amF3M09jNGtZVmRrNFhSaDJxSkRBVVV3RnRzb2NBQUE4aWhoMWlwelp2Y3U3Yms5MmZBVFJSMUFVSEhTQ2ZlSzQra2I1Y2ZTcTA5TytROXY1YXRWMHlyR0htTlQzcEdJZG1JODJRQTUwb3JhY3FnQ3RNS1lucFl5YVRwKzVPSW5NQmo5eHVvaU93L2Z2b0pIZUk3Y1pWVE90bGJnZEFIMmZUaG0vdEVjTmxzNjVJVnpaY29WU1FnSzlJR2phV3pkcEZPMGVTNEFCblVvZE0rNEtGajB6N0pkTmdPTy93Qm1yazlPK1hUTEorcFRyM1FScHorbmczMmpHcGY1NVBYTjdSUCt3ZG5sbzdxVE9kUEFWR2tkKzNOYWl1YVNaVnp4cUw5eHR3NTQ4ZTMxa04xWHlLTTNFcVdFclVvNmJFMldUalp4K2t6ZjdtVCtZcFZFRkJLSS9adnF5K2Q3aDl2NWFsa2c0MEMxN0NSMTE5bU1IUGsrMlMwNXgrWURiTFBjUUhpQmxsVVpqdkpFN0tlNnljRFE1bWxlakdFelBtUUZiaS9pWXlMRlJ5Y1NKczJpQ1pEQ29zNmRMSmxBcFNpQUNKakcyQU5ZeFJOSmVYU0JSVnkzMys3SDBDNzVKYjhzYkJNOXdkS3JDU2VKOEs4Y3RmVWVHUG9WZTJPV3l4dkZuRk5jdFNpNmt0QjBtRVp1Z1hFZklSUWpSSWZDYmNSNm9GTUJCKzRRMWx4eStra08yUXhTWkhSMmZkajVsL1dHOHM5eDUrM0crcy82VXR3eEI3M1JSZnhBSE9uVU1NWEVwVEZFcGdBeFRBSlRGTUFDQmdFTmhBUUhvSUNHcHdaY01WYmhMZEx4WlRlRTNKcFMzSHBlY3B5blNGckhIRWJla0l2RU9NZU4ySzR6UDF2cHhXUzdsTDlSdDh0NXh5Uk9TcVVCRXk4MFZsS0VWWGp3Y3V5dGpvTHV3c3E0M0M0NW8yTDRjUzJpWEtwNWhRbWVXNW1OdWoxQU9rd3dSSXZtT2lha0lERlYxQXF1SVZJa3Niclhwa01aT212Y1ZGMWtjYzlUTVRRRTBQQ3BwbWNYRmo0bjlndmM5eTlqNUVBWlVQbW5pQ0p6elhHUk5rbzl0bWpEQm96SCtUaXNHNVB5d2QyMmxTY0xKT3hBcFJNNFpLS21FeDFoMUZYYmZxZkoxdElvL00yOTNWeVR4RXJpbEIyZHdkSjRuTHBVTmJiZHBFSGdtQVB2VmEvdjZzTkQwRlltc0lEczJSc05QdVRuTkgrLzBSYTMxR3kxeU93cHhuanJSVGYxWVNmeGE1NCtjZEova1RCWDJHZFVTT2s3aXptWUhKOEswUEh1WThxYTdDU2ZvdXhPVk5CUURXM2EyZTZuWWR2bTJwNDF1YlMydUpRcjZOTXF6VHhRdkVSSVFoVmtuYldyRWhrRExUUEF5c2tKdXBmaUZZckt5Q29yVlNxc3diTE1FRkJRamdhSERIdUlGYnd2SUszTEtlT3VRR1NlVGxsazJjRlE1ZkkyVkptSWs1K3YxeUFWazdIQ1VXTlpWK2k0NmlJdVBiT2JTdTZXVU5ISGtYcXFwQmVPVnpJcEFrRjh4VDdpb2lzTHV6Z3NZRkxPSTRsWUt6TlJXa0plU1JpVG9BQTFhRm9kQ3JVMW1MTkllOUxISTByR2dxeEZRQlVnWkJSMDlWVDBrMHdiMmhqRDdDd1Bkdnk2dGkzaUZhNDJQYytubDhqdjJGS1o5cHhJcUxSODRUV2x6SkczQVNtSkhJbkRjUGgzYUN1ZmR5TmhzRWdYeHkwWDNWRmVnOUgyNHl6K1RMa2xPY2ZXdXhrdUZyYVdLdk1mOFhsdUVHVG9lSUpxSzhPQjZNTHVYcG96aVNRakNISHhOa3c3dnREdUVUYi9BQi9udHJGbTZsMXZrY2g5OU1mUmh5eGFDRzJFaDhSQSt3ZHVCOVRyOG5mTGRXS0RDcG1Xa3JOTngwSzJUVEwzR0ZaKzVTUTdnQUEzTUNZS2R3OVBnR3ZYYTdSNzI5anQwOFRFZnR4SFIyNEcvVTdtbURsamxtNzNpWTBqdDRTM0FuT2xBTWtjNW1nOEp4c2p3ZnlBNHZlM0RWS1JoNjVRbHhmMlN2VXF2dnBBYXZDTlpCbzJjU1RCSmM1M1NwM2lDNHZuQ3ZjcVlCSjBLWXZYV1NTOHdiSnl0R20xM1JZT2k5QWMxcUFhOEdwWGp4T05FTW5vWDZzL01WYzNIUDhBc1VjYjJkMU8xTmNsc2xDcmFTQldTRmpwSXBVeHJYaUs4Y1dGbW4zWHVCL0pMRTEweEJlSzVsQlN0VytHY3hid0ZxMDNSY05CVVRONEh6VTVwQVFUZHNsUktvbWI3REYvbHByZjg4Y3A3cFlTV2M3UG9rV25oazl2UUIwanJ3VGNqZktCOHgvcHp6YlpjMTdKQmJKdVZyTHFVK2ZaTjJFVWVaMXpCNGxUVGpUQ0p1SWVET0VXUk9ZRUxTYUpMNVJ5RlppclM4cFYyMXRyTVBIMXVMYnd6ZGQ0czRrRm1rbzVYY09HNkpmeXplSHRFNEIwRDQ2QytVdHY1ZGszY0pac1pKZUl5a1dnRlRYTTBPTW12bWs1cjljN1AwMytMNXBqV3pzbllMS0ExaE1HSjBnS0RHbXNBRThRQld1ZkRHM2ZEZEZSbzFXWng2SlNsRUVDQVBhR3hSNkJzQUJzR3dCMi9kcSs3ZU5VakJIR243djNZMDNibmN0ZFhUTzNpcWYyNERGd2E5OFIrRkljOTZyak5ITStNY2t6ODdkb0c3eHNNd3I5Um5zWjRNd1JrcTdWcWRiVGoyV2F1SzFrSGtISDJTaDR3dDB1emZHSzFPV1BSazNTRFlmVE9EcUZTVExZSEtWMWVqYnA3S0pZbnRHWXM2U3ozRVVicnBBNzhkc3lTU29wRlQzaXFrOTRVcWNSRzRSeEdaSkdMQ1FESXFxTXdQWVhCQ2sreXA2TWZ0eXVnbkdMOHJlMVprQmF3M0MxUzFXNUl1OE96TnF2eDRZOTNtb0xQZUxiUEFQQXM2dGRpSUtFSktMMjZMaGpySnMyYlpxVXlIYVJJcFNsQVBQWnJtSzYyamZJZ3NjWWxTSmxXUFZvWHkyZGlGMUZtSTRVTE1UMGtrNDhyMUNsNWFNeFppQzJacFU1RGpTZ3I3Qmh0RzRmc0E2QThUZW9ZVnB3S2dhL0k1azUvS3prVXlmMm1sYzlMNVk2KytldDBsMzBDamI4SzR6aUVuMFlzWUJPMFVrb01YVFlURjJNTGRRNU45akNBbWZNRHp4N1B0M2xzUkRMYnNyQUh4YVhWc3gwZ0VxUjJqc3hDYllFTTgyck5sSzB5NFZCSDE0YVpvTXhPWTZEdjluN2Y3NldGMGR1TTRQdjczUXlDSEh1amxXTVVxenk1V1paRHUyS2NHcmVKalVqbUwvOHRoZEcyKzdycW0vVm02SWp0YlRvT3RoN3RHWER0SFRqYWovYlEyS0s0M1htSGVtSDVrUzJzWU5UbHI4K29wcUF6cC9DZmFNWkhMbTdNNm41RlVSL0NxY29iN0NJQVhjTnVnaUhUYitRNngvY2xtSkhIRzY3Yll4RlpvdjdjY0VaN1kxRC91VHpnb0JYRFVycGxVenVyUXNWUW9uVElySHA5clVUQnYwN2xEaHR2MDMyL2Rxd2ZUeXorSTNsWldHYWh2clU5bzRZd1A4QW5vNXJmWlBTK1MwUnFQZFR4Z21sYXFrMGJFVTBOMloxQjl1SEo4cS9iQzVsNVl6YmRjbnhlUzZhM2lMbExndkJReFU1VXhvdUNJUk50R01WZTVzWklEb05pQUJnS08yKytqWGZPUXR4M1hjSHZqTnBEVW9OQ21nQUEvekIxZFdNV1BSejUwK1JQVGZraXo1VC9UTmMwV3NzM3hGd0tzOGpPVHArQmxBcVdPUWNnZEZPR0VXWHo5WlVDUnQ5WmxaTmhJdWF2S3lFQTRrMlNRa1FkT1dLNnJSZFJEY3BEZHZsVE1BYmdBOU5VeGZReVdkeTlvV3FVTkswQTZqd3orM0cxL2s3ZGJQbTdsK3k1aWlqOHI0dUxXRjFNMU15Qm1RbGVGZkNQWmcwL1kzaDM5ZzVpV08yRktZeHF6VmxrVTNBbEVkbHBwd1ptb2tVNGR3QVk3Y1RDUDdnMVp2cFpiaDl3a21JOEkvZU92dHhydy91Sjh3Tkh5bFk3TlhLV1Y2ai9Eb0lOZFBTUncxREcrMkRJWWtXekEvNC9DVHUvanNBZjAyMWtNbmhHTkpMbXJrOVp4N2JYYkhYQ1ErY1BHeU5oODVUT1duOTRsazYvbXlHdnNmWm9ocjdjV1J1YVkxSnBONDJ3Zml1MlB5Vy9HTHRacGo4VjY3aWlLWGl6ek1RL2RtY0xTWlV6dVdlN1J2YVhLdTlQUHRTN2NrUytmYU5HVlk3bkZZNmlzczhxQXBObkpScG5EZVc2QUFSMUN2M21nZHd0d2x3Wml4MFNCcWp5R2xwVlVVNXI0Y2xGTlFQVHhHUTU3ektwTUxSc2NjQTZqWEg4bkpwU0h1RThXYkV3Y1REZDIwa25QcmNqa3VNNEFOWk5Nc3l3YXRHSHFCUmF2VkZYVEpvbVZzWlFRU0tBUVcyeXozdjZsY1NCVksyMURTaEdWUU9HUkpwbVZ5SnExTThkNzVBcjI2aXJEVVRubDFIOXZvdzMvUVZpYndybmpzc0dPdmN3NTY0dGNtOU8xeTFST1BYSmFxSUdINVhTS05lZjRpdktqWWR4QVJaV0NyczFIQWJiZ0w1TGZvSWFOdDZDUzhuN1ZkQTFrUnJoWDdQek83L0FOSzlBOXZiRFdmNWU1VHhkaVUrai9qaGp0ZnUxUnRqeWNZVml6UWMrN3JFa2FIc2JhSWxHa2d2Qnk1Q2Q1NHVXU2JLcUhZUDB5RHVaRlVDbktBOVEwREpJajEwRUdtQ2E2MjYrc28wbHU0bmpqbEJLRS9pQXBXbnNxUHBHT1VmdzZmdi9uKzhOZHRRcFhETEdWNy9BQ0RBY3RzcmNkSFp1NEdxOU51clVwaEVPd0YwcFdGVU1YL3Q3akpxZ1A4QUFOVWY2dUVpZXlZL3d5L2JIamNGL2JCS3Z0SE5NUDQvaUxFL1ZkWXkyV0RjWk9URVErS3kvd0RwdWJiVkd2M1dvTWJncmJLMlduVmhtL3NVeENVcHkrdWl5cFFFN0ttTlJTS2JxT3k4dWtpY2Q5aDZDWDQvRHBxM1BTa0sxOUllSkNqOXZyT05WZjhBY1h1SkY1WXNJd2U2WjVLOFA1ZXpHNmUyR2lheGptY3NyNU5CTkt2MWVRa3pMS0ZMc21WbkhuV0F3N2xIdDZrMWZjN0xEYVBLY2xWU1RqVGR5L2FUYnJ6RGFiZkNOVXMxd2lLTWg0aUJTdFI5Skk5b3g4NC9Qa3lFZzBucDlVcEUzZG1uNVNaWEtVZndxU0xweTlPWGZvSWdCMVIxaHp1TWpYRTVsNldKKzJ2Wmo2bk9TYkpOczJHMjI2THV4VzhLSU9uSUtLY1NUMGRKUHR3M1gvSGRvaG5zdmxTNXJJQUpYMWtpSXRzc0pRTVBoWk1uU3l4Q2lPK3hmSWNOOWgxZG5wWFpsTE9TNFljU1B0OXYzWTFFL3dCdzNtQTNQTkZwdGRlN0RISlgya0lmNFIxOVp4dEphazhiWkFnQjBLbVVQNGRQK05YTmpWMGFrMXg1T3VPbkN4WE9TTXQ0encvR1JremsrOFZ1aHhFek10cTlHU2xvbEdzUXdkelR0Qnc1YlJxYnQ0ZEpEMUt6ZG1xY3BSTUc1VXpEOW12R2E0dDdVQjUyMGdtblQ5MkpmYU5qM1RmWm5nMnFFelNvaFlnRlJrT3JVUlU5UUZTZWdIQUU4c0hhT1NlYS90eTRralZVWDdPQnVtVnVUVmlLZ2NGRTA0ZkhPT0h0VnFMMVF4UkVoMnJtelpCSWRJMjRoNW01ZHZzMVlQTDNsMi9LRzhYakxWcEZnUkRYK2NodXZvZGVQdTdBN2NFZVRkYmFFWkdObjFkbVEvZGhuZTQvY1A4QVQvcm9GeE5ZVkJ6NlVQeDc1QThRdWM3ZE02RlVwbHdlOGJ1UXNpa0ErR013cG5oM0dNWXUzekI5d0tsQ1VISnNiRnZIWng2SnQxenFkUlRBcGpybFpWM1hhTnc1WkM2cnU0alZvYzZVWkNXYlBJWjBYaVFCbjdEQ2JrVGEzY0Y5L3dDVXJkLzZxZFo2K0F4eEhqcGp5SjRzOHVKZXNXMjNZWG9xT1duRnpOaXhoRXliZ2NrNStocG1hYzNINnpkVUFqMnNlRXJUSktRTTBqM0M3dDY2ZEE0ZEpvaWtrWWlRMHpZMjY3VHVSczVHQ2xpUWdwbTRGU1NhVkFwL01hbmdNWlZjN2IzY2VvM0lxNy9ZUU5PYlVxMTA0WUt0dXpsVVJWVnREU2F4bitVaktnTldOU3h3NHorblgvZmNmMzZMQnd4amZYcnhuRi95SWFTN2NZdXdSa3BvajNJMWk2VGNIS0xBVWZ5bWsvSE1oYkNZZGhBQU04WWdIVVE2anFuL0FGY3RDKzIyOTVTb2pkZ2YrYlFCMDluVmphSi9iSTVqaXRPZWQ1NWFsT2QzYlJTS08yRVRzVGtwNEE5TEFaOENjWkRySVRlUVdVTHNYMUJPOHZVRGZqRGYvbldQUnBXdkhHOEMxSk1BWHEvZmhqM3NkMnRsVnVjYmlFZWdIZmNLaThZc3hFd0ZBSEVlNVJmaDhUQUFpY3BSKzhldXJUOUxKMGgzUm9meEVmdnhyTS91SGJGTmQ4Z1crNXgrQ0NkaWVING1qSFN3N2VBUERHeDczQzcyRkI0UzVqbVUxZ1JjdnFmOUNZbk1ZQ2lMcWNjTm85SUM3aVhjNGc0SGJZZC91MWRmTmQxOEp5N1BLRG1VQUh2STdEalZiOHN2TDQ1aTliOWoyK1FWakZ5enQ3RWlkdjRsNlIwR3ZWajU5R2YzNElzbWJNRENBSm9LS2lVQkVkdmxFQ2dJOVIzRVIrL1dKODdhcFZJR1lQN3NmU3Z0NmVUdHJ0MDZCOW1OUnY4QWoxNC9DSTQ5c0xBWk0za3MxaW1KZzV6QVBWUHY5TWdJR0g0bEVpWWdHc2ovQUU4dC9LMlNKeitLcEo5L3Q5MzE0MEQvQUR1YjhkejlYTHVBSEtBS24wcUsvaEgzKzNHbm9BMkFBRDdQM2Y4QUdySXlyWEdFV09nanNBanY5Z2lIOGcxeGt3N01jNFJ6eXl5TnlRdHZLT3BZTUxqS25aYXdkWTdsVGw1R3QzREVUeS80eGthZkx5bzF5ekhMbGRDR2JSbFF5TFJDVjV4SkJIdWdYVkVaWTRDWVd6WXEyZzdjYmpjMzNkTFNOUTltekFVN3REVUQ4Ujd3SVBVY1pVY2hiRnlCYWVuYzIvWE03VzNOaXhNd2xBdUMwZEhJWDhvTVlaRmRhQ3JMcEZSVVZyZ2dPSG5abnpsanlwNWVva0l2UUlENlJ4SndBOEtJSGF1NnhpOTZySTVqc3NTcVFmVHJzTEpsRlFqRUZDYmh0QUFUY0RGT0dydzVvaWoyYllkdjViSGQzR0pYZTRHZkZpR2pCNHFhS3hIZFkrRWFnRFFERHV3ZDcyK24zSnpxU1J1NTlZYnQ2dUk5bUdqN0Q5LzlOQVdXSnpMRmJaaXhUVHM1NHJ5RGg3SU1hbkwwckpWU25LYlpHQncyTXBHVHJCWmlzczJVNkdidm1ncWdzM1dLSlRvcnBrT1FRTVVCQjN0MTdQdDE1SGV3RWlhTnE1WlY2Q09CNGdrSEk1SGhqd25nUzRpYUtUd0g5dnR3akhHTmNzVmtSbGVOZVphM0w1QTV1OEJZK05ReFczQzJzcUM0NVQ0Q1J0RUhLNGp5RityWHhQR1NPWk9heXpSc0thYW9xcHZtU3lTMy93QnpySWVvR3dRWHF3ODRiVERxdExpcENhaUNqTGs5U3paMWNNYTA0MUF5S2tubnBQejNlYkJMTHlqZlhZc3RzdVA2a3ZsQ2JUUlcwalFFWmpxcUVxR0duVnFOUUNNTko0ZForbXN5MW1iaWJWWWE5ZTduU0phUmg3dmRzZlF6dUt4Z25hVFAxblRxaVZWOUtPMUh0b2NVbGc2YnMza2tpbVZzNFhJWVJCRlh1UktIYlRlUGRRNlpXMXlyeGFsQng0QUFVeUdWUld2SHR3LzlRdVdJTmh2MW1zb0RiV0V3R2lNdVhZQlZVRm1MTVhHczFhakJhVjAwQkJBNGI3bmVCajhodUdXWWFVeWFnN240K0NOYXF5bUFkeC9yZGJVSktOZ1QrWW85NmhXNXliQjFFQjIrM2JVWnpqdG42dHNNMXNCM3dOUTlvSVBXT2l2VFRGZ2ZLNTZnL3dENXY2MGJSdjBqYWJScGpGSmxYdXlLeTAvcHlITWtDcXJYUEk0K2VGSnlpSlNnMmRpWkI2eVVVYXVFbFFFcHlLSUhNUlFod05zSlRrTVVRRUIrQWhyRVdSR2piUS9qR1BwMnM3KzF1YmVPN2liOG1SUXd5UEFqdEFQMGdZc1BpZGx4RENYTExDbVRDUEFTam95N3hEYVhNVSt4UmlwSndSaThCUVIzMlRLa3QzRCs0dWlQbEsvL0FFN2ZJSm0vaXA3YTlIQTlPTWIvQUpuK1RZZWUvUzdkTnJoRlovSTF4bXB5WlNHSnplTUhLdVJOT3pHeEQzbk14UTdEaHZqbUpMSUpsYTVJdFZmZUpPQ0tENDFZK0paRm5DcWZMK05OVS9qSDRoMUg0RHE3L1VxK1JPWFVpVTV5TU9qb1VxZXJxeHFlK1FMa3k2dnZXdWUrWmF2WTJyQWlvR2NpU0N2akhEVDIvZmpFcG0rMHg4eElyQ3hjRVdSQWhFRXhEdURjZnc5TnczMk1JL2NHKzJzZEYvT25CL0RVZmRqZVBmazJHME5FK1RDTTErajM0M2UremRqOEtieFd4TXpNMjlPdCtqb3AwdVhzRWdtVmZJbmVtT1lQaDNHSXVYZmZxT3NzdVVyWDRiYUlVSEFKOXVZNlQwWSthVDVndDdiZS9VcmM3NE5xUnJnamhUd2dEK0Zla0hvdzVqZnB2OFAyL2Z0b3BOZmZpaWVHQWI1bjhpNnRqS3VSK01vM05DZUhjdlpGY3hzZlJyV1dsclpBanFxL2NUTWF6aVg5NGhrbTY3ZU1xTmltSEtFUWQwNE1nWHZlL2xuS2N2Y1dHM1hjSWJkVnR4TDVWMUo0RzBscVVJcmxTbVlOTS9hT0dMVDlOZVQ3N2VMbVRmNTlzL1V1WGJJSHpvek9MZXBaVzAwYlVISlFqWFJRUWFhU1FHd0RWd1kzUGovanBIajlpaUJyMWE1NTg3WmQycFo0T2gyMjAyYkhPTjJnK3JqOGs4akl5Sm1qcGhVcTdHeEN5ajlSSkVqYjFVeXVrMktxb29VaHRIUHA1eS9id0xKelB1MFlYYkxhaGs3eDd6dGxIUUsxUlJtRFpDbGFBNVYwaW5xbHpsTHpEdWNleVdGd1o5dWlxSVdLQkNvWUw1Z09wRmRxVTA2bk5TRnJ4TlMzREJPR2FkeDZ3L2ozQ3RDYkdiVlBIZGFZMTZNRlVwZlZQbEVBTXZKek1pY3ZSYVZucFZkZDY3VStLcmx3b2NlcHRSKzdiamNidnVNdTVYSi9Oa0lydzRBQlZHUUF5VUFWb0swcWNDRnRicGJRTEJINEZIMm1wNitrNHRyVWZqM3hOTDdNTEFJYzArSWNubnh0Uzh0WVl0S09LT1crQ25EMmJ3WmxVVVRxUnlobnBDSnoyTnNpTkd4ZlUySEdGNFlsTTFmcys0RElIT1Z3bDg1QklvVWN0Nzh1Mk05anVLZWJzZHpRVFIxcFdsZExCbEJjYVNkVkZJcjlHSTIvc1d1Tk04QjAzY1pxcDQ5WFFUVG82Y0MveEN0V0x1UkdjSE01a0F1UU9Qbk1QajVDQlhzZzhUU1dSR3ZVdXFuZHlLMGhaOGlVV0FpVzdacmtTZ1pVZlBrVlR5eDFYcVJ5Sm9GRXFDKzUxV1hNZkpzZTAzTVc4MnJHYmFKS21HWHcxeUdxcWFpd3BtS3NBRHhGS2dZTWR1OVNkMHVPWFg1UWNLb2swaVlFQm1rS3NHUWx0SGRvUUtCV0dWQWNxMUxqSHZMT3ZaZHkxbFNsUkxDUC9zL2p0UnRUSG1WNUNUajIwRFpNbXZrV0NyMmh3cWJ4MDJkdm4wUTFlSEs2OGJkWkVGZzhmbEJRREo2RGJmY1V1N3A0OUkrRlNsSHI0aVJVaWxBUlE0TDk1NUJ1T1hOaTIvY21tWitZYmt1eld3UVZoVkdvcmF3N0t3WmFOd0ZDU3BxUWNJaDVGZXcxaUxKRjhzdVQ4YlpSdURldTMrWmYyaG13cmlOYWthODFDWGVLdTFrb1Y0a2dmelIvbVVNS1k5NXcySGJmcHF2YjMwMjJ1NXUzdkEyVWpWNE1ldzUrYVBzR015ZVZmbng5Uk9XZGh0ZVhMcUV2SmF4Qk5XcTJXb0dZN3Y2ZTFNai9BQk1lczRIRXYrUFhDQzVRVS91amswZ3BIS1lwaXhsZjNLWXBnRURGTjZjQUF4VEJ1R215K21XM3FLcTJZNmFOL3dDN2lkdVA3Z1BPbHpHWTViYXFrWi9tUVovUnR3dzBIT3Z0Y3VPUzJBOEk0M3YyWk1tSURnMnRLUUVVc3laUVIxYklZeUxkdTNsWndqaG1vQVNMWmsxS2lVVWhLVVNmRUJIcm9qM2prMkhlTE9DMnVYeWhCcGtlbW5VNjlYV2NVbDZYZk5QdkhwVHpOdW0vY3YybExqZFRIckhteDVhTmYrWmFUQTE4d25KVXBUcDZGZ3V2OGVxQWNTQ2Fwc25aS1dTU2RwcTlpa2JYd0JVcEZDbk1VNCttM0FERURxTzNUZlVCRjZaYlpDUktHclE5VDU1LzZ1TGx2L244NTMzRzJlQ2EzcHJVaXV1M3lyN051R05TWEZYRndZaXhuQTFkZnVTUWdJYU5pa2xsdTFNUmJSYkZKbW1vcjJsSVFvaVJBQk45bStyU3M0QmF3SkVQQ29wWDZ1czQxN2N5N3BKdlc3eTN4L3FTdXpVN1dOZXBmc0dLbXlOejh4akVabW11TE5mZHU0ZlBEMW9zenBnMnFLVVFxMHZNU3RkWlMxUGNSam4xU0FUckd4dlpBV3pic1VSS2RWaTc3enBrUkF4NHlmZnJYNHh0cmhiL0FIOUtjRGtTdW9aMDBuSTlkTVdCcy9wQnpDL0s4SHFGdVVRLzdRSjFNd2VPcFZaakM0S2lVU3Izd1FTRUxkSUhUZ0ozRnJzMkFtMUF5VHlzckVabS93QndTMVA3ZlgrTUdIS1VXT0hKcm12V29ySnllcFpIZjA2VC9Sa3pVNmpLSnFQVlpWd2tFYkVOaWlkSlV5cFRxaVQ4aThsWHUrTCtxNysvbFd0dFZwSjZBK1dDRHA3aU9OWmFnR1FPZ0dyZEF3MDlVL1VibDdicDdubFQwc3JGeXJkcEVHai9BREdFcklBeElhNmpNMGVtU3RlOG9lbVhkNG54eEU0dVdmRjhqY2M5WitzTEhJWEs3TTZMSlRJTm9ZcGlOYXg5V20remlId3ppd2k2WlhUR2cxZGN4am5WVS84QVpsSHhqdVZoQXZnUlJJdVplWUl0d0VlMmJZbms3RmJFaU5LbGptYWxpekFQUmptQXhKRmZjS1QyNnlhQ3R6Y0hWZHlac2VIdW9EVDZCZzU5Q3VKVEUwc0xFMHNMRTBxZE9GZ01PV1BDVEdYS1ZPdVcxZVRzR0tzOFkzVU8reEh5RXh3NitrWklvRWdBTENWcURzZ2xiV1dwUEZGemV0aHBFcTdGMFV3L0tSVFpRcEhzWE1sM3NvZTJBRXUyVGYxWWpRQnhRaW1yU1dYaitIajAxeEhYdTNSWGJMTDRaMDhMWm1udXFBZmZoUS9JMWpsaW5WMWpqMzNFTVVUN210d2M1T1R0YjU5Y1JzZkkyMm5LeTAvV1hkTWtMZnlCd2FFTEt1YVZZelFEeE1Ba3lObnpKdThTS1pxc2dLYVluYzdueVR5OXpsQ3Jjc1NpSGRDdFJhc0hZclFkNmtzanFyMUM2dUpwWGlPR0R2a1AxWDVqOU90d005NG54TzJ5VUVnMUltdlRYUlFyRzdKcExkQW93eVlFY0NMd1JrYktwSkozTjhUY2g0UXo5dzl4L2lPeVIrTjhkNHN0RUZZTFVzOHFOTXJUTEhWVm5JdDZDVnJyMTlrck9xK1BLSFZkQzNGdW1RaXlDYnBUdkN2cjNZT1p1Vzc5b0xtTWkwakZBbjVmVlFVY0ZxNTk0MEpIRVZybGl5SDVtOUwrZGVYVWErVXdjNXp6RnBycG11V3k4M1VUNVNxc05CRitXb0FCclRJRFBCR09lWU9Sc2MyN0NtTU13OGVuNDNiSmNWV0hsaW5hZEtKb1VhdXlGcHNiS0FUZzRxU3M3ZU9KWXAydHB2UWR5ekZGY3J0QnFRVE4wM1FpVW90VHVseERMRkJORFIzclVodUhUd3BtZWpqeHd4ZzlPOWszZmFiM2U5bTNNbTJ0V1VLclFIdmxtMGtsaklDaTVhZ1NoSlVpb0JxTWRrUjdoTlN1Q0xVYXJqMjJSSm1YSTZrNEZuMGJCR01KSHlFdDZrc1J2WVl4ekIyQXpGT01WU2pBV0s1TXM0TWtrb1F4Mnh1OEFEbTIzdUs1cjVZSkFkUWV3TldoNGRuRDY4Y2J0NlFibHNaaitOblVyTmJ5U0lRb3pNV2pVdVVoTlB6Rjd4QVA4dVBVY3Y4QVBITERHT2VNYzBYQTJIVmIzUzVpdHg5c20zeldsMk9iQ1VjUmw2Z0k2eVVVdHFZdGxLeFRwdWFxRDV5ckd1WlZacTFTV1JNcXFvS1pPdy9YYzduZElieU5MR1BXaEZUbW82c3N3ZnUrbkQzMDk1YjlQdDI1WnU5dzVydnZoZHhqYlNoTWN6MHFHN3dFYnFwNkJRaGowa1V4V3VjV3ViblV0bmRueXp6eml6Q0hFR3gxV1hocTR5bmJuQjFhMG9TS1VyWDUrbVQwZEpWZEN1MlV5UlR0M1VmS01GWmd4M2dBVWlhYXFhcGdGeGFjdDh5OHhYa3RncXM5ak1VQ0tBbVhBbXJCbEk3d3oxc0IwY01lMFBQWHBweVB0V3o3cnk5YWx1ZGJRM0h4RTNtWEZIRGxrUW1PWkhoRkluSUhsS2M2TXhEQ2hwakFGeHl4ZXFwVHFYd2F4V2EyMmF1VWxiSE1yN2lQSVNtek5Ob3FkS1BZSDB1bEZZdWhKbEJXNTVjYVFibHlRV0NDUGhoZkkzS0NxeWZ6ZGxsMkhKdXljb3hLZWE1dk0zS0phaTFBWUZ3YUZRWkkzZFZwWHJ6QXBxRlNCVWZPM3FEdWZQRzZYRTIxUi9EN1ZPeW1sVmNBaEFITldqalk2bTFFaWdGVHdQSEROZU1YRFNqOGVIOWl5Sk1XR3c1azVEWkFRYmt5Wm56SVNwSGR3c1pVREdPbENRREZJZnBGRXBURlEremVJaTAwVU5pbE11WmRVUEtMSGY4QW1lNzN0STdSRkVXMFFaUXdpaDBBZ0E5L1NyTlVpdmVyVGdNQ2xqdDBObldYeFhEZUpzOC9kVWdlN0JqYUdnQU1oaVJ4TkxDeE5MQ3hOTEN4TkxDeE5MQ3grSy9nOU90NnJ3K2w4U25xUFAyZUR3ZGcrWHplVDVQRjQ5KzdmcHQ4ZExDd2g3a3pFK3l0TjVYY01KVzBRdFE1R0xMbUI3T2NMRzJXbmVZV3NsNXpkaHJTaHhYcjlsV05NQTQvOGYxcG9vNDMyN09tMnJRMkIvVWVQYnE3YXBmYmE4SDhnZFg4WkVsUHF3TlhTN0UwL2ZiVGNWNnBEbmwxWlk1L1JlTU9mVjQ5cy80OSs1cHpUZ1lWUW9HWlFuS1RqREtaQVZRU0VUQ2dtYytWTWVZa3lKc1VOd042dDZvY1M3YmlIUWROSmQ0MmVJMDNYWjRKWk9reDNZWFBweWhGUHJ4Mmp0cFNmOXRja0hMakg3S2VMM1lzaHZnWDNNUVJCdVQzQnNCbllGZUNtTWdUaFl3K3FLUHUwNVJjS05FOHhrUkxON2ZNWXUvZDM5TmVhNzd5SGtSc1RhcS8vTW45MkpFMm5NSFRkOS8vQUVvOGNVdDNHWGtZUm1zOXp4N2xuTFdXaVNGT1plSjR6Y1lUVUpkWWdGTUt5WlZLTlI4djNqdE1udUJmU3VremdPM2FPKzJ2Vk41MktWcWJWczBFVW5XOTJHRmVqK3NLWVlHMmtVZjdpNUxML3AwNnY0VGlyOEpRbnM2UUdWR1VkWmJndGQ4L3BQQStsejNPeHBtWmxlM012OEREVUcvS0d0VldCSk5kNENKL29qUWpycjgzVGJUL0FIaC9VaVRiR04wbmw3WHBHU0czUGRxS1UwRXlVNGNPampsanBacnNhdUJHMnFicklrSDI1WWVrejlKNlZ0NkgwL29mQWw2UDBuajlMNmJ4bDhIcC9EK1Y0UEh0Mjl2eTl1MjJxck9xdmU4V0NNVXBsd3g1T3VNYzRtbGhZbWxoWW1saFkvL1oiICBjbGFzcz0iZ2liX2xvZ28iICBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlZmF0dXJhX3RleHQiID5lLUZhdHVyYTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlZmF0dXJhX2NhcF9kaXYiPmUtRmF0dXJhPC9kaXY+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjZXJjZXZlIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFkNnB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaXJtYV92ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPlZlcmdpIE5vPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZmlybWFfdmtubyBhbmQgJGZpcm1hX3Zrbm8gIT0gJycgYW5kICRmaXJtYV92a25vID0gJzQ5NDA1MDQzNzMnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdmtubzIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV92a25vIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGZpcm1hX3ZkYWlyZSAhPSAnJyBhbmQgJGZpcm1hX3ZkYWlyZSAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPlZlcmdpIERhaXJlc2k8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdmRhaXJlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkZmlybWFfdGljYXJldG5vICE9ICcnIGFuZCAkZmlybWFfdGljYXJldG5vICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+VGljYXJldCBTaWNpbCBObzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV90aWNhcmV0bm8iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRmaXJtYV9tZXJzaXMgIT0gJycgYW5kICRmaXJtYV9tZXJzaXMgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5NZXJzaXMgTm88L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfbWVyc2lzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpcm1hX3RlbCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRmaXJtYV90ZWwgIT0gJycgYW5kICRmaXJtYV90ZWwgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5UZWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfdGVsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkZmlybWFfZmF4ICE9ICcnIGFuZCAkZmlybWFfZmF4ICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+RmF4PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX2ZheCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGZpcm1hX2VtYWlsICE9ICcnIGFuZCAkZmlybWFfZW1haWwgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5FLVBvc3RhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaHJlZiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbHRvOjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlybWFfZW1haWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZpcm1hX2VtYWlsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkZmlybWFfd2ViICE9ICcnIGFuZCAkZmlybWFfd2ViICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+xLBudGVybmV0IFNpdGVzaTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImhyZWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ibm90KGNvbnRhaW5zKCAkZmlybWFfd2ViICwnaHR0cCcpKSIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IidodHRwOi8vJyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJ3d3cucGFyc29ub3RvbW90aXYuY29tIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJtYV93ZWIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNlcmNldmUiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWQ2cHgiPg0KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhdHVyYV9iaWxnaSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiR1Ymx2ZXJzaXlvbl9zdHIgIT0gJycgYW5kICR1Ymx2ZXJzaXlvbl9zdHIgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5WZXJzaXlvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR1Ymx2ZXJzaXlvbl9zdHIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYmM6UHJvZmlsZUlEICE9ICcnIGFuZCAvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPlNlbmFyeW88L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJbnZvaWNlVHlwZUNvZGUgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYmM6SW52b2ljZVR5cGVDb2RlICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+RmF0dXJhIFRpcGk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOkludm9pY2VUeXBlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJRCAhPSAnJyBhbmQgLy9uMTpJbnZvaWNlL2NiYzpJRCAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPkZhdHVyYSBObzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYmM6SUQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlICE9ICcnIGFuZCAvL24xOkludm9pY2UvY2JjOklzc3VlRGF0ZSAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPkZhdHVyYSBUYXJpaGk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw5LDIpIi8+LTx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw2LDIpIiAvPi08eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKC4sMSw0KSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+RMO8emVubGVtZSBUYXJpaGk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw5LDIpIi8+LTx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw2LDIpIiAvPi08eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKC4sMSw0KSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+RMO8emVubGVtZSBTYWF0aTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2JjOklzc3VlRGF0ZSAhPSAnJyBhbmQgLy9uMTpJbnZvaWNlL2NiYzpJc3N1ZURhdGUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOklzc3VlVGltZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZyguLDEsNSkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpEZXNwYXRjaERvY3VtZW50UmVmZXJlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2NiYzpJRCAhPSAnJyBhbmQgLi9jYmM6SUQgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+xLByc2FsaXllIE5vPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9jYmM6SUQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9jYmM6SXNzdWVEYXRlICE9ICcnIGFuZCAuL2NiYzpJc3N1ZURhdGUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+xLByc2FsaXllIFRhcmloaTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2NiYzpJc3N1ZURhdGUgIT0gJycgYW5kIC4vY2JjOklzc3VlRGF0ZSAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLi9jYmM6SXNzdWVEYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw5LDIpIi8+LTx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw2LDIpIiAvPi08eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKC4sMSw0KSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpPcmRlclJlZmVyZW5jZS9jYmM6SUQgIT0gJycgYW5kIC8vbjE6SW52b2ljZS9jYWM6T3JkZXJSZWZlcmVuY2UvY2JjOklEICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+U2lwYXJpxZ8gTm88L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOk9yZGVyUmVmZXJlbmNlL2NiYzpJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpPcmRlclJlZmVyZW5jZS9jYmM6SXNzdWVEYXRlICE9ICcnIGFuZCAvL24xOkludm9pY2UvY2FjOk9yZGVyUmVmZXJlbmNlL2NiYzpJc3N1ZURhdGUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5TaXBhcmnFnyBUYXJpaGk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOk9yZGVyUmVmZXJlbmNlL2NiYzpJc3N1ZURhdGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsb19ib3NsdWsiPjwvZGl2Pg0KICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIGJvcmRlcnNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIwIiBjbGFzcz0idGFibG9fc2F0aXIiPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICA8dHIgY2xhc3M9InRyX2Jhc2xpayI+DQogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzYXRpcl9zaXJhIGtvbG9uX2Jhc2xpayIgd2lkdGg9IjEwIiA+DQogICAgICAgICAgICAgICAgICA8c3Bhbj5TxLFyYTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX21hbF9rb2Qga29sb25fYmFzbGlrIiB3aWR0aD0iOTAiID4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPk1hbHplbWUgS29kdTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWFsIGtvbG9uX2Jhc2xpayIgd2lkdGg9IjM1MCIgPg0KICAgICAgICAgICAgICAgICAgPHNwYW4+TWFsL0hpem1ldDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWlrdGFyIGtvbG9uX2Jhc2xpayIgd2lkdGg9IjYwIj4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPk1pa3Rhcjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfYmZpeWF0IGtvbG9uX2Jhc2xpayIgd2lkdGg9Ijg1IiA+DQogICAgICAgICAgICAgICAgICA8c3Bhbj5CaXJpbSBGaXlhdDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwhLS0NCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX2lza29udG9fb3JhbiBrb2xvbl9iYXNsaWsiID4NCiAgICAgICAgICAgICAgICA8c3Bhbj7EsHNrb250byBPcmFuxLE8L3NwYW4+DQogICAgICAgICAgICAgICAgPC90ZD4gDQogICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX2tkdl9vcmFuIGtvbG9uX2Jhc2xpayIgd2lkdGg9IjUwIiA+DQogICAgICAgICAgICAgICAgICA8c3Bhbj5LRFYgT3JhbsSxPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgLS0+DQogICAgICAgICAgICAgICAgPCEtLTx0ZCBjbGFzcz0ic2F0aXJfa2R2X3R1dGFyIGtvbG9uX2Jhc2xpayIgPg0KICAgICAgICAgICAgICAgICAgPHNwYW4+S0RWIFR1dGFyxLE8L3NwYW4+DQogICAgICAgICAgICAgICAgPC90ZD4tLT4NCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfdG9wbGFtIGtvbG9uX2Jhc2xpayIgd2lkdGg9Ijg1Ij4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPlRvcGxhbTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCBhbmQgLy9uMTpJbnZvaWNlL2NiYzpQcm9maWxlSUQgPSAnSUhSQUNBVCciPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWFsIGtvbG9uX2Jhc2xpayIgPg0KICAgICAgICAgICAgICAgICAgPHNwYW4+VGVzbGltIMWeYXJ0xLE8L3NwYW4+DQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX21hbCBrb2xvbl9iYXNsaWsiID4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPkXFn3lhIEthcCBDaW5zaTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX21hbCBrb2xvbl9iYXNsaWsiID4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPkthcCBObzwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWFsIGtvbG9uX2Jhc2xpayIgPg0KICAgICAgICAgICAgICAgICAgPHNwYW4+S2FwIEFkZXQ8L3NwYW4+DQogICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InNhdGlyX21hbCBrb2xvbl9iYXNsaWsiID4NCiAgICAgICAgICAgICAgICAgIDxzcGFuPlRlc2xpbSBCZWRlbC/DlmRlbWUgWWVyaTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWFsIGtvbG9uX2Jhc2xpayIgPg0KICAgICAgICAgICAgICAgICAgPHNwYW4+R8O2bmRlcmlsbWUgxZ5la2xpPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJzYXRpcl9tYWwga29sb25fYmFzbGlrIiA+DQogICAgICAgICAgICAgICAgICA8c3Bhbj5HVMSwUDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkludm9pY2VMaW5lIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZmF0dXJhX3NhdGlyIj48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZhdHVyYV9ib3Nfc2F0aXIiPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgaWQ9ImFsdF90b3BsYW1fdGFibG9zdSIgYm9yZGVyc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjAiIGNsYXNzPSJhbHRfdG9wbGFtX3RhYmxvc3UiID4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iNTAlIiBjbGFzcz0iYWx0X3RvcGxhbV9jb2wxIiA+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteWZyYW1lIGV0dG5fY29udGFpbmVyIiA+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldHRuIiA+DQogICAgICAgICAgICAgICAgICAgICAgRVRUTiA6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2JjOlVVSUQiLz4NCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteWZyYW1lIHlhemlfY29udGFpbmVyIiA+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ5YXppX2lsZSIgPg0KICAgICAgICAgICAgICAgICAgICAgIFlhbG7EsXo6DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpQYXlhYmxlQW1vdW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJkb3Zpemlfb2t1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6IiBzZWxlY3Q9IkBjdXJyZW5jeUlEIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJkb3Zpel9rdXJ1X2dvc3RlciI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhbHRfbm90bGFyIj48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI1MCUiIGNsYXNzPSJhbHRfdG9wbGFtX2NvbDIiPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXlmcmFtZSIgPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWx0X3RvcGxhbSI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZhdHVyYV9ub3RsYXJpX3lhemRpciI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGlwIiBzZWxlY3Q9IicxJyIgLz4NCiAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImZybWJhbmthIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3dfbm90IiA+QnUgYmVsZ2VuaW4gc2V2ayBlZGlsZW4gbWFsbGEgYmlybGlrdGUgYnVsdW5tYXPEsSBoYWxpbmRlIGF5csSxY2EgPGI+U0VWSyDEsFJTQUzEsFlFU8SwPC9iPiBhcmFubWF6LjwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93X25vdCIgPlQuVC5LJ251biAyMS5tYWRkZXNpIHV5YXLEsW5jYSA4KHNla2l6KSBnw7xuIGnDp2VyaXNpbmRlIGl0aXJheiBlZGlsbWV5ZW4gZmF0dXJhIHTDvG0gbXVodGV2YXPEsXlsYSBrYWJ1bCBlZGlsbWnFnyBzYXnEsWzEsXIuPC9kaXY+DQogICAgICAgDQogICAgICAgICAgPCEtLSAgPGRpdiBjbGFzcz0icm93X25vdCIgPjxiPkhlcmhhbmdpIGJpciBpaHRpbGFmIHZ1a3V1bmRhIEtvbnlhIE1haGtlbGVtZWxlcmkgdmUgxLBjcmEgZGFpcmVsZXJpIHlldGtpbGlkaXIuPC9iPjwvZGl2Pi0tPg0KICAgICAgICAgICAgPGJyPjwvYnI+DQogICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0icm93X2JhbmthIiA+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3dfYmFua2FfY2FwIiA+DQogICAgICAgICAgICAgICAgSEFMS0JBTksgSEVTQVAgTk8NCiAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93X2JhbmthX3NlcCIgPjo8L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3dfYmFua2FfdmFsIiA+DQogICAgICAgICAgICAgICAgVFI2NCAwMDAxIDIwMDkgNTIzMCAwMDEwIDI2MDMgOTUNCiAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93X2JhbmthIiA+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3dfYmFua2FfY2FwIiA+DQogICAgICAgICAgICAgICAgQUtCQU5LIEhFU0FQIE5PDQogICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvd19iYW5rYV9zZXAiID46PC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93X2JhbmthX3ZhbCIgPg0KICAgICAgICAgICAgICAgIFRSMTAgMDAwNCA2MDA5IDIyODggODAwMCAwMDAzIDIzDQogICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvd19iYW5rYSIgPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93X2JhbmthX2NhcCIgPg0KICAgICAgICAgICAgICAgIMSwxZ4gQkFOS0FTSSBIRVNBUCBOTw0KICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3dfYmFua2Ffc2VwIiA+Ojwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvd19iYW5rYV92YWwiID4NCiAgICAgICAgICAgICAgICBUUjUwIDAwMDYgNDAwMCAwMDE0IDU0NTAgMDI1NSAzOQ0KICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICA8L2Rpdj4gDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3dfYmFua2EiID4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvd19iYW5rYV9jYXAiID4NCiAgICAgICAgICAgICAgICBaxLBSQUFUIEhFU0FQIE5PDQogICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvd19iYW5rYV9zZXAiID46PC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93X2JhbmthX3ZhbCIgPg0KICAgICAgICAgICAgICAgIFRSNDYgMDAwMSAwMDIwIDg3NTkgMzQ3NCA3NzUwIDAxDQogICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2PiAtLT4NCiAgICAgICAgICAgICAgICA8Yj4gxLBudGVybmV0IFNhdMSxxZ8gQmlsZ2lsZXJpOjwvYj4gPGJyLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIEJ1IHNhdMSxxZ8gaW50ZXJuZXQgw7x6ZXJpbmRlbiB5YXDEsWxtxLHFn3TEsXINCiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjk5JTsgcGFkZGluZzowcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBzdHlsZT0ibWFyZ2luOjlweDsgZm9udC1zaXplOiAxMXB4OyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsZWdlbmQgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6d2hpdGUgO2NvbG9yOnJlZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPkJBTktBIEhFU0FQIELEsExHxLBMRVLEsE3EsFo8L2I+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGVnZW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgc3R5bGU9IndpZHRoOjEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjMlO2NvbG9yOnJlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+QkFOS0E8L2I+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MzAlO2NvbG9yOnJlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+xZ5VQkUgQURJPC9iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjQwJTtjb2xvcjpyZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPklCQU4gTk88L2I+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPktVVkVZVFTDnFJLIEtBVElMSU0gQkFOS0FTSTwvYj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5ZRU7EsCBUT1BUQU5DSUxBUiDFnlVCRVPEsDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRSODQgMDAyMCA1MDAwIDA5NDYgNDA3MiA3MDAwIDAxPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgc3R5bGU9Im1hcmdpbjo5cHg7IGZvbnQtc2l6ZTogMTFweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGVnZW5kIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOndoaXRlIDtjb2xvcjpyZWQiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj7EsGFkZSBCw7Zsw7xtw7w8L2I+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGVnZW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgc3R5bGU9IndpZHRoOjEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6ODBweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IDxiPiBNYWzEsW4gQ2luc2kgPC9iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiA8Yj5NYWzEsW4gTWlrdGFyxLEgPC9iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxiPiBCaXJpbSBGaXlhdMSxIDwvYj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4gVHV0YXIgPC9iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCPk1BTEkgxLBBREUgRURFTsSwTjxCUi8+PEJSLz48L0I+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgc3R5bGU9IndpZHRoOjEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6MHB4OyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGI+QURJIFNPWUFESTo8L2I+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBzdHlsZT0iaGVpZ2h0OjIwcHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Yj5BRFJFUzo8L2I+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBzdHlsZT0iaGVpZ2h0OjM1cHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Yj7EsE1aQTo8L2I+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgPGNlbnRlcj5lLUZhdHVyYSBpem5pIGthcHNhbcSxbmRhIGVsZWt0cm9uaWsgb3J0YW1kYSBpbGV0aW1pxZ90aXIuPC9jZW50ZXI+DQoJPGNlbnRlcj5lLUZhdHVyYSBpem5pIGthcHNhbcSxbmRhIG9sdcWfdHVydWxtdcWfdHVyLjwvY2VudGVyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIA0KICAgICAgICAgPCEtLSAgPGRpdiBjbGFzcz0iZWZhdHVyYV90ZXNsaW1lZGVuIiA+DQogICAgICAgICAgIDxzcGFuPlRFU0zEsE0gRURFTjwvc3Bhbj4NCiAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgIDxkaXYgY2xhc3M9ImVmYXR1cmFfdGVzbGltZWRlbiIgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+DQogICAgICAgICAgICA8c3Bhbj5URVNMxLBNIEFMQU48L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsIiBzdHlsZT0idGV4dC1hbGlnbjpsZWZ0OyI+QWTEsS1Tb3lhZMSxOjwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOmxlZnQ7Ij5UQyBLaW1saWsgTm86PC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbCIgc3R5bGU9InRleHQtYWxpZ246bGVmdDsiPsSwbXphOjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICA8ZGl2IGNsYXNzPSJlZmF0dXJhX3Rlc2xpbWVkZW4iID4NCiAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+VEVTTMSwTSBBTEFOPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZhbCIgc3R5bGU9InRleHQtYWxpZ246bGVmdDsiPkFkxLEtU295YWTEsTo8L3NwYW4+DQogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmFsIiBzdHlsZT0idGV4dC1hbGlnbjpsZWZ0OyI+VEMgS2ltbGlrIE5vOjwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOmxlZnQ7Ij5LYcWfZTvEsG16YTo8L3NwYW4+DQogICAgICAgICAgICA8L2Rpdj4gLS0+DQoNCiAgICAgICAgPC9kaXY+DQoJDQogICAgICA8L2JvZHk+DQogICAgPC9odG1sPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9Im15dGVzdCI+DQogICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9ImZpcm1hX2FkcmVzX2V4dHJhIj4NCiAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpDb250YWN0L2NiYzpFbGVjdHJvbmljTWFpbCIgPg0KICAgICAgPGRpdj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5FLVBvc3RhPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOkVsZWN0cm9uaWNNYWlsIi8+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmlmPg0KICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOlRlbGVwaG9uZSIgPg0KICAgICAgPGRpdj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5UZWxlZm9uPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOlRlbGVwaG9uZSIvPg0KICAgICAgICA8L3NwYW4+DQogICAgICA8L2Rpdj4NCiAgICA8L3hzbDppZj4NCiAgPC94c2w6dGVtcGxhdGU+DQoNCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludE11c3RlcmlWZXJnaU5vIj4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCBhbmQgLy9uMTpJbnZvaWNlL2NiYzpQcm9maWxlSUQgIT0gJ0lIUkFDQVQnIj4NCiAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQ9J1ZLTiddIj4NCiAgICAgICAgPGRpdj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPlZlcmdpIE5vPC9zcGFuPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5SWRlbnRpZmljYXRpb24vY2JjOklEW0BzY2hlbWVJRD0nVktOJ10iLz4NCiAgICAgICAgICA8L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbi9jYmM6SURbQHNjaGVtZUlEPSdUQ0tOJ10iPg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+VEMgS2ltbGlrICBObzwvc3Bhbj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQ9J1RDS04nXSIvPg0KICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpDb250YWN0L2NiYzpUZWxlcGhvbmUiPg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+VGVsZWZvbjwvc3Bhbj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpDb250YWN0L2NiYzpUZWxlcGhvbmUiLz4NCiAgICAgICAgICA8L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8eHNsOnRleHQ+VmVyZ2kgbm8gYnVsdW5hbWFkxLEgITwveHNsOnRleHQ+DQogICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICA8ZGl2Pg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX2tleSI+VmVyZ2kgTm88L3NwYW4+DQogICAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkJ1eWVyQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5TGVnYWxFbnRpdHkvY2JjOkNvbXBhbnlJRCIvPg0KICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5SWRlbnRpZmljYXRpb24vY2JjOklEW0BzY2hlbWVJRD0nSElaTUVUTk8nXSI+DQogICAgICA8ZGl2Pg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPkhpem1ldCBObzwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQ9J0hJWk1FVE5PJ10iLz4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6aWY+DQogICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbi9jYmM6SURbQHNjaGVtZUlEPSdNVVNURVJJTk8nXSI+DQogICAgICA8ZGl2Pg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPk3DvMWfdGVyaSBObzwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfc2VwZXJhdG9yIj46PC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl92YWx1ZSI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQ9J01VU1RFUklOTyddIi8+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmlmPg0KICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5SWRlbnRpZmljYXRpb24vY2JjOklEW0BzY2hlbWVJRD0nVEVTSVNBVE5PJ10iPg0KICAgICAgPGRpdj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfa2V5Ij5UZXNpc2F0IE5vPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5SWRlbnRpZmljYXRpb24vY2JjOklEW0BzY2hlbWVJRD0nVEVTSVNBVE5PJ10iLz4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6aWY+DQogICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbi9jYmM6SURbQHNjaGVtZUlEPSdCQVlJTk8nXSI+DQogICAgICA8ZGl2Pg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPkJheWkgTm88L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3NlcGVyYXRvciI+Ojwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9InBhaXJfdmFsdWUiPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbi9jYmM6SURbQHNjaGVtZUlEPSdCQVlJTk8nXSIvPg0KICAgICAgICA8L3NwYW4+DQogICAgICA8L2Rpdj4NCiAgICA8L3hzbDppZj4NCiAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eUlkZW50aWZpY2F0aW9uL2NiYzpJRFtAc2NoZW1lSUQ9J0RPU1lBTk8nXSI+DQogICAgICA8ZGl2Pg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9rZXkiPkRvc3lhIE5vPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0icGFpcl9zZXBlcmF0b3IiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJwYWlyX3ZhbHVlIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5SWRlbnRpZmljYXRpb24vY2JjOklEW0BzY2hlbWVJRD0nRE9TWUFOTyddIi8+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJodG1sX25ld2xpbmUiPg0KICAgIDx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSInJmx0O2JyJmd0OyciLz4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iaXNfdWJsMjEiPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYmM6VUJMVmVyc2lvbklEID0gJzIuMSciPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJzEnIi8+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIwIi8+DQogICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJkb3Zpemlfb2t1Ij4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImRvdml6IiAvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ib2t1bmFjYWsiIHNlbGVjdD0iLiIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im5va3RhZGFuX3NvbnJhIiBzZWxlY3Q9InJvdW5kKCgkb2t1bmFjYWsgLSBmbG9vcigkb2t1bmFjYWspKSAqIDEwMCkiIC8+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNheWlfb2t1IiA+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ib2t1bmFjYWsiICBzZWxlY3Q9Ii4iIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8eHNsOmlmIHRlc3Q9IiRkb3ZpeiI+DQogICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRkb3ZpeiA9ICAnVFJMJyBvciAkZG92aXogPSAgJ1RSWSciPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSInIFTDvHJrIExpcmFzxLEnIiAvPg0KICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJG5va3RhZGFuX3NvbnJhICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJyAnIiAvPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNheWlfb2t1IiA+DQogICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJva3VuYWNhayIgIHNlbGVjdD0iJG5va3RhZGFuX3NvbnJhIiAvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSInIEt1cnXFnyciIC8+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0Pg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZG92aXoiIC8+DQogICAgICAgICAgPHhzbDppZiB0ZXN0PSIkbm9rdGFkYW5fc29ucmEgJmd0OyAwIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSInICciIC8+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2F5aV9va3UiID4NCiAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im9rdW5hY2FrIiAgc2VsZWN0PSIkbm9rdGFkYW5fc29ucmEiIC8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IicgQ2VudCciIC8+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJzYXlpX29rdSI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJva3VuYWNhayIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRhbV9zYXlpIiBzZWxlY3Q9ImZsb29yKCRva3VuYWNhaykiIC8+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiaXJsZXIiICAgc2VsZWN0PSJmbG9vcigkb2t1bmFjYWspIG1vZCAxMCIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im9ubGFyIiAgICBzZWxlY3Q9ImZsb29yKGZsb29yKCR0YW1fc2F5aSBtb2QgMTAwKSBkaXYgMTApIiAvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ieXV6bGVyIiAgIHNlbGVjdD0iZmxvb3IoZmxvb3IoJHRhbV9zYXlpIG1vZCAxMDAwKSBkaXYgMTAwKSIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImJpbmxlciIgICBzZWxlY3Q9ImZsb29yKGZsb29yKCR0YW1fc2F5aSBtb2QgMTAwMDAwMCkgZGl2IDEwMDApIiAvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ibWlseW9ubGFyIiAgIHNlbGVjdD0iZmxvb3IoZmxvb3IoJHRhbV9zYXlpIG1vZCAxMDAwMDAwMDAwKSBkaXYgMTAwMDAwMCkiIC8+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJtaWx5YXJsYXIiICAgc2VsZWN0PSJmbG9vcihmbG9vcigkdGFtX3NheWkgbW9kIDEwMDAwMDAwMDAwMDApIGRpdiAxMDAwMDAwMDAwKSIgLz4NCg0KICAgIDx4c2w6aWYgdGVzdD0iJG1pbHlhcmxhciAmZ3Q7IDAiPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNheWlfb2t1XzNoYW5lIiA+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzYXlpIiAgc2VsZWN0PSIkbWlseWFybGFyIiAvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4gTWlseWFyDQogICAgPC94c2w6aWY+DQogICAgPHhzbDppZiB0ZXN0PSIkbWlseW9ubGFyICZndDsgMCI+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2F5aV9va3VfM2hhbmUiID4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNheWkiICBzZWxlY3Q9IiRtaWx5b25sYXIiIC8+DQogICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPiBNaWx5b24NCiAgICA8L3hzbDppZj4NCiAgICA8eHNsOmlmIHRlc3Q9IiRiaW5sZXIgJmd0OyAwIj4NCiAgICAgIDx4c2w6aWYgdGVzdD0iJGJpbmxlciA9IDEiPkJpbiA8L3hzbDppZj4NCiAgICAgIDx4c2w6aWYgdGVzdD0iJGJpbmxlciA+IDEiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2F5aV9va3VfM2hhbmUiID4NCiAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic2F5aSIgIHNlbGVjdD0iJGJpbmxlciIgLz4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4gQmluDQogICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDppZj4NCg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ5dXpsZXJfb2t1IiA+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic2F5aSIgIHNlbGVjdD0iJHl1emxlciIgLz4NCiAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJvbmxhcl9va3UiID4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzYXlpIiAgc2VsZWN0PSIkb25sYXIiIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYmlybGVyX29rdSIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNheWkiICBzZWxlY3Q9IiRiaXJsZXIiIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ic2F5aV9va3VfM2hhbmUiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0ic2F5aSIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRhbV9zYXlpIiBzZWxlY3Q9ImZsb29yKCRzYXlpKSIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImJpcmxlciIgICBzZWxlY3Q9ImZsb29yKCRzYXlpKSBtb2QgMTAiIC8+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvbmxhciIgICAgc2VsZWN0PSJmbG9vcihmbG9vcigkdGFtX3NheWkgbW9kIDEwMCkgZGl2IDEwKSIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Inl1emxlciIgICBzZWxlY3Q9ImZsb29yKGZsb29yKCR0YW1fc2F5aSBtb2QgMTAwMCkgZGl2IDEwMCkiIC8+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Inl1emxlcl9va3UiID4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzYXlpIiAgc2VsZWN0PSIkeXV6bGVyIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Im9ubGFyX29rdSIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNheWkiICBzZWxlY3Q9IiRvbmxhciIgLz4NCiAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJiaXJsZXJfb2t1IiA+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic2F5aSIgIHNlbGVjdD0iJGJpcmxlciIgLz4NCiAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9ImJpcmxlcl9va3UiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0ic2F5aSIgLz4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAxIj5CaXIgPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAyIj7EsGtpIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgMyI+w5zDpyA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDQiPkTDtnJ0IDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNSI+QmXFnyA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDYiPkFsdMSxIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNyI+WWVkaSA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDgiPlNla2l6IDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgOSI+RG9rdXogPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6b3RoZXJ3aXNlPiA8L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJvbmxhcl9va3UiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0ic2F5aSIgLz4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAxIj5PbiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDIiPllpcm1pIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgMyI+T3R1eiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDQiPkvEsXJrIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNSI+RWxsaSA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDYiPkFsdG3EscWfIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNyI+WWV0bWnFnyA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDgiPlNla3NlbiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDkiPkRva3NhbiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+PC94c2w6b3RoZXJ3aXNlPg0KICAgIDwveHNsOmNob29zZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ieXV6bGVyX29rdSI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJzYXlpIiAvPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDEiPlnDvHogPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAyIj7EsGtpIFnDvHogPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAzIj7DnMOnIFnDvHogPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICA0Ij5Ew7ZydCBZw7x6IDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNSI+QmXFnyBZw7x6IDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNiI+QWx0xLEgWcO8eiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDciPlllZGkgWcO8eiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDgiPlNla2l6IFnDvHogPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICA5Ij5Eb2t1eiBZw7x6IDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT48L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJiaW5sZXJfb2t1Ij4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InNheWkiIC8+DQogICAgPHhzbDpjaG9vc2U+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgMSI+QmluIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgMiI+xLBraSBCaW4gPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICAzIj7DnMOnIEJpbiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDQiPkTDtnJ0IEJpbiA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRzYXlpID0gIDUiPkJlxZ8gQmluIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNiI+QWx0xLEgQmluIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHNheWkgPSAgNyI+WWVkaSBCaW4gPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICA4Ij5TZWtpeiBCaW4gPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2F5aSA9ICA5Ij5Eb2t1eiBCaW4gPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6b3RoZXJ3aXNlPjwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9Im9uYmlubGVyX29rdSI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJzYXlpIiAvPg0KICAgIDx4c2w6aWYgdGVzdD0iJHNheWkgJmd0OyAwIj4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJvbmxhcl9va3UiID4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNheWkiICBzZWxlY3Q9IiRzYXlpIiAvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT5CaW4NCiAgICA8L3hzbDppZj4NCiAgPC94c2w6dGVtcGxhdGU+DQoNCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwYXJjYWxhIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImNzdiIvPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iaXNhcmV0Ii8+DQogICAgPHhzbDp2YXJpYWJsZSAgbmFtZT0iZmlyc3QtaXRlbSIgc2VsZWN0PSJub3JtYWxpemUtc3BhY2Uoc3Vic3RyaW5nLWJlZm9yZSggY29uY2F0KCAkY3N2LCAnfCcpLCAnfCcpKSIvPg0KICAgIDx4c2w6aWYgdGVzdD0iJGNzdiI+DQogICAgICA8eHNsOmlmIHRlc3Q9Im5vcm1hbGl6ZS1zcGFjZShzdWJzdHJpbmctYWZ0ZXIoY29uY2F0KCRmaXJzdC1pdGVtLCAnJyksICRpc2FyZXQpKSI+DQogICAgICAgIDx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSJub3JtYWxpemUtc3BhY2Uoc3Vic3RyaW5nLWFmdGVyKGNvbmNhdCgkZmlyc3QtaXRlbSwgJycpLCAkaXNhcmV0KSkiLz4NCiAgICAgIDwveHNsOmlmPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InBhcmNhbGEiPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY3N2IiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkY3N2LCd8JykiLz4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImlzYXJldCIgc2VsZWN0PSIkaXNhcmV0Ii8+DQogICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iZWtfYWNpa2xhbWF5aV9hbCI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJvcmciLz4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImFjaWtsYW1hIi8+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJrZXlmaWVsZCIvPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im15dmFyMSIgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InBhcmNhbGEiPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY3N2Ij4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFjaWtsYW1hIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaXNhcmV0IiBzZWxlY3Q9IiRrZXlmaWVsZCIvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im15dmFyMiIgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InBhcmNhbGEiPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY3N2Ij4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFjaWtsYW1hIiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaXNhcmV0IiBzZWxlY3Q9IiRmb3JjZWRmaWVsZCIvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im15dmFyX2FjaWtsYW1hIiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWNpa2xhbWF5aV9hbCI+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjc3YiPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkb3JnIiAvPg0KICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbXl2YXIyIGFuZCAkbXl2YXIyICE9ICcnIj4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IiRteXZhcjIiLz4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJG15dmFyMSBhbmQgJG15dmFyMSAhPSAnJyI+DQogICAgICAgIDx4c2wtaWYgdGVzdD0iJG15dmFyX2FjaWtsYW1hIiA+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9ImNvbmNhdCgkbXl2YXJfYWNpa2xhbWEsJyAnKSIvPg0KICAgICAgICA8L3hzbC1pZj4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IiRteXZhcjEiLz4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IiRteXZhcl9hY2lrbGFtYSIgLz4NCiAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iYWNpa2xhbWF5aV9hbCI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJjc3YiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRtcDEiPg0KICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IiRjc3YiIC8+DQogICAgICA8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0iJ3wnIi8+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJzdC1pdGVtIiAgID4NCiAgICAgIDx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSJub3JtYWxpemUtc3BhY2Uoc3Vic3RyaW5nLWJlZm9yZSggJHRtcDEgLCAnfCcpKSIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOmlmIHRlc3Q9IiRmaXJzdC1pdGVtIj4NCiAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZmlyc3QtaXRlbSIvPg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwYXJjYWxhYm9sIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImNzdiIvPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iaXNhcmV0Ii8+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmaXJzdC1pdGVtIiAgc2VsZWN0PSJub3JtYWxpemUtc3BhY2Uoc3Vic3RyaW5nLWJlZm9yZSggY29uY2F0KCAkY3N2LCAnfCcpLCAnfCcpKSIvPg0KICAgIDx4c2w6aWYgdGVzdD0iJGZpcnN0LWl0ZW0iPg0KICAgICAgPHhzbDppZiB0ZXN0PSJub3JtYWxpemUtc3BhY2Uoc3Vic3RyaW5nLWFmdGVyKGNvbmNhdCgkZmlyc3QtaXRlbSwgJycpLCAkaXNhcmV0KSkiPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ibm9ybWFsaXplLXNwYWNlKHN1YnN0cmluZy1hZnRlcihjb25jYXQoJGZpcnN0LWl0ZW0sICcnKSwgJGlzYXJldCkpIi8+DQogICAgICA8L3hzbDppZj4NCiAgICAgIDxici8+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icGFyY2FsYSI+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjc3YiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRjc3YsJ3wnKSIvPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaXNhcmV0IiBzZWxlY3Q9IiRpc2FyZXQiLz4NCiAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6aWY+DQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iZG92aXoiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iZG92aXpfaWQiIC8+DQogICAgPHhzbDppZiB0ZXN0PSIkZG92aXpfaWQgYW5kICRkb3Zpel9pZCAhPSAnJyBhbmQgJGRvdml6X2lkICE9ICdudWxsJyIgPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZG92aXpfaWQgPSAgJ1RSTCcgb3IgJGRvdml6X2lkID0gICdUUlknIj4NCiAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJ1RMJyIgLz4NCiAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkb3Zpel9pZCIgLz4NCiAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOmlmPg0KDQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iYWx0X3RvcGxhbSI+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpc191YmxfMjEiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJpc191YmwyMSIgPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvcF90djIiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJvcHRldmtpZmF0MiIgPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvcF90djMiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJvcHRldmtpZmF0MyIgPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPGRpdiBjbGFzcz0idG9wbGFtX3NhdGlyaSIgPg0KICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+TWFsIEhpem1ldCBUb3BsYW0gVHV0YXLEsTwvc3Bhbj4NCiAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3NlcCI+Ojwvc3Bhbj4NCiAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3ZhbCIgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7IiA+DQogICAgICAgIDx4c2w6dmFsdWUtb2YNCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpUYXhFeGNsdXNpdmVBbW91bnQsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6VGF4RXhjbHVzaXZlQW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgPC9zcGFuPg0KICAgIDwvZGl2Pg0KICA8IS0tDQogICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6QWxsb3dhbmNlVG90YWxBbW91bnQgYW5kIC8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpBbGxvd2FuY2VUb3RhbEFtb3VudCAmZ3Q7IDAiPg0KICAgICAgPGRpdiBjbGFzcz0idG9wbGFtX3NhdGlyaSIgPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID5Ub3BsYW0gxLBza29udG88L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3NlcCI+Ojwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fdmFsIiBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiID4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mDQogICAgICAgICAgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOkFsbG93YW5jZVRvdGFsQW1vdW50LCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpBbGxvd2FuY2VUb3RhbEFtb3VudC9AY3VycmVuY3lJRCIgLz4NCiAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L3NwYW4+DQogICAgICA8L2Rpdj4NCiAgICAgIDxkaXYgY2xhc3M9InRvcGxhbV9zYXRpcmkiID4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+TWF0cmFoPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3ZhbCIgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mDQogICAgICAgICAgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOlRheEV4Y2x1c2l2ZUFtb3VudCwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJkb3ZpeiIgPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6VGF4RXhjbHVzaXZlQW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmlmPg0KICAgIC0tPg0KICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJuMTpJbnZvaWNlL2NhYzpUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwiPg0KICAgICAgPGRpdiBjbGFzcz0idG9wbGFtX3NhdGlyaSIgPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID4NCiAgICAgICANCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lL2NiYzpOYW1lPSdLRFYgVEVWS8SwRkFUJyI+S0RWIFRldmtpZmF0DQogICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICBIZXNhcGxhbmFuIEtEVg0KICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpOYW1lIi8+ICggJSA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlcihjYmM6UGVyY2VudCwgJyMjIy4jIzAnLCAnZXVyb3BlYW4nKSIvPiApDQogICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fc2VwIj46PC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV92YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyIgPg0KICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZSI+DQogICAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mDQogICAgICAgICAgICAgIHNlbGVjdD0iZm9ybWF0LW51bWJlciguLi8uLi9jYmM6VGF4QW1vdW50LCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZG92aXoiID4NCiAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIuLi8uLi9jYmM6VGF4QW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6Zm9yLWVhY2g+DQoNCiAgICA8eHNsOmlmIHRlc3Q9InN1bShuMTpJbnZvaWNlL2NhYzpUYXhUb3RhbC9jYWM6VGF4U3VidG90YWxbY2FjOlRheENhdGVnb3J5L2NhYzpUYXhTY2hlbWUvY2JjOlRheFR5cGVDb2RlPTkwMTVdL2NiYzpUYXhhYmxlQW1vdW50KT4wIj4NCiAgICAgIDxkaXYgY2xhc3M9InRvcGxhbV9zYXRpcmkiID4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+VGV2a2lmYXRhIFRhYmkgxLDFn2xlbSBUdXRhcsSxPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3ZhbCIgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7Ij4NCg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJmb3JtYXQtbnVtYmVyKHN1bShuMTpJbnZvaWNlL2NhYzpJbnZvaWNlTGluZVtjYWM6VGF4VG90YWwvY2FjOlRheFN1YnRvdGFsL2NhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lL2NiYzpUYXhUeXBlQ29kZT05MDE1XS9jYmM6TGluZUV4dGVuc2lvbkFtb3VudCksICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZG92aXoiID4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkb3Zpel9pZCIgIHNlbGVjdD0ibjE6SW52b2ljZS9jYmM6RG9jdW1lbnRDdXJyZW5jeUNvZGUiIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgPC9kaXY+DQogICAgICA8ZGl2IGNsYXNzPSJ0b3BsYW1fc2F0aXJpIiA+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX2tleSIgPlRldmtpZmF0YSBUYWJpIMSwxZ9sZW0gw5x6ZXJpbmRlbiBIZXMuIEtEVjwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fc2VwIj46PC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV92YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoc3VtKG4xOkludm9pY2UvY2FjOlRheFRvdGFsL2NhYzpUYXhTdWJ0b3RhbFtjYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZS9jYmM6VGF4VHlwZUNvZGU9OTAxNV0vY2JjOlRheGFibGVBbW91bnQpLCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Im4xOkludm9pY2UvY2JjOkRvY3VtZW50Q3VycmVuY3lDb2RlIiAvPg0KICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIA0KDQogICAgPC94c2w6aWY+DQoNCiAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0ibjE6SW52b2ljZS9jYWM6V2l0aGhvbGRpbmdUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwiPg0KICAgICAgPGRpdiBjbGFzcz0idG9wbGFtX3NhdGlyaSIgPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID4NCiAgICAgICAgICBIZXNhcGxhbmFuIEtEViBUZXZraWZhdA0KICAgICAgICAgIDx4c2w6dGV4dD4oJTwveHNsOnRleHQ+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpQZXJjZW50Ii8+DQogICAgICAgICAgPHhzbDp0ZXh0Pik8L3hzbDp0ZXh0Pg0KICAgICAgICA8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3NlcCI+Ojwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fdmFsIiA+DQogICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lIj4NCiAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YNCiAgICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4uLy4uL2NiYzpUYXhBbW91bnQsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi4vLi4vY2JjOlRheEFtb3VudC9AY3VycmVuY3lJRCI+DQogICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIuLi8uLi9jYmM6VGF4QW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmZvci1lYWNoPg0KDQogICANCg0KICAgIDwhLS0NCiAgICA8ZGl2IGNsYXNzPSJ0b3BsYW1fc2F0aXJpIiA+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID5WZXJnaWxlciBEYWhpbCBUb3BsYW0gVHV0YXI8L3NwYW4+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV92YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyIgPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpJbnZvaWNlTGluZVtjYWM6V2l0aGhvbGRpbmdUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwvY2FjOlRheENhdGVnb3J5L2NhYzpUYXhTY2hlbWVdIGFuZCAkb3BfdHYzID0gJzEnIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoICAvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6VGF4SW5jbHVzaXZlQW1vdW50ICsgc3VtKG4xOkludm9pY2UvY2FjOldpdGhob2xkaW5nVGF4VG90YWwvY2FjOlRheFN1YnRvdGFsW2NhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lXS9jYmM6VGF4QW1vdW50KSwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6VGF4VG90YWwvY2FjOlRheFN1YnRvdGFsL2NhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lL2NiYzpUYXhUeXBlQ29kZT0mYXBvczs5MDE1JmFwb3M7IGFuZCAkb3BfdHYzID0gJzEnIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoICAvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6VGF4SW5jbHVzaXZlQW1vdW50ICsgc3VtKG4xOkludm9pY2UvY2FjOldpdGhob2xkaW5nVGF4VG90YWwvY2FjOlRheFN1YnRvdGFsW2NhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lXS9jYmM6VGF4QW1vdW50KSwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiAgIHNlbGVjdD0iZm9ybWF0LW51bWJlcigvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6VGF4SW5jbHVzaXZlQW1vdW50ICsgc3VtKG4xOkludm9pY2UvY2FjOlRheFRvdGFsL2NhYzpUYXhTdWJ0b3RhbFtjYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZS9jYmM6VGF4VHlwZUNvZGU9OTAxNV0vY2JjOlRheGFibGVBbW91bnQpLCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOlRheEluY2x1c2l2ZUFtb3VudCwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZG92aXoiID4NCiAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpUYXhJbmNsdXNpdmVBbW91bnQvQGN1cnJlbmN5SUQiIC8+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICA8L3NwYW4+DQogICAgPC9kaXY+DQogIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idHV0YXJfdmVyZ2lfZGFoaWwiIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOlRheEluY2x1c2l2ZUFtb3VudCIgLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InR1dGFyX29kZW5lY2VrIiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpQYXlhYmxlQW1vdW50IiAvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idHV0YXJfdG9wbGFtIiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpQYXlhYmxlQW1vdW50IiAvPg0KDQoNCiAgICA8ZGl2IGNsYXNzPSJ0b3BsYW1fc2F0aXJpIiA+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID5WZXJnaWxlciBEYWhpbCDDlmRlbmVjZWsgVHV0YXI8L3NwYW4+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV92YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyIgPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlcigkdHV0YXJfb2RlbmVjZWssICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgPHhzbDppZg0KICAgICAgICAgICAgICAgICAgICB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6UGF5YWJsZUFtb3VudC9AY3VycmVuY3lJRCI+DQogICAgICAgICANCiAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZG92aXoiID4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkb3Zpel9pZCIgIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOlBheWFibGVBbW91bnQvQGN1cnJlbmN5SUQiIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCg0KICAgICAgICA8L3hzbDppZj4NCiAgICAgIDwvc3Bhbj4NCiAgICA8L2Rpdj4NCjwhLS0gVEwgLS0+DQogICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwvY2JjOkxpbmVFeHRlbnNpb25BbW91bnQvQGN1cnJlbmN5SUQgIT0gJ1RSTCcgYW5kIC8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpMaW5lRXh0ZW5zaW9uQW1vdW50L0BjdXJyZW5jeUlEICE9ICdUUlknIj4NCiAgICAgIDxkaXYgY2xhc3M9InRvcGxhbV9zYXRpcmkiID4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+DQogICAgICAgICAgPHhzbDp0ZXh0Pk1hbCBIaXptZXQgVG9wbGFtIFR1dGFyxLEgKFRMKTwveHNsOnRleHQ+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fc2VwIj46PC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV92YWwiIHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyIgPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2YNCiAgICAgICAgICAgIHNlbGVjdD0iZm9ybWF0LW51bWJlcigvL24xOkludm9pY2UvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6TGluZUV4dGVuc2lvbkFtb3VudCAqIC8vbjE6SW52b2ljZS9jYWM6UHJpY2luZ0V4Y2hhbmdlUmF0ZS9jYmM6Q2FsY3VsYXRpb25SYXRlLCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgPHhzbDp0ZXh0PiBUTDwveHNsOnRleHQ+DQogICAgICAgIDwvc3Bhbj4NCiAgICAgIDwvZGl2Pg0KICAgICAgDQogICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0ibjE6SW52b2ljZS9jYWM6VGF4VG90YWwvY2FjOlRheFN1YnRvdGFsIj4NCiAgICAgIDx4c2w6aWYgICB0ZXN0PSIvL24xOkludm9pY2UvY2JjOkRvY3VtZW50Q3VycmVuY3lDb2RlICE9ICdUUkwnIGFuZCAvL24xOkludm9pY2UvY2JjOkRvY3VtZW50Q3VycmVuY3lDb2RlICE9ICdUUlknIj4NCiAgICAgICAgPGRpdiBjbGFzcz0idG9wbGFtX3NhdGlyaSIgPg0KICAgICAgICAgIA0KICAgICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9rZXkiID4NCiAgICAgICAgICBIZXNhcGxhbmFuIEtEVjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6TmFtZSIvPiAoICUgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoY2JjOlBlcmNlbnQsICcjIyMuIyMwJywgJ2V1cm9wZWFuJykiLz4gKQ0KICAgICAgICA8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3NlcCI+Ojwvc3Bhbj4NCiAgDQogICAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fdmFsIiBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiID4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YNCiAgICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKGNiYzpUYXhBbW91bnQgKiAvL24xOkludm9pY2UvY2FjOlByaWNpbmdFeGNoYW5nZVJhdGUvY2JjOkNhbGN1bGF0aW9uUmF0ZSwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgICAgPHhzbDp0ZXh0PiBUTDwveHNsOnRleHQ+DQogICAgICAgICAgPC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOmZvci1lYWNoPg0KICAgIDwhLS0NCiAgICAgIDxkaXYgY2xhc3M9InRvcGxhbV9zYXRpcmkiID4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+DQogICAgICAgICAgPHhzbDp0ZXh0PlZlcmdpbGVyIERhaGlsIFRvcGxhbSBUdXRhciAoVEwpPC94c2w6dGV4dD4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3ZhbCIgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7IiA+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZg0KICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpUYXhJbmNsdXNpdmVBbW91bnQgKiAvL24xOkludm9pY2UvY2FjOlByaWNpbmdFeGNoYW5nZVJhdGUvY2JjOkNhbGN1bGF0aW9uUmF0ZSwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgIDx4c2w6dGV4dD4gVEw8L3hzbDp0ZXh0Pg0KICAgICAgICA8L3NwYW4+DQogICAgICA8L2Rpdj4NCiAgICAtLT4NCiAgICAgIDxkaXYgY2xhc3M9InRvcGxhbV9zYXRpcmkiID4NCiAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF90b3BsYW1fa2V5IiA+DQogICAgICAgICAgPHhzbDp0ZXh0PlZlcmdpbGVyIERhaGlsIMOWZGVuZWNlayBUdXRhciAoVEwpPC94c2w6dGV4dD4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYWx0X3RvcGxhbV9zZXAiPjo8L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhbHRfdG9wbGFtX3ZhbCIgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7IiA+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZg0KICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC8vbjE6SW52b2ljZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpQYXlhYmxlQW1vdW50ICogLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpDYWxjdWxhdGlvblJhdGUsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgICA8eHNsOnRleHQ+IFRMPC94c2w6dGV4dD4NCiAgICAgICAgPC9zcGFuPg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6aWY+DQo8IS0tIFRMIC0tPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfc2F0aXJfdXJ1bl9rb2R1Ij4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImtvZF9hY2lrbGFtYSIgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImVrX2FjaWtsYW1heWlfYWwiPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ib3JnIiBzZWxlY3Q9ImRlbmVtZSIgLz4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFjaWtsYW1hIiBzZWxlY3Q9Ii4vY2JjOk5vdGUiIC8+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJrZXlmaWVsZCIgc2VsZWN0PSIndXJ1bmtvZHUnIiAvPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiIHNlbGVjdD0iJ3VydW5rb2R1MiciIC8+DQogICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRrb2RfYWNpa2xhbWEgYW5kICRrb2RfYWNpa2xhbWEhPScnIj4NCiAgICAgICAgPGRpdj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGtvZF9hY2lrbGFtYSIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNhYzpJdGVtIGFuZCBjYWM6SXRlbS9jYWM6U2VsbGVyc0l0ZW1JZGVudGlmaWNhdGlvbiBhbmQgY2FjOkl0ZW0vY2FjOlNlbGxlcnNJdGVtSWRlbnRpZmljYXRpb24vY2JjOklEIj4NCiAgICAgICAgPGRpdj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOkl0ZW0vY2FjOlNlbGxlcnNJdGVtSWRlbnRpZmljYXRpb24vY2JjOklEIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgPGRpdj4gPC9kaXY+DQogICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X3NhdGlyX3RvcGxhbSI+DQogICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoLi9jYmM6TGluZUV4dGVuc2lvbkFtb3VudCwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJkb3ZpeiIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIuL2NiYzpMaW5lRXh0ZW5zaW9uQW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfZGlnZXJfdmVyZ2lsZXIiPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaXNfdWJsXzIxIiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iaXNfdWJsMjEiID48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NhYzpUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwvY2FjOlRheENhdGVnb3J5L2NhYzpUYXhTY2hlbWUiPg0KICAgICAgPHhzbDppZiB0ZXN0PSJjYmM6VGF4VHlwZUNvZGUhPScwMDE1JyAiPg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgIDx4c2w6aWYgdGVzdD0icG9zaXRpb24oKSA9IDEiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmhhc2RhdGE8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpOYW1lIi8+DQogICAgICAgICAgPHhzbDppZiB0ZXN0PSIuLi8uLi9jYmM6UGVyY2VudCI+DQogICAgICAgICAgICA8eHNsOnRleHQ+ICglPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4uLy4uL2NiYzpQZXJjZW50LCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgICA8eHNsOnRleHQ+KT08L3hzbDp0ZXh0Pg0KICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2YgICAgIHNlbGVjdD0iZm9ybWF0LW51bWJlciguLi8uLi9jYmM6VGF4QW1vdW50LCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Ii4uLy4uL2NiYzpUYXhBbW91bnQvQGN1cnJlbmN5SUQiIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDpmb3ItZWFjaD4NCg0KICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NhYzpXaXRoaG9sZGluZ1RheFRvdGFsL2NhYzpUYXhTdWJ0b3RhbC9jYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZSI+DQogICAgICA8ZGl2Pg0KICAgICAgICA8eHNsOnRleHQ+S0RWIFRFVkvEsEZBVCA8L3hzbDp0ZXh0Pg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4uLy4uL2NiYzpQZXJjZW50Ij4NCiAgICAgICAgICA8eHNsOnRleHQ+ICglPC94c2w6dGV4dD4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlciguLi8uLi9jYmM6UGVyY2VudCwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgICAgIDx4c2w6dGV4dD4pPTwveHNsOnRleHQ+DQogICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8eHNsOnZhbHVlLW9mICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4uLy4uL2NiYzpUYXhBbW91bnQsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIuLi8uLi9jYmM6VGF4QW1vdW50L0BjdXJyZW5jeUlEIj4NCiAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Ii4uLy4uL2NiYzpUYXhBbW91bnQvQGN1cnJlbmN5SUQiIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iLi9jYmM6TmFtZSI+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Imh0bWxfbmV3bGluZSIgPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2JjOk5hbWUiLz4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICA8L2Rpdj4NCiAgICA8L3hzbDpmb3ItZWFjaD4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfa2R2X3R1dGFyIj4NCiAgICA8eHNsOmZvci1lYWNoDQogICAgICBzZWxlY3Q9Ii4vY2FjOlRheFRvdGFsL2NhYzpUYXhTdWJ0b3RhbC9jYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZSI+DQogICAgICA8eHNsOmlmIHRlc3Q9ImNiYzpUYXhUeXBlQ29kZT0nMDAxNScgIj4NCiAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICA8eHNsOnZhbHVlLW9mDQogICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4uLy4uL2NiYzpUYXhBbW91bnQsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIuLi8uLi9jYmM6VGF4QW1vdW50L0BjdXJyZW5jeUlEIiAvPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6Zm9yLWVhY2g+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2tkdl9vcmFuIj4NCiAgICA8eHNsOmZvci1lYWNoDQogICAgICBzZWxlY3Q9Ii4vY2FjOlRheFRvdGFsL2NhYzpUYXhTdWJ0b3RhbC9jYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZSI+DQogICAgICA8eHNsOmlmIHRlc3Q9ImNiYzpUYXhUeXBlQ29kZT0nMDAxNScgIj4NCiAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4uLy4uL2NiYzpQZXJjZW50Ij4NCiAgICAgICAgICA8eHNsOnRleHQ+ICUgPC94c2w6dGV4dD4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlciguLi8uLi9jYmM6UGVyY2VudCwgJyMjIy4jIzAnLCAnZXVyb3BlYW4nKSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDpmb3ItZWFjaD4NCiAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ibXl0YWciPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0idGFnIiAvPg0KICAgIDx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSJjb25jYXQoJyZsdDsnLCR0YWcsJyZndDsnKSIgLz4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ibXlodG1sIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InRhZyIgLz4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InRleHQiIC8+DQogICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9ImNvbmNhdCgnJmx0OycsJHRhZywnJmd0OycsJHRleHQsJyZsdDsnLCcvJywkdGFnLCcmZ3Q7JykiIC8+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8IS0tIA0KPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Im15dGFnIiA+PHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhZyIgIHNlbGVjdD0iJ2RpdiciIC8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCjx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteWh0bWwiID48eHNsOndpdGgtcGFyYW0gbmFtZT0idGFnIiAgc2VsZWN0PSInYiciIC8+PHhzbDp3aXRoLXBhcmFtIG5hbWU9InRleHQiICBzZWxlY3Q9IidkZW5lbWUnIiAvPjwveHNsOmNhbGwtdGVtcGxhdGU+DQotLT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9pc2tvbnRvX3R1dGFyIiA+DQogICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2FjOkFsbG93YW5jZUNoYXJnZSI+DQogICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4vY2JjOkNoYXJnZUluZGljYXRvciBhbmQgLi9jYmM6Q2hhcmdlSW5kaWNhdG9yPSd0cnVlJyI+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL2NiYzpBbW91bnQgYW5kIC4vY2JjOkFtb3VudCAmZ3Q7IDAiPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteXRhZyIgPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhZyIgIHNlbGVjdD0iJ2RpdiciIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlciguL2NiYzpBbW91bnQsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiIC8+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG92aXpfaWQiICBzZWxlY3Q9Ii4vY2JjOkFtb3VudC9AY3VycmVuY3lJRCIgLz4NCiAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteXRhZyIgPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhZyIgIHNlbGVjdD0iJy9kaXYnIiAvPg0KICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL2NhYzpJdGVtL2NiYzpNb2RlbE5hbWUiPg0KICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9jYWM6SXRlbS9jYmM6TW9kZWxOYW1lICE9ICcnIGFuZCAuL2NhYzpJdGVtL2NiYzpNb2RlbE5hbWUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL2NhYzpJdGVtL2NiYzpNb2RlbE5hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteWh0bWwiID4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0YWciICBzZWxlY3Q9IidkaXYnIiAvPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRleHQiICBzZWxlY3Q9IicgJyIgLz4NCiAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6Zm9yLWVhY2g+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9Im15aXNrdG9wbGFtIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImlzayIgLz4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InBvcyIgLz4NCiAgICA8eHNsOmlmIHRlc3Q9IiRwb3MgJmd0OyAwICI+DQogICAgICA8eHNsOmlmIHRlc3Q9IiRwb3MgPSAxICI+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaXNrWzFdL2NiYzpBbW91bnQiIC8+DQogICAgICA8L3hzbDppZj4NCiAgICAgIDx4c2w6aWYgdGVzdD0iJHBvcyA+IDEgIj4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwcmV2IiA+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Im15aXNrdG9wbGFtIiA+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaXNrIiAgc2VsZWN0PSIkaXNrIiAvPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBvcyIgIHNlbGVjdD0iJHBvcyAtIDEiIC8+DQogICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaXNrWyRwb3NdL2NiYzpBbW91bnQgKyAkcHJldiIgLz4NCiAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOmlmPg0KICAgIDx4c2w6aWYgdGVzdD0iJHBvcyAmbHQ7PSAwICI+DQogICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJzAnIiAvPg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9pc2tvbnRvX29yYW4iPg0KICAgIDx4c2w6aWYgdGVzdD0iY2FjOkl0ZW0vY2JjOkJyYW5kTmFtZSI+DQogICAgICA8c3BhbiBjbGFzcz0ic2F0aXJfbm90dSI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhY2lrbGFtYXlpX2FsIj4NCiAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY3N2Ij4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYWM6SXRlbS9jYmM6QnJhbmROYW1lIi8+DQogICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgIDwvc3Bhbj4NCiAgICA8L3hzbDppZj4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfYmlyaW1fZml5YXQiPg0KICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4vY2FjOlByaWNlL2NiYzpQcmljZUFtb3VudCwgJyMjIy4jIzAsMDAwJywgJ2V1cm9wZWFuJykiLz4NCg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJkb3ZpeiIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvdml6X2lkIiAgc2VsZWN0PSIuL2NhYzpQcmljZS9jYmM6UHJpY2VBbW91bnQvQGN1cnJlbmN5SUQiIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9zYXRpcl9ub3R1Ij4NCiAgICA8eHNsOmlmIHRlc3Q9Ii4vY2JjOk5vdGUiPg0KICAgICAgPHNwYW4gY2xhc3M9InNhdGlyX25vdHUiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWNpa2xhbWF5aV9hbCI+DQogICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNzdiI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9jYmM6Tm90ZSIvPg0KICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICA8L3NwYW4+DQogICAgPC94c2w6aWY+DQoNCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfbWlrdGFyX2FkdiI+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvcmdfZGVnZXIiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludF9taWt0YXIiIC8+DQogICAgPC94c2w6dmFyaWFibGU+DQoNCiAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZWtfYWNpa2xhbWF5aV9hbCI+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ib3JnIiBzZWxlY3Q9IiRvcmdfZGVnZXIiIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYWNpa2xhbWEiIHNlbGVjdD0iLi9jYmM6Tm90ZSIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJrZXlmaWVsZCIgc2VsZWN0PSInbWlrdGFyJyIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJmb3JjZWRmaWVsZCIgc2VsZWN0PSInbWlrdGFyMiciIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfYmlyaW1fZml5YXRfYWR2Ij4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im9yZ19kZWdlciIgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X2JpcmltX2ZpeWF0IiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJla19hY2lrbGFtYXlpX2FsIj4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJvcmciIHNlbGVjdD0iJG9yZ19kZWdlciIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhY2lrbGFtYSIgc2VsZWN0PSIuL2NiYzpOb3RlIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImtleWZpZWxkIiBzZWxlY3Q9IidiaXJpbWZpeWF0JyIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJmb3JjZWRmaWVsZCIgc2VsZWN0PSInYmlyaW1maXlhdDInIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2lza29udG9fb3Jhbl9hZHYiPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ib3JnX2RlZ2VyIiAgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X2lza29udG9fb3JhbiIgLz4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZWtfYWNpa2xhbWF5aV9hbCI+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ib3JnIiBzZWxlY3Q9IiRvcmdfZGVnZXIiIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYWNpa2xhbWEiIHNlbGVjdD0iLi9jYmM6Tm90ZSIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJrZXlmaWVsZCIgc2VsZWN0PSInaXNrb250b29yYW4nIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImZvcmNlZGZpZWxkIiBzZWxlY3Q9Iidpc2tvbnRvb3JhbjInIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2lza29udG9fdHV0YXJfYWR2IiA+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvcmdfZGVnZXIiPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X2lza29udG9fdHV0YXIiIC8+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImVrX2FjaWtsYW1heWlfYWwiPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im9yZyIgc2VsZWN0PSIkb3JnX2RlZ2VyIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFjaWtsYW1hIiBzZWxlY3Q9Ii4vY2JjOk5vdGUiIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ia2V5ZmllbGQiIHNlbGVjdD0iJ2lza29udG90dXRhciciIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiIHNlbGVjdD0iJ2lza29udG90dXRhcjInIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogIDwveHNsOnRlbXBsYXRlPg0KIA0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2tkdl90dXRhcl9hZHYiPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ib3JnX2RlZ2VyIiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJpbnRfa2R2X3R1dGFyIiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJla19hY2lrbGFtYXlpX2FsIj4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJvcmciIHNlbGVjdD0iJG9yZ19kZWdlciIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhY2lrbGFtYSIgc2VsZWN0PSIuL2NiYzpOb3RlIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImtleWZpZWxkIiBzZWxlY3Q9IidrZHZ0dXRhciciIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiIHNlbGVjdD0iJ2tkdnR1dGFyMiciIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfZGlnZXJfdmVyZ2lsZXJfYWR2Ij4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im9yZ19kZWdlciIgPg0KICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X2RpZ2VyX3ZlcmdpbGVyIiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJla19hY2lrbGFtYXlpX2FsIj4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJvcmciIHNlbGVjdD0iJG9yZ19kZWdlciIgLz4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhY2lrbGFtYSIgc2VsZWN0PSIuL2NiYzpOb3RlIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImtleWZpZWxkIiBzZWxlY3Q9IidkaWdlciciIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiIHNlbGVjdD0iJ2RpZ2VyMiciIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJpbnRfc2F0aXJfdG9wbGFtX2FkdiI+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJvcmdfZGVnZXIiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludF9zYXRpcl90b3BsYW0iIC8+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImVrX2FjaWtsYW1heWlfYWwiPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im9yZyIgc2VsZWN0PSIkb3JnX2RlZ2VyIiAvPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFjaWtsYW1hIiBzZWxlY3Q9Ii4vY2JjOk5vdGUiIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ia2V5ZmllbGQiIHNlbGVjdD0iJ3RvcGxhbSciIC8+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9yY2VkZmllbGQiIHNlbGVjdD0iJ3RvcGxhbTInIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9ImR1emVubGVtZV90YXJpaGkiICA+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ0YXJpaCIgPg0KICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9leHQ6VUJMRXh0ZW5zaW9ucy9leHQ6VUJMRXh0ZW5zaW9uL2V4dDpFeHRlbnNpb25Db250ZW50L2RzOlNpZ25hdHVyZS9kczpPYmplY3QveGFkZXM6UXVhbGlmeWluZ1Byb3BlcnRpZXMveGFkZXM6U2lnbmVkUHJvcGVydGllcy94YWRlczpTaWduZWRTaWduYXR1cmVQcm9wZXJ0aWVzL3hhZGVzOlNpZ25pbmdUaW1lIiAvPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR0YXJpaCBhbmQgJHRhcmloICE9ICcnIj4NCiAgICAgICAgPGRpdj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ic3Vic3RyaW5nKCR0YXJpaCw5LDIpIi8+LTx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSJzdWJzdHJpbmcoJHRhcmloLDYsMikiLz4tPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9InN1YnN0cmluZygkdGFyaWgsMSw0KSIvPg0KICAgICAgICAgIFNhYXQgOiA8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ic3Vic3RyaW5nKCR0YXJpaCwxMiwyKSIvPjo8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ic3Vic3RyaW5nKCR0YXJpaCwxNSwyKSIvPjo8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ic3Vic3RyaW5nKCR0YXJpaCwxOCwyKSIvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYmM6SXNzdWVEYXRlIi8+IDA5OjAwDQogICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgPC94c2w6Y2hvb3NlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9iYXNpdF90YXJpaCI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJ0YXJpaCIgLz4NCiAgICA8eHNsOnZhbHVlLW9mIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIHNlbGVjdD0ic3Vic3RyaW5nKCR0YXJpaCw5LDIpIi8+LTx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSJzdWJzdHJpbmcoJHRhcmloLDYsMikiLz4tPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9InN1YnN0cmluZygkdGFyaWgsMSw0KSIvPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9taWt0YXJfYmlyaW0iPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iYmlyaW0iIC8+DQogICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IicgJyIgLz4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJzI2JyI+VG9uPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0JYJyI+S3V0dTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdMVFInIj5MVDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdDNjInIj5BZGV0PC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ05JVSciPkFkZXQ8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnRUEnIj5BZGV0PC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0tHTSciPktHPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0tKTyciPmtKPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0dSTSciPkc8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnTUdNJyI+TUc8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnTlQnIj5OZXQgVG9uPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0dUJyI+R1Q8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnTVRSJyI+TTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdNTVQnIj5NTTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdLVE0nIj5LTTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdNTFQnIj5NTDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdNTVEnIj5NTTM8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnQ0xUJyI+Q0w8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnQ01LJyI+Q00yPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ0NNUSciPkNNMzwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdDTVQnIj5DTTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdNVEsnIj5NMjwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdNVFEnIj5NMzwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdEQVknIj5Hw7xuPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ01JTiciPkRha2lrYTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdTRUMnIj5TYW5peWU8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnSFVSJyI+U2FhdDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGJpcmltICA9ICdBTk4nIj5ZxLFsPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ01PTiciPkF5PC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYmlyaW0gID0gJ1BBJyI+UGFrZXQ8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRiaXJpbSAgPSAnS1dIJyI+S1dIbDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgRXZyIDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRiaXJpbSIvPg0KICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgIDwveHNsOmNob29zZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIA0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2dvbmRlcmlsbWVfc2VrbGkiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iZ29uZGVyaW0iIC8+DQogICAgPHhzbDp2YWx1ZS1vZiBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiBzZWxlY3Q9IicgJyIgLz4NCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZ29uZGVyaW0gID0gJzEnIj5EZW5peiB0YcWfxLFtYWPEsWzEscSfxLE8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRnb25kZXJpbSAgPSAnMiciPkRlbWlyeW9sdSB0YcWfxLFtYWPEsWzEscSfxLE8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRnb25kZXJpbSAgPSAnMyciPkthcmF5b2x1IHRhxZ/EsW1hY8SxbMSxxJ/EsTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGdvbmRlcmltICA9ICc0JyI+SGF2YSBUYcWfxLFtYWPEsWzEscSfxLE8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRnb25kZXJpbSAgPSAnNSciPlBvc3RhPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZ29uZGVyaW0gID0gJzYnIj5NdWx0aW1vZGFsIHRhxZ/EsW1hPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZ29uZGVyaW0gID0gJzcnIj5TYWJpdCBuYWtsaXllIHRlc2lzbGVyaTwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGdvbmRlcmltICA9ICc4JyI+xLDDpyBzdSB0YcWfxLFtYWPEsWzEscSfxLE8L3hzbDp3aGVuPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRnb25kZXJpbSAgPSAnOSciPlRhxZ/EsW1hIG1vZHUgdXlndWxhbmFtYXo8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICBBa3RhcsSxbSBtb2R1IGJlbGlydGlsbWVtacWfPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRnb25kZXJpbSIvPg0KICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgIDwveHNsOmNob29zZT4NCiAgPC94c2w6dGVtcGxhdGU+DQogIA0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50X2VzeWFfa2FwX2NpbnNpIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImthcGNpbnNpIiAvPg0KICAgIDx4c2w6dmFsdWUtb2YgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgc2VsZWN0PSInICciIC8+DQogICAgPHhzbDpjaG9vc2U+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJGthcGNpbnNpICA9ICdSTyciPlJvbGw8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICBCZWxpcnRpbG1lbWnFnzx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIka2FwY2luc2kiLz4NCiAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogIDwveHNsOnRlbXBsYXRlPg0KICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50TXVzdGVyaUFkaSI+DQogICAgPHhzbDpjaG9vc2U+DQogICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYmM6UHJvZmlsZUlEIGFuZCAvL24xOkludm9pY2UvY2JjOlByb2ZpbGVJRCAhPSAnSUhSQUNBVCciPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eU5hbWUgYW5kIC8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eU5hbWUvY2JjOk5hbWUgYW5kIHN0cmluZy1sZW5ndGgoLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBhcnR5TmFtZS9jYmM6TmFtZSkgJmd0OyAyIj4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eU5hbWUvY2JjOk5hbWUiLz4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQZXJzb24iPg0KICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpBY2NvdW50aW5nQ3VzdG9tZXJQYXJ0eS9jYWM6UGFydHkvY2FjOlBlcnNvbi9jYmM6Rmlyc3ROYW1lIi8+DQogICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGVyc29uL2NiYzpNaWRkbGVOYW1lIi8+DQogICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGVyc29uL2NiYzpGYW1pbHlOYW1lIi8+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp3aGVuPg0KICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpCdXllckN1c3RvbWVyUGFydHkvY2FjOlBhcnR5L2NhYzpQYXJ0eU5hbWUvY2JjOk5hbWUiLz4NCiAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogIDwveHNsOnRlbXBsYXRlPg0KICANCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcmludF9taWt0YXIiPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteXRhZyIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhZyIgIHNlbGVjdD0iJ3NwYW4nIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPHhzbDpjaG9vc2U+DQogICAgICA8eHNsOndoZW4gdGVzdD0iZmxvb3IoLi9jYmM6SW52b2ljZWRRdWFudGl0eSkgPSAuL2NiYzpJbnZvaWNlZFF1YW50aXR5ICI+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJmb3JtYXQtbnVtYmVyKC4vY2JjOkludm9pY2VkUXVhbnRpdHksJyMjIy4jIzAsIyMnLCAnZXVyb3BlYW4nKSIvPg0KICAgICAgPC94c2w6d2hlbj4NCiAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlciguL2NiYzpJbnZvaWNlZFF1YW50aXR5LCcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4NCiAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X21pa3Rhcl9iaXJpbSIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImJpcmltIiAgc2VsZWN0PSIuL2NiYzpJbnZvaWNlZFF1YW50aXR5L0B1bml0Q29kZSIgLz4NCiAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteXRhZyIgPg0KICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhZyIgIHNlbGVjdD0iJy9zcGFuJyIgLz4NCiAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJhbHRfbm90bGFyIj4NCiAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwiPg0KICAgICAgPHhzbDppZiAgIHRlc3Q9IihjYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZS9jYmM6VGF4VHlwZUNvZGU9JzAwMTUnIG9yIC4uLy4uL2NiYzpJbnZvaWNlVHlwZUNvZGU9J09aRUxNQVRSQUgnKSBhbmQgY2FjOlRheENhdGVnb3J5L2NiYzpUYXhFeGVtcHRpb25SZWFzb24iPg0KICAgICAgICA8ZGl2IGNsYXNzPSJmYXR1cmFfbm90X2NvbnRhaW5lciI+DQogICAgICAgICAgPGI+VmVyZ2kgxLBzdGlzbmEgTXVhZml5ZXQgU2ViZWJpOiA8L2I+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNhYzpUYXhDYXRlZ29yeS9jYmM6VGF4RXhlbXB0aW9uUmVhc29uQ29kZSIvPg0KICAgICAgICAgIDx4c2w6dGV4dD4tPC94c2w6dGV4dD4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOlRheENhdGVnb3J5L2NiYzpUYXhFeGVtcHRpb25SZWFzb24iLz4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDppZj4NCiAgICAgIDx4c2w6aWYgICB0ZXN0PSJzdGFydHMtd2l0aChjYWM6VGF4Q2F0ZWdvcnkvY2FjOlRheFNjaGVtZS9jYmM6VGF4VHlwZUNvZGUsJzAwNycpIGFuZCBjYWM6VGF4Q2F0ZWdvcnkvY2JjOlRheEV4ZW1wdGlvblJlYXNvbiI+DQogICAgICAgIDxkaXYgY2xhc3M9ImZhdHVyYV9ub3RfY29udGFpbmVyIj4NCiAgICAgICAgICA8Yj7DllRWIMSwc3Rpc25hIE11YWZpeWV0IFNlYmViaTogPC9iPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYWM6VGF4Q2F0ZWdvcnkvY2JjOlRheEV4ZW1wdGlvblJlYXNvbkNvZGUiLz4NCiAgICAgICAgICA8eHNsOnRleHQ+LTwveHNsOnRleHQ+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNhYzpUYXhDYXRlZ29yeS9jYmM6VGF4RXhlbXB0aW9uUmVhc29uIi8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6Zm9yLWVhY2g+DQogICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYWM6V2l0aGhvbGRpbmdUYXhUb3RhbC9jYWM6VGF4U3VidG90YWwvY2FjOlRheENhdGVnb3J5L2NhYzpUYXhTY2hlbWUiPg0KICAgICAgPGRpdiBjbGFzcz0iZmF0dXJhX25vdF9jb250YWluZXIiPg0KICAgICAgICA8Yj5UZXZraWZhdCBTZWJlYmk6IDwvYj4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpUYXhUeXBlQ29kZSIvPg0KICAgICAgICA8eHNsOnRleHQ+LTwveHNsOnRleHQ+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjYmM6TmFtZSBhbmQgY2JjOk5hbWUhPScnIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6TmFtZSIvPg0KICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idGV2a2lmYXRfYWNpa2xhbWFzaSIgPg0KICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icDEiICBzZWxlY3Q9ImNiYzpUYXhUeXBlQ29kZSIgLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQoNCiAgICAgIDwvZGl2Pg0KICAgIDwveHNsOmZvci1lYWNoPg0KDQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ibXlfcmVwbGFjZSI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJ0ZXh0IiAvPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0icmVwbGFjZSIgLz4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImJ5IiAvPg0KICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCR0ZXh0LCAkcmVwbGFjZSkiPg0KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nLWJlZm9yZSgkdGV4dCwkcmVwbGFjZSkiIC8+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYnkiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteV9yZXBsYWNlIj4NCiAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJHRleHQsJHJlcGxhY2UpIiAvPg0KICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJyZXBsYWNlIiBzZWxlY3Q9IiRyZXBsYWNlIiAvPg0KICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJieSIgc2VsZWN0PSIkYnkiIC8+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGV4dCIgLz4NCiAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICA8L3hzbDpjaG9vc2U+DQogIDwveHNsOnRlbXBsYXRlPg0KDQogIDx4c2w6dGVtcGxhdGUgbmFtZT0ibXlfcmVwbGFjZV9odG1sIj4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InRleHQiIC8+DQoNCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRleHQxIiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ibXlfcmVwbGFjZSIgPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSIkdGV4dCIgLz4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InJlcGxhY2UiIHNlbGVjdD0iJ3x8JyIgLz4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImJ5IiBzZWxlY3Q9IicmbHQ7YnIvJmd0OyciIC8+DQogICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idGV4dDIiID4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteV9yZXBsYWNlIiA+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0ZXh0IiBzZWxlY3Q9IiR0ZXh0MSIgLz4NCiAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InJlcGxhY2UiIHNlbGVjdD0iJyViciciIC8+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJieSIgc2VsZWN0PSInJmx0O2JyLyZndDsnIiAvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRleHQzIiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ibXlfcmVwbGFjZSIgPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSIkdGV4dDIiIC8+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJyZXBsYWNlIiBzZWxlY3Q9IiclbHQnIiAvPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYnkiIHNlbGVjdD0iJyZsdDsnIiAvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRleHQ0IiA+DQogICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ibXlfcmVwbGFjZSIgPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSIkdGV4dDMiIC8+DQogICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJyZXBsYWNlIiBzZWxlY3Q9IiclZ3QnIiAvPg0KICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYnkiIHNlbGVjdD0iJyZndDsnIiAvPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRleHQ0IiAgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iZG92aXpfa3VydV9nb3N0ZXIiPg0KICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpTb3VyY2VDdXJyZW5jeUNvZGUiID4NCiAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpTb3VyY2VDdXJyZW5jeUNvZGUgIT0gJ1RSWSciID4NCiAgICAgICAgPGRpdiBjbGFzcz0ibXlmcmFtZSB5YXppX2NvbnRhaW5lciIgPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ5YXppX2lsZSIgPg0KICAgICAgICAgICAgMSA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpTb3VyY2VDdXJyZW5jeUNvZGUiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPiA9DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpDYWxjdWxhdGlvblJhdGUiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRvdml6IiA+DQogICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkb3Zpel9pZCIgIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpUYXJnZXRDdXJyZW5jeUNvZGUiIC8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDppZj4NCiAgPC94c2w6dGVtcGxhdGU+DQogIDx4c2w6dGVtcGxhdGUgbmFtZT0iaXJzYWxpeWVsZXJpX3lhemRpciI+DQogICAgPHhzbDppZiB0ZXN0PSIvL24xOkludm9pY2UvY2FjOkRlc3BhdGNoRG9jdW1lbnRSZWZlcmVuY2UgYW5kIGNvdW50KC8vbjE6SW52b2ljZS9jYWM6RGVzcGF0Y2hEb2N1bWVudFJlZmVyZW5jZSk+MCI+DQogICAgICA8ZGl2IGNsYXNzPSJmYXR1cmFfbm90X2NvbnRhaW5lcl93X2JveCIgPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6RGVzcGF0Y2hEb2N1bWVudFJlZmVyZW5jZSBhbmQgY291bnQoLy9uMTpJbnZvaWNlL2NhYzpEZXNwYXRjaERvY3VtZW50UmVmZXJlbmNlKT4xIj4NCiAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgPGI+xLBSU0FMxLBZRUxFUiA6IDwvYj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iLy9uMTpJbnZvaWNlL2NhYzpEZXNwYXRjaERvY3VtZW50UmVmZXJlbmNlIGFuZCBjb3VudCgvL24xOkludm9pY2UvY2FjOkRlc3BhdGNoRG9jdW1lbnRSZWZlcmVuY2UpPTEiPg0KICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICA8Yj7EsFJTQUzEsFlFIDo8L2I+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8ZGl2IGNsYXNzPSJpcnNhbGl5ZV9pdGVtX2NvbnRhaW5lciIgPg0KICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvL24xOkludm9pY2UvY2FjOkRlc3BhdGNoRG9jdW1lbnRSZWZlcmVuY2UiPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImFsdF9pcnNhbGl5ZV9pdGVtIj4NCiAgICAgICAgICAgICAgPGI+Tm8gOjwvYj4mIzE2MDs8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9jYmM6SUQiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICAgICAgICAmIzE2MDsmIzE2MDsNCiAgICAgICAgICAgICAgPGJyLz48Yj5UYXJpaDogJiMxNjA7PC9iPg0KICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJpbnRfYmFzaXRfdGFyaWgiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0YXJpaCIgc2VsZWN0PSIuL2NiYzpJc3N1ZURhdGUiIC8+DQogICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6aWY+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9ImZhdHVyYV9ub3RsYXJpX3lhemRpciI+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJ0aXAiIC8+DQoNCiAgICA8eHNsOmNob29zZT4NCiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdGlwIGFuZCAkdGlwID0gJzAnIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iZmF0dXJhX25vdF9jb250YWluZXJfd19ib3giID4NCiAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NiYzpOb3RlIj4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLiAhPSAnJyBhbmQgLiAhPSAnbnVsbCciID4NCiAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgIDwhLS0gPGI+DQogICAgICAgICAgICAgICAgICBBw6fEsWtsYW1hICMgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InBvc2l0aW9uKCkiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPiA6DQogICAgICAgICAgICAgICAgPC9iPg0KICAgICAgICAgICAgICAgIDxici8+LS0+DQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Im15X3JlcGxhY2VfaHRtbCIgPg0KICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRleHQiIHNlbGVjdD0iLiIgLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8eHNsOndoZW4gdGVzdD0iJHRpcCBhbmQgJHRpcCA9ICcyJyI+DQogICAgICA8L3hzbDp3aGVuPg0KICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICA8Yj5HZW5lbCBBw6fEsWtsYW1hbGFyPC9iPg0KICAgICAgICAgICAgPGJyLz4NCiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii8vbjE6SW52b2ljZS9jYmM6Tm90ZSI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iLiAhPSAnJyBhbmQgLiAhPSAnbnVsbCcgYW5kIGNvbnRhaW5zKC4sJ0JVIEZBVFVSQSBEQUjEsEwgU09OJykiID4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhdHVyYV9ub3RfY29udGFpbmVyX3dfYm94X2JvbGQiID4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIDwhLS0gPGI+DQogICAgICAgICAgICAgICAgQcOnxLFrbGFtYSAjIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJwb3NpdGlvbigpIiAgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4gOg0KICAgICAgICAgICAgICA8L2I+DQogICAgICAgICAgICAgIDxici8+LS0+DQogICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteV9yZXBsYWNlX2h0bWwiID4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSIuIiAvPg0KICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIA0KICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLiAhPSAnJyBhbmQgLiAhPSAnbnVsbCcgYW5kIG5vdChjb250YWlucyguLCdCVSBGQVRVUkEgREFIxLBMIFNPTicpKSIgPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmF0dXJhX25vdF9jb250YWluZXJfd19ib3giID4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIDwhLS0gPGI+DQogICAgICAgICAgICAgICAgQcOnxLFrbGFtYSAjIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJwb3NpdGlvbigpIiAgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4gOg0KICAgICAgICAgICAgICA8L2I+DQogICAgICAgICAgICAgIDxici8+LS0+DQogICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJteV9yZXBsYWNlX2h0bWwiID4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dCIgc2VsZWN0PSIuIiAvPg0KICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgIDwveHNsOmNob29zZT4NCiAgICA8eHNsOmlmIHRlc3Q9Ii8vbjE6SW52b2ljZS9jYWM6UGF5bWVudE1lYW5zIGFuZCBjb3VudCgvL24xOkludm9pY2UvY2FjOlBheW1lbnRNZWFucyk+MCI+DQogICAgICA8ZGl2IGNsYXNzPSJmYXR1cmFfbm90X2NvbnRhaW5lcl93X2JveCIgPg0KICAgICAgICA8Yj7DlmRlbWUgS2/Fn3VsbGFyxLE6PC9iPg0KICAgICAgICA8YnIvPg0KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpJbnZvaWNlL2NhYzpQYXltZW50TWVhbnMiPg0KICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4gIT0gJycgYW5kIC4gIT0gJ251bGwnIiA+DQogICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjYmM6SW5zdHJ1Y3Rpb25Ob3RlIGFuZCBzdHJpbmctbGVuZ3RoKGNiYzpJbnN0cnVjdGlvbk5vdGUpPjAiPg0KICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpJbnN0cnVjdGlvbk5vdGUiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOlBheW1lbnRNZWFuc0NvZGUiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPiA6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6UGF5bWVudER1ZURhdGUiICBkaXNhYmxlLW91dHB1dC1lc2NhcGluZz0ieWVzIiAvPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgPC9kaXY+DQogICAgPC94c2w6aWY+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9Im9wdGV2a2lmYXQyIj4NCiAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJzEnIi8+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9Im9wdGV2a2lmYXQzIj4NCiAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJzAnIi8+DQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9InRldmtpZmF0X2FjaWtsYW1hc2kiPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0icDEiIC8+DQogICAgPHhzbDppZiB0ZXN0PSIkcDEiPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYwMSciPllBUElNIMSwxZ5MRVLEsCDEsExFIEJVIMSwxZ5MRVJMRSBCxLBSTMSwS1RFIMSwRkEgRUTEsExFTiBNw5xIRU5ExLBTTMSwSy1NxLBNQVJMSUsgVkUgRVTDnFQtUFJPSkUgSMSwWk1FVExFUsSwICpHVCAxMTctQsO2bMO8bSAoMy4yLjEpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYwMiciPkVUw5xULCBQTEFOLVBST0pFLCBEQU5JxZ5NQU5MSUssIERFTkVUxLBNIFZFIEJFTlpFUsSwIEjEsFpNRVRMRVIqR1QgMTE3LULDtmzDvG0gKDMuMi4yKSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MDMnIj5NQUvEsE5FLCBURcOHSMSwWkFULCBERU3EsFJCQcWeIFZFIFRBxZ5JVExBUkEgQcSwVCBUQUTEsEwsIEJBS0lNIFZFIE9OQVJJTSBIxLBaTUVUTEVSxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjIuMyk8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MDQnIj5ZRU1FSyBTRVJWxLBTIEjEsFpNRVTEsCAqR1QgMTE3LULDtmzDvG0gKDMuMi40KSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MDUnIj5PUkdBTsSwWkFTWU9OIEjEsFpNRVTEsCAqR1QgMTE3LULDtmzDvG0gKDMuMi40KSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MDYnIj7EsMWeR8OcQ8OcIFRFTcSwTiBIxLBaTUVUTEVSxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjIuNSkrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjA3JyI+w5ZaRUwgR8OcVkVOTMSwSyBIxLBaTUVUxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjIuNSkrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjA4JyI+WUFQSSBERU5FVMSwTSBIxLBaTUVUTEVSxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjIuNikrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjA5JyI+RkFTT04gT0xBUkFLIFlBUFRJUklMQU4gVEVLU1TEsEwgVkUgS09ORkVLU8SwWU9OIMSwxZ5MRVLEsCwgw4dBTlRBIFZFIEFZQUtLQUJJIETEsEvEsE0gxLDFnkxFUsSwIFZFIEJVIMSwxZ5MRVJFIEFSQUNJTElLIEjEsFpNRVRMRVLEsCAqR1QgMTE3LULDtmzDvG0gKDMuMi43KSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MTAnIj5UVVLEsFNUxLBLIE1BxJ5BWkFMQVJBIFZFUsSwTEVOIE3DnMWeVEVSxLAgQlVMTUEgLyBHw5ZUw5xSTUUgSMSwWk1FVExFUsSwICpHVCAxMTctQsO2bMO8bSAoMy4yLjgpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYxMSciPlNQT1IgS1VMw5xQTEVSxLBOxLBOIFlBWUlOLCBSRUtMw4JNIFZFIMSwU8SwTSBIQUtLSSBHRUzEsFJMRVLEsE5FIEtPTlUgxLDFnkxFTUxFUsSwICpHVCAxMTctQsO2bMO8bSAoMy4yLjkpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYxMiciPlRFTcSwWkzEsEsgSMSwWk1FVMSwICpHVCAxMTctQsO2bMO8bSAoMy4yLjEwKSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MTMnIj7Dh0VWUkUgVkUgQkFIw4dFIEJBS0lNIEjEsFpNRVRMRVLEsCAqR1QgMTE3LULDtmzDvG0gKDMuMi4xMCkrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjE0JyI+U0VSVsSwUyBUQcWeSU1BQ0lMScSeSSBIxLBaTUVUxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjIuMTEpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYxNSciPkhFUiBUw5xSTMOcIEJBU0tJIFZFIEJBU0lNIEjEsFpNRVRMRVLEsCAqR1QgMTE3LULDtmzDvG0gKDMuMi4xMikrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjE2JyI+NTAxOCBTQVlJTEkgS0FOVU5BIEVLTMSwIENFVFZFTExFUkRFS8SwIMSwREFSRSwgS1VSVU0gVkUgS1VSVcWeTEFSQSBZQVBJTEFOIETEsMSeRVIgSMSwWk1FVExFUiAqR1QgMTE3LULDtmzDvG0gKDMuMi4xMykrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjE3JyI+SFVSREEgTUVUQUxERU4gRUxERSBFRMSwTEVOIEvDnEzDh0UgVEVTTMSwTUxFUsSwICpHVCAxMTctQsO2bMO8bSAoMy4zLjEpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYxOCciPkhVUkRBIE1FVEFMREVOIEVMREUgRUTEsExFTkxFUiBEScWeSU5EQUvEsCBCQUtJUiwgw4fEsE5LTyBWRSBBTMOcTcSwTllVTSBLw5xMw4dFIFRFU0zEsE1MRVLEsCAqR1QgMTE3LULDtmzDvG0gKDMuMy4xKSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2MTknIj5CQUtJUiwgw4fEsE5LTyBWRSBBTMOcTcSwTllVTSDDnFLDnE5MRVLEsE7EsE4gVEVTTMSwTcSwICpHVCAxMTctQsO2bMO8bSAoMy4zLjIpKzwveHNsOndoZW4+DQogICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcDEgPSAgJzYyMCciPsSwU1TEsFNOQURBTiBWQVpHRcOHRU5MRVLEsE4gSFVSREEgVkUgQVRJSyBURVNMxLBNxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjMuMykrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjIxJyI+TUVUQUwsIFBMQVNUxLBLLCBMQVNUxLBLLCBLQVXDh1VLLCBLw4LEnklUIFZFIENBTSBIVVJEQSBWRSBBVElLTEFSREFOIEVMREUgRUTEsExFTiBIQU1NQURERSBURVNMxLBNxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjMuNCldPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjIyJyI+UEFNVUssIFTEsEZUxLBLLCBZw5xOIFZFIFlBUEHEnkkgxLBMRSBIQU0gUE9TVCBWRSBERVLEsCBURVNMxLBNTEVSxLAgKkdUIDExNy1Cw7Zsw7xtICgzLjMuNSkrPC94c2w6d2hlbj4NCiAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwMSA9ICAnNjIzJyI+QcSeQcOHIFZFIE9STUFOIMOcUsOcTkxFUsSwIFRFU0zEsE3EsCAqR1QgMTE3LULDtmzDvG0gKDMuMy42KSs8L3hzbDp3aGVuPg0KICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHAxID0gICc2NTAnIj5ExLDEnkVSTEVSxLA8L3hzbDp3aGVuPg0KICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOmlmPg0KDQogIDwveHNsOnRlbXBsYXRlPg0KICA8eHNsOnRlbXBsYXRlIG5hbWU9ImZhdHVyYV9ib3Nfc2F0aXIiID4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImVsIi8+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJib3Nfc2F0aXJfc2F5aXNpIiBzZWxlY3Q9IjIwIC0gY291bnQoLy9uMTpJbnZvaWNlL2NhYzpJbnZvaWNlTGluZSkiIC8+DQogICAgPHhzbDppZiB0ZXN0PSIkYm9zX3NhdGlyX3NheWlzaSAmZ3Q7IDAiPg0KICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IigvLyopW3Bvc2l0aW9uKCkgJmx0Oz0gJGJvc19zYXRpcl9zYXlpc2ldIj4NCiAgICAgICAgPHRyPg0KICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiA+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYm9zX3NhdGlyIj4NCiAgICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgPC90ZD4NCiAgICAgICAgPC90cj4NCiAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgIDwveHNsOmlmPg0KICA8L3hzbDp0ZW1wbGF0ZT4NCiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJmYXR1cmFfc2F0aXIiID4NCiAgICA8eHNsOnBhcmFtIG5hbWU9ImVsIi8+DQogICAgPHRyPg0KICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICA8eHNsOndoZW4gdGVzdD0icG9zaXRpb24oKSBtb2QgMiA9IDEiPnNhdGlyIG9kZDwveHNsOndoZW4+DQogICAgICAgICAgPHhzbDpvdGhlcndpc2U+c2F0aXIgZXZlbjwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgPC94c2w6YXR0cmlidXRlPg0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9zaXJhIGtvbG9uX2RlZ2VyIiBhbGlnbj0iY2VudGVyIiA+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfc2lyYSI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InBvc2l0aW9uKCkiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWFsX2tvZCBrb2xvbl9kZWdlciIgPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzYXRpcl9tYWxfa29kIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOkl0ZW0vY2FjOlNlbGxlcnNJdGVtSWRlbnRpZmljYXRpb24vY2JjOklEIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvdGQ+DQogICAgICA8dGQgY2xhc3M9InNhdGlyX21hbCBrb2xvbl9kZWdlciIgPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuX3NhdGlyX21hbCI+DQogICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2NhYzpJdGVtL2NiYzpOYW1lICE9ICcnIGFuZCAuL2NhYzpJdGVtL2NiYzpOYW1lICE9ICdudWxsJyIgPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2FjOkl0ZW0vY2JjOk5hbWUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2NhYzpJdGVtL2NiYzpEZXNjcmlwdGlvbiAhPSAnJyBhbmQgLi9jYWM6SXRlbS9jYmM6RGVzY3JpcHRpb24gIT0gJ251bGwnIiA+DQogICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL2NhYzpJdGVtL2NiYzpEZXNjcmlwdGlvbiIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vY2JjOk5vdGUgIT0gJycgYW5kIC4vY2JjOk5vdGUgIT0gJ251bGwnIiA+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2F0aXJfbm90dSI+PC9zcGFuPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2JjOk5vdGUiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfbWlrdGFyIGtvbG9uX2RlZ2VyIiBhbGlnbj0icmlnaHQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuX3NhdGlyX21pa3RhciI+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X21pa3RhciI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgICAgDQogICAgICA8dGQgY2xhc3M9InNhdGlyX2JmaXlhdCBrb2xvbl9kZWdlciIgYWxpZ249InJpZ2h0Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3Bhbl9zYXRpcl9iZml5YXQiPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludF9iaXJpbV9maXlhdCI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgPCEtLQ0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9pc2tvbnRvX29yYW4ga29sb25fZGVnZXIiIGFsaWduPSJyaWdodCI+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfaXNrb250b19vcmFuIj4NCiAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJpbnRfaXNrb250b19vcmFuIj48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvdGQ+DQogICAgICANCiAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfa2R2X29yYW4ga29sb25fZGVnZXIiIGFsaWduPSJyaWdodCI+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfa2R2X29yYW4iPg0KICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludF9rZHZfb3JhbiI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgLS0+DQogICAgPCEtLSAgPHRkIGNsYXNzPSJzYXRpcl9rZHZfdHV0YXIga29sb25fZGVnZXIiIGFsaWduPSJyaWdodCI+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfa2R2X3R1dGFyIj4NCiAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJpbnRfa2R2X3R1dGFyIj48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvdGQ+LS0+DQogICAgICANCiAgICAgIDx0ZCBjbGFzcz0ic2F0aXJfdG9wbGFtIGtvbG9uX2RlZ2VyIiBhbGlnbj0icmlnaHQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuX3NhdGlyX3RvcGxhbSI+DQogICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByaW50X3NhdGlyX3RvcGxhbSI+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICA8eHNsOndoZW4gdGVzdD0iLy9uMTpJbnZvaWNlL2NiYzpQcm9maWxlSUQgYW5kIC8vbjE6SW52b2ljZS9jYmM6UHJvZmlsZUlEID0gJ0lIUkFDQVQnIj4NCiAgICAgICANCiAgICAgICA8dGQgY2xhc3M9InNhdGlyX3Rlc2xpbV9zYXJ0aSBrb2xvbl9kZWdlciIgYWxpZ249InJpZ2h0Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3Bhbl9zYXRpcl90ZXNsaW1fc2FydGkiPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL2NhYzpEZWxpdmVyeS9jYWM6RGVsaXZlcnlUZXJtcy9jYmM6SUQiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIA0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9lc3lhX2thcF9jaW5zaSBrb2xvbl9kZWdlciIgYWxpZ249InJpZ2h0Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3Bhbl9zYXRpcl9lc3lhX2thcF9jaW5zaSI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJpbnRfZXN5YV9rYXBfY2luc2kiID4NCiAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJrYXBjaW5zaSIgIHNlbGVjdD0iLi9jYWM6RGVsaXZlcnkvY2FjOlNoaXBtZW50L2NhYzpUcmFuc3BvcnRIYW5kbGluZ1VuaXQvY2FjOkFjdHVhbFBhY2thZ2UvY2JjOlBhY2thZ2luZ1R5cGVDb2RlIiAvPg0KICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIA0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9rYXBfbm8ga29sb25fZGVnZXIiIGFsaWduPSJyaWdodCI+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfa2FwX25vIj4NCiAgICAgICAgPCEtLSAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2FjOkRlbGl2ZXJ5L2NhYzpTaGlwbWVudC9jYWM6R29vZHNJdGVtL2NiYzpSZXF1aXJlZEN1c3RvbXNJRCIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgLS0+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIA0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9rYXBfYWRldCBrb2xvbl9kZWdlciIgYWxpZ249InJpZ2h0Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3Bhbl9zYXRpcl9rYXBfYWRldCI+DQogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2FjOkRlbGl2ZXJ5L2NhYzpTaGlwbWVudC9jYWM6VHJhbnNwb3J0SGFuZGxpbmdVbml0L2NhYzpBY3R1YWxQYWNrYWdlL2NiYzpRdWFudGl0eSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgDQogICAgICA8dGQgY2xhc3M9InNhdGlyX3Rlc2xpbV9iZWRlbF9vZGVtZV95ZXJpIGtvbG9uX2RlZ2VyIiBhbGlnbj0icmlnaHQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuX3NhdGlyX3Rlc2xpbV9iZWRlbF9vZGVtZV95ZXJpIj4NCiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9jYWM6RGVsaXZlcnkvY2FjOkRlbGl2ZXJ5QWRkcmVzcy9jYmM6U3RyZWV0TmFtZSIgZGlzYWJsZS1vdXRwdXQtZXNjYXBpbmc9InllcyIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgDQogICAgICA8dGQgY2xhc3M9InNhdGlyX2dvbmRlcmlsbWVfc2VrbGkga29sb25fZGVnZXIiIGFsaWduPSJyaWdodCI+DQogICAgICAgIDxkaXYgY2xhc3M9InNwYW5fc2F0aXJfZ29uZGVyaWxtZV9zZWtsaSI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludF9nb25kZXJpbG1lX3Nla2xpIiA+DQogICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZ29uZGVyaW0iICBzZWxlY3Q9Ii4vY2FjOkRlbGl2ZXJ5L2NhYzpTaGlwbWVudC9jYWM6U2hpcG1lbnRTdGFnZS9jYmM6VHJhbnNwb3J0TW9kZUNvZGUiIC8+DQogICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L3RkPg0KICAgICAgIA0KICAgICAgPHRkIGNsYXNzPSJzYXRpcl9ndGlwIGtvbG9uX2RlZ2VyIiBhbGlnbj0icmlnaHQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuX3NhdGlyX2d0aXAiPg0KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL2NhYzpEZWxpdmVyeS9jYWM6U2hpcG1lbnQvY2FjOkdvb2RzSXRlbS9jYmM6UmVxdWlyZWRDdXN0b21zSUQiIGRpc2FibGUtb3V0cHV0LWVzY2FwaW5nPSJ5ZXMiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC90ZD4NCiAgICAgIDwveHNsOndoZW4+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC90cj4NCiAgPC94c2w6dGVtcGxhdGU+DQo8L3hzbDpzdHlsZXNoZWV0Pg=="

                        }
                    },
                    ID = new ID()
                    {
                        schemeID = "",
                        Value = "123123123123"
                    },
                    IssueDate = fatura.vadetarihi
                };
                var t5 = fatSatir;
                var t6 = new LegalMonetaryTotal()
                {
                    AllowanceTotalAmount = new AllowanceTotalAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.iskontotoplam
                    },
                    LineExtensionAmount = new LineExtensionAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.nettoplam
                    },
                    PayableAmount = new PayableAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.geneltoplam
                    },
                    TaxExclusiveAmount = new TaxExclusiveAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.bruttoplam
                    },
                    TaxInclusiveAmount = new TaxInclusiveAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.bruttoplam + fatura.kdvtoplam
                    },

                };
                var t8 = new TaxTotal()
                {
                    TaxAmount = new TaxAmount()
                    {
                        currencyID = "TRL",
                        Value = fatura.kdvtoplam
                    },
                    TaxSubtotal = new TaxTotalTaxSubtotal()
                    {
                        CalculationSequenceNumeric = 1,
                        Percent = faturadetay.FirstOrDefault().kdv,
                        TaxableAmount = new TaxableAmount()
                        {
                            currencyID = "TRL",
                            Value = fatura.kdvtoplam
                        },
                        TaxAmount = new TaxAmount()
                        {
                            currencyID = "TRL",
                            Value = fatura.kdvtoplam
                        },
                        TaxCategory = new TaxTotalTaxSubtotalTaxCategory()
                        {
                            TaxScheme = new TaxTotalTaxSubtotalTaxCategoryTaxScheme()
                            {
                                Name = "KDV",
                                TaxTypeCode = "0015"
                            }
                        }
                    }
                };
                TemelFaturaXML.Invoice temelfatura = new Invoice()
                {
                    AccountingCustomerParty = t1,
                    AccountingSupplierParty = t2,
                    AdditionalDocumentReference = t3,
                    CopyIndicator = false,
                    CustomizationID = "TR1.0",
                    UBLVersionID = decimal.Parse("2.1"),
                    InvoiceLine = t5,
                    InvoiceTypeCode = "SATIS",
                    IssueDate = fatura.vadetarihi,
                    LegalMonetaryTotal = t6,
                    LineCountNumeric = 1,
                    Note = "",
                    ProfileID = "TEMELFATURA",
                    TaxTotal = t8,
                    ID = new ID()
                    {
                        schemeID = "",
                        Value = fatura.belgeno,
                    },
                    AllowanceCharge = new AllowanceCharge()
                    {
                        Amount = new Amount()
                        {
                            currencyID = "TRL",
                            Value = 999
                        },
                        ChargeIndicator = false
                    },
                    UBLExtensions = new UBLExtensions()
                    {
                        UBLExtension = new UBLExtensionsUBLExtension()
                        {

                        }
                    },
                    DocumentCurrencyCode = "TRY",
                    Signature = new Signature()
                    {

                        ID = new ID()
                        {
                            schemeID = "VKN_TCKN",
                            Value = cari.vergino
                        },
                        SignatoryParty = new SignatureSignatoryParty()
                        {
                            PartyIdentification = new SignatureSignatoryPartyPartyIdentification()
                            {
                                ID = new ID()
                                {
                                    schemeID = "VKN",
                                    Value = cari.vergino
                                }
                            },
                            PostalAddress = new SignatureSignatoryPartyPostalAddress()
                            {
                                Room = "340",
                                BuildingName = "YDA CENTER",
                                BuildingNumber = cari.apt,
                                CityName = cari.il,
                                Country = new SignatureSignatoryPartyPostalAddressCountry() { Name = cari.ulke },
                                CitySubdivisionName = cari.ilce,
                                PostalZone = cari.postakod,
                                Region = cari.ilce,
                                StreetName = cari.adres,


                            }
                        }
                    }

                };



                server = new RichEditDocumentServer();
                var ss = temelfatura.SerializeToXml<TemelFaturaXML.Invoice>();

                //File.WriteAllText("Employee.xml", ss.ToString(),Encoding.UTF8);

                //Create the DataSet from the XML file
                XslCompiledTransform proc = new XslCompiledTransform();
                proc.Load("Employee.xslt");
                proc.Transform(Application.StartupPath + "Employee.xml", Application.StartupPath + "output.html");
                PrintToPDF(Application.StartupPath + "output.rtf");
                MessageBox.Show("Document created successfully.....");

            }
            catch (Exception ex)
            {
                writer = null;
                nav = null;
                root = null;
                xmlDoc = null;
                ds = null;
                MessageBox.Show(ex.StackTrace);
            }
        }
        List<string> fileList = new List<string>();
        RichEditDocumentServer server;
        PerformanceCounter counter;

        private void PrintToPDF(string filePath)
        {
            string displayText;

            try
            {
                server.LoadDocument(filePath);
            }
            catch (Exception ex)
            {
                server.CreateNewDocument();
                displayText = String.Format("{0:T} Error:{1} -> {2}", DateTime.Now, ex.Message, filePath) + Environment.NewLine;

                return;
            }
            server.Document.Sections[0].Page.Landscape = false;
            server.Document.Sections[0].Margins.Left = 100f;
            server.Document.Sections[0].Margins.Right = 0f;
            server.Document.Sections[0].Margins.Top = 100f;
            server.Document.Sections[0].Margins.Bottom = 0f;
            server.Document.Sections[0].Page.PaperKind = System.Drawing.Printing.PaperKind.Custom;
            server.Document.Sections[0].Page.Width = 3080;
            server.Document.Sections[0].Page.Height = 5920;

            string outFileName = Path.ChangeExtension(filePath, "pdf");
            FileStream fsOut = File.Open(outFileName, FileMode.Create);
            server.ExportToPdf(fsOut);
            fsOut.Close();
            displayText = String.Format("{0:T} Done-> {1}", DateTime.Now, outFileName) + Environment.NewLine;

        }

        private async void simpleButton1_Click(object sender, EventArgs e)
        {
         
        }

    
    }
}
